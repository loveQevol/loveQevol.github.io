<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Gin框架源码解析</title>
      <link href="/2022/12/19/Gin%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2022/12/19/Gin%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Gin框架源码解析"><a href="#Gin框架源码解析" class="headerlink" title="Gin框架源码解析"></a>Gin框架源码解析</h1><h2 id="1-1-gin框架路由详解"><a href="#1-1-gin框架路由详解" class="headerlink" title="1.1 gin框架路由详解"></a>1.1 gin框架路由详解</h2><p>gin框架使用的是定制版本的<a href="https://github.com/julienschmidt/httprouter">httprouter</a>，其路由的原理是大量使用公共前缀的树结构，它基本上是一个紧凑的<a href="https://baike.sogou.com/v66237892.htm">Trie tree</a>（或者只是<a href="https://baike.sogou.com/v73626121.htm">Radix Tree</a>）。具有公共前缀的节点也共享一个公共父节点。</p><blockquote><p><font color="red"><strong>Radix Tree</strong></font></p></blockquote><p>基数树（Radix Tree）又称为PAT位树（Patricia Trie or crit bit tree），是一种更节省空间的前缀树（Trie Tree）。对于基数树的每个节点，如果该节点是唯一的子树的话，就和父节点合并。下图为一个基数树示例：</p><p><img src="/2022/12/19/Gin%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/image-20221219200500471.png"></p><p><code>Radix Tree</code>可以被认为是一棵简洁版的前缀树。我们注册路由的过程就是构造前缀树的过程，具有公共前缀的节点也共享一个公共父节点。假设我们现在注册有以下路由信息：</p><pre class=" language-go"><code class="language-go">r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> func1<span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/search/"</span><span class="token punctuation">,</span> func2<span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/support/"</span><span class="token punctuation">,</span> func3<span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/blog/"</span><span class="token punctuation">,</span> func4<span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/blog/:post/"</span><span class="token punctuation">,</span> func5<span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/about-us/"</span><span class="token punctuation">,</span> func6<span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/about-us/team/"</span><span class="token punctuation">,</span> func7<span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/contact/"</span><span class="token punctuation">,</span> func8<span class="token punctuation">)</span></code></pre><p>那么我们会得到一个<code>GET</code>方法对应的路由树，具体结构如下：</p><pre><code>Priority   Path             Handle9          \                *&lt;1&gt;3          ├s               nil2          |├earch\         *&lt;2&gt;1          |└upport\        *&lt;3&gt;2          ├blog\           *&lt;4&gt;1          |    └:post      nil1          |         └\     *&lt;5&gt;2          ├about-us\       *&lt;6&gt;1          |        └team\  *&lt;7&gt;1          └contact\        *&lt;8&gt;</code></pre><p>上面最右边那一列每个<code>*&lt;数字&gt;</code>表示Handle处理函数的内存地址(一个指针)。从根节点遍历到叶子节点我们就能得到完整的路由表。</p><p>例如：<code>blog/:post</code>其中<code>:post</code>只是实际文章名称的占位符(参数)。与<code>hash-maps</code>不同，这种树结构还允许我们使用像<code>:post</code>参数这种动态部分，因为我们实际上是根据路由模式进行匹配，而不仅仅是比较哈希值。</p><p>由于URL路径具有层次结构，并且只使用有限的一组字符(字节值)，所以很可能有许多常见的前缀。这使我们可以很容易地将路由简化为更小的问题。此外，**<font color="red">路由器为每种请求方法管理一棵单独的树</font>**。一方面，它比在每个节点中都保存一个method-&gt; handle map更加节省空间，它还使我们甚至可以在开始在前缀树中查找之前大大减少路由问题。</p><p>为了获得更好的可伸缩性，每个树级别上的子节点都按<code>Priority(优先级)</code>排序，其中优先级（最左列）就是在子节点(子节点、子子节点等等)中注册的句柄的数量。这样做有两个好处：</p><ol><li>首先优先匹配被大多数路由路径包含的节点。这样可以让尽可能多的路由快速被定位。</li><li>类似于成本补偿。最长的路径可以被优先匹配，补偿体现在最长的路径需要花费更长的时间来定位，如果最长路径的节点能被优先匹配（即每次拿子节点都命中），那么路由匹配所花的时间不一定比短路径的路由长。下面展示了节点（每个<code>-</code>可以看做一个节点）匹配的路径：从左到右，从上到下。</li></ol><pre><code>   ├------------   ├---------   ├-----   ├----   ├--   ├--   └-</code></pre><blockquote><p><strong><font color="red">路由树节点</font></strong></p></blockquote><p>路由树是由一个个节点构成的，gin框架路由树的节点由<code>node</code>结构体表示，它有以下字段：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// tree.go</span><span class="token keyword">type</span> node <span class="token keyword">struct</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 节点路径，比如上面的s，earch，和upport</span>    path      <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 和children字段对应, 保存的是分裂的分支的第一个字符</span>    <span class="token comment" spellcheck="true">// 例如search和support, 那么s节点的indices对应的"eu"</span>    <span class="token comment" spellcheck="true">// 代表有两个分支, 分支的首字母分别是e和u</span>    indices   <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 儿子节点</span>    children  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>node    <span class="token comment" spellcheck="true">// 处理函数链条（切片）</span>    handlers  HandlersChain    <span class="token comment" spellcheck="true">// 优先级，子节点、子子节点等注册的handler数量</span>    priority  <span class="token builtin">uint32</span>    <span class="token comment" spellcheck="true">// 节点类型，包括static, root, param, catchAll</span>    <span class="token comment" spellcheck="true">// static: 静态节点（默认），比如上面的s，earch等节点</span>    <span class="token comment" spellcheck="true">// root: 树的根节点</span>    <span class="token comment" spellcheck="true">// catchAll: 有*匹配的节点</span>    <span class="token comment" spellcheck="true">// param: 参数节点</span>    nType     nodeType    <span class="token comment" spellcheck="true">// 路径上最大参数个数</span>    maxParams <span class="token builtin">uint8</span>    <span class="token comment" spellcheck="true">// 节点是否是参数节点，比如上面的:post</span>    wildChild <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 完整路径</span>    fullPath  <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><blockquote><p><strong><font color="red">请求方法树</font></strong></p></blockquote><p>在gin的路由中，每一个<code>HTTP Method</code>(GET、POST、PUT、DELETE…)都对应了一棵 <code>radix tree</code>，我们注册路由的时候会调用下面的<code>addRoute</code>函数：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// gin.go</span><span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">addRoute</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> path <span class="token builtin">string</span><span class="token punctuation">,</span> handlers HandlersChain<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// liwenzhou.com...</span>      <span class="token comment" spellcheck="true">// 获取请求方法对应的树</span>    root <span class="token operator">:=</span> engine<span class="token punctuation">.</span>trees<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span>    <span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 如果没有就创建一个</span>        root <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>        root<span class="token punctuation">.</span>fullPath <span class="token operator">=</span> <span class="token string">"/"</span>        engine<span class="token punctuation">.</span>trees <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>engine<span class="token punctuation">.</span>trees<span class="token punctuation">,</span> methodTree<span class="token punctuation">{</span>method<span class="token punctuation">:</span> method<span class="token punctuation">,</span> root<span class="token punctuation">:</span> root<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    root<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> handlers<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>从上面的代码中我们可以看到在注册路由的时候都是先根据请求方法获取对应的树，也就是gin框架会为每一个请求方法创建一棵对应的树。只不过需要注意到一个细节是gin框架中保存请求方法对应树关系并不是使用的map而是使用的切片，<code>engine.trees</code>的类型是<code>methodTrees</code>，其定义如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> methodTree <span class="token keyword">struct</span> <span class="token punctuation">{</span>    method <span class="token builtin">string</span>    root   <span class="token operator">*</span>node<span class="token punctuation">}</span><span class="token keyword">type</span> methodTrees <span class="token punctuation">[</span><span class="token punctuation">]</span>methodTree  <span class="token comment" spellcheck="true">// slice</span></code></pre><p>而获取请求方法对应树的get方法定义如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>trees methodTrees<span class="token punctuation">)</span> <span class="token function">get</span><span class="token punctuation">(</span>method <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>node <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tree <span class="token operator">:=</span> <span class="token keyword">range</span> trees <span class="token punctuation">{</span>        <span class="token keyword">if</span> tree<span class="token punctuation">.</span>method <span class="token operator">==</span> method <span class="token punctuation">{</span>            <span class="token keyword">return</span> tree<span class="token punctuation">.</span>root        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>为什么使用切片而不是map来存储<code>请求方法-&gt;树</code>的结构呢？我猜是出于节省内存的考虑吧，毕竟HTTP请求方法的数量是固定的，而且常用的就那几种，所以即使使用切片存储查询起来效率也足够了。顺着这个思路，我们可以看一下gin框架中<code>engine</code>的初始化方法中，确实对<code>tress</code>字段做了一次内存申请：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Engine <span class="token punctuation">{</span>    <span class="token function">debugPrintWARNINGNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    engine <span class="token operator">:=</span> <span class="token operator">&amp;</span>Engine<span class="token punctuation">{</span>        RouterGroup<span class="token punctuation">:</span> RouterGroup<span class="token punctuation">{</span>            Handlers<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>            basePath<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>            root<span class="token punctuation">:</span>     <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// liwenzhou.com ...</span>        <span class="token comment" spellcheck="true">// 初始化容量为9的切片（HTTP1.1请求方法共9种）</span>        trees<span class="token punctuation">:</span>                  <span class="token function">make</span><span class="token punctuation">(</span>methodTrees<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// liwenzhou.com...</span>    <span class="token punctuation">}</span>    engine<span class="token punctuation">.</span>RouterGroup<span class="token punctuation">.</span>engine <span class="token operator">=</span> engine    engine<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>New <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> engine<span class="token punctuation">.</span><span class="token function">allocateContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> engine<span class="token punctuation">}</span></code></pre><blockquote><p><strong><font color="red">注册路由</font></strong></p></blockquote><p>注册路由的逻辑主要有<code>addRoute</code>函数和<code>insertChild</code>方法。</p><p><font color="red"><strong>addRoute</strong></font></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// tree.go</span><span class="token comment" spellcheck="true">// addRoute 将具有给定句柄的节点添加到路径中。</span><span class="token comment" spellcheck="true">// 不是并发安全的</span><span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token function">addRoute</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> handlers HandlersChain<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fullPath <span class="token operator">:=</span> path    n<span class="token punctuation">.</span>priority<span class="token operator">++</span>    numParams <span class="token operator">:=</span> <span class="token function">countParams</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 数一下参数个数</span>    <span class="token comment" spellcheck="true">// 空树就直接插入当前节点</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        n<span class="token punctuation">.</span><span class="token function">insertChild</span><span class="token punctuation">(</span>numParams<span class="token punctuation">,</span> path<span class="token punctuation">,</span> fullPath<span class="token punctuation">,</span> handlers<span class="token punctuation">)</span>        n<span class="token punctuation">.</span>nType <span class="token operator">=</span> root        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    parentFullPathIndex <span class="token operator">:=</span> <span class="token number">0</span>walk<span class="token punctuation">:</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 更新当前节点的最大参数个数</span>        <span class="token keyword">if</span> numParams <span class="token operator">></span> n<span class="token punctuation">.</span>maxParams <span class="token punctuation">{</span>            n<span class="token punctuation">.</span>maxParams <span class="token operator">=</span> numParams        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 找到最长的通用前缀</span>        <span class="token comment" spellcheck="true">// 这也意味着公共前缀不包含“:”"或“*” /</span>        <span class="token comment" spellcheck="true">// 因为现有键不能包含这些字符。</span>        i <span class="token operator">:=</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> n<span class="token punctuation">.</span>path<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 分裂边缘（此处分裂的是当前树节点）</span>        <span class="token comment" spellcheck="true">// 例如一开始path是search，新加入support，s是他们通用的最长前缀部分</span>        <span class="token comment" spellcheck="true">// 那么会将s拿出来作为parent节点，增加earch和upport作为child节点</span>        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>            child <span class="token operator">:=</span> node<span class="token punctuation">{</span>                path<span class="token punctuation">:</span>      n<span class="token punctuation">.</span>path<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 公共前缀后的部分作为子节点</span>                wildChild<span class="token punctuation">:</span> n<span class="token punctuation">.</span>wildChild<span class="token punctuation">,</span>                indices<span class="token punctuation">:</span>   n<span class="token punctuation">.</span>indices<span class="token punctuation">,</span>                children<span class="token punctuation">:</span>  n<span class="token punctuation">.</span>children<span class="token punctuation">,</span>                handlers<span class="token punctuation">:</span>  n<span class="token punctuation">.</span>handlers<span class="token punctuation">,</span>                priority<span class="token punctuation">:</span>  n<span class="token punctuation">.</span>priority <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//子节点优先级-1</span>                fullPath<span class="token punctuation">:</span>  n<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Update maxParams (max of all children)</span>            <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> child<span class="token punctuation">.</span>children <span class="token punctuation">{</span>                <span class="token keyword">if</span> v<span class="token punctuation">.</span>maxParams <span class="token operator">></span> child<span class="token punctuation">.</span>maxParams <span class="token punctuation">{</span>                    child<span class="token punctuation">.</span>maxParams <span class="token operator">=</span> v<span class="token punctuation">.</span>maxParams                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            n<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>node<span class="token punctuation">{</span><span class="token operator">&amp;</span>child<span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// []byte for proper unicode char conversion, see #65</span>            n<span class="token punctuation">.</span>indices <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span>n<span class="token punctuation">.</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            n<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span>            n<span class="token punctuation">.</span>handlers <span class="token operator">=</span> <span class="token boolean">nil</span>            n<span class="token punctuation">.</span>wildChild <span class="token operator">=</span> <span class="token boolean">false</span>            n<span class="token punctuation">.</span>fullPath <span class="token operator">=</span> fullPath<span class="token punctuation">[</span><span class="token punctuation">:</span>parentFullPathIndex<span class="token operator">+</span>i<span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将新来的节点插入新的parent节点作为子节点</span>        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>            path <span class="token operator">=</span> path<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> n<span class="token punctuation">.</span>wildChild <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果是参数节点</span>                parentFullPathIndex <span class="token operator">+=</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>path<span class="token punctuation">)</span>                n <span class="token operator">=</span> n<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                n<span class="token punctuation">.</span>priority<span class="token operator">++</span>                <span class="token comment" spellcheck="true">// Update maxParams of the child node</span>                <span class="token keyword">if</span> numParams <span class="token operator">></span> n<span class="token punctuation">.</span>maxParams <span class="token punctuation">{</span>                    n<span class="token punctuation">.</span>maxParams <span class="token operator">=</span> numParams                <span class="token punctuation">}</span>                numParams<span class="token operator">--</span>                <span class="token comment" spellcheck="true">// 检查通配符是否匹配</span>                <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>path <span class="token operator">==</span> path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 检查更长的通配符, 例如 :name and :names</span>                    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">||</span> path<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'/'</span> <span class="token punctuation">{</span>                        <span class="token keyword">continue</span> walk                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                pathSeg <span class="token operator">:=</span> path                <span class="token keyword">if</span> n<span class="token punctuation">.</span>nType <span class="token operator">!=</span> catchAll <span class="token punctuation">{</span>                    pathSeg <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">SplitN</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                <span class="token punctuation">}</span>                prefix <span class="token operator">:=</span> fullPath<span class="token punctuation">[</span><span class="token punctuation">:</span>strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>fullPath<span class="token punctuation">,</span> pathSeg<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">.</span>path                <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"'"</span> <span class="token operator">+</span> pathSeg <span class="token operator">+</span>                    <span class="token string">"' in new path '"</span> <span class="token operator">+</span> fullPath <span class="token operator">+</span>                    <span class="token string">"' conflicts with existing wildcard '"</span> <span class="token operator">+</span> n<span class="token punctuation">.</span>path <span class="token operator">+</span>                    <span class="token string">"' in existing prefix '"</span> <span class="token operator">+</span> prefix <span class="token operator">+</span>                    <span class="token string">"'"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 取path首字母，用来与indices做比较</span>            c <span class="token operator">:=</span> path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">// 处理参数后加斜线情况</span>            <span class="token keyword">if</span> n<span class="token punctuation">.</span>nType <span class="token operator">==</span> param <span class="token operator">&amp;&amp;</span> c <span class="token operator">==</span> <span class="token string">'/'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>                parentFullPathIndex <span class="token operator">+=</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>path<span class="token punctuation">)</span>                n <span class="token operator">=</span> n<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                n<span class="token punctuation">.</span>priority<span class="token operator">++</span>                <span class="token keyword">continue</span> walk            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 检查路path下一个字节的子节点是否存在</span>            <span class="token comment" spellcheck="true">// 比如s的子节点现在是earch和upport，indices为eu</span>            <span class="token comment" spellcheck="true">// 如果新加一个路由为super，那么就是和upport有匹配的部分u，将继续分列现在的upport节点</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span> max <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>indices<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> c <span class="token operator">==</span> n<span class="token punctuation">.</span>indices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>                    parentFullPathIndex <span class="token operator">+=</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>path<span class="token punctuation">)</span>                    i <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">incrementChildPrio</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                    n <span class="token operator">=</span> n<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    <span class="token keyword">continue</span> walk                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 否则就插入</span>            <span class="token keyword">if</span> c <span class="token operator">!=</span> <span class="token string">':'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token string">'*'</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// []byte for proper unicode char conversion, see #65</span>                <span class="token comment" spellcheck="true">// 注意这里是直接拼接第一个字符到n.indices</span>                n<span class="token punctuation">.</span>indices <span class="token operator">+=</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">)</span>                child <span class="token operator">:=</span> <span class="token operator">&amp;</span>node<span class="token punctuation">{</span>                    maxParams<span class="token punctuation">:</span> numParams<span class="token punctuation">,</span>                    fullPath<span class="token punctuation">:</span>  fullPath<span class="token punctuation">,</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 追加子节点</span>                n<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>children<span class="token punctuation">,</span> child<span class="token punctuation">)</span>                n<span class="token punctuation">.</span><span class="token function">incrementChildPrio</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>indices<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                n <span class="token operator">=</span> child            <span class="token punctuation">}</span>            n<span class="token punctuation">.</span><span class="token function">insertChild</span><span class="token punctuation">(</span>numParams<span class="token punctuation">,</span> path<span class="token punctuation">,</span> fullPath<span class="token punctuation">,</span> handlers<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 已经注册过的节点</span>        <span class="token keyword">if</span> n<span class="token punctuation">.</span>handlers <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"handlers are already registered for path '"</span> <span class="token operator">+</span> fullPath <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        n<span class="token punctuation">.</span>handlers <span class="token operator">=</span> handlers        <span class="token keyword">return</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其实上面的代码很好理解，大家可以参照动画尝试将以下情形代入上面的代码逻辑，体味整个路由树构造的详细过程：</p><ol><li>第一次注册路由，例如注册search</li><li>继续注册一条没有公共前缀的路由，例如blog</li><li>注册一条与先前注册的路由有公共前缀的路由，例如support</li></ol><p><font color="red"><strong>insertChild</strong></font></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// tree.go</span><span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token function">insertChild</span><span class="token punctuation">(</span>numParams <span class="token builtin">uint8</span><span class="token punctuation">,</span> path <span class="token builtin">string</span><span class="token punctuation">,</span> fullPath <span class="token builtin">string</span><span class="token punctuation">,</span> handlers HandlersChain<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 找到所有的参数</span>    <span class="token keyword">for</span> numParams <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 查找前缀直到第一个通配符</span>        wildcard<span class="token punctuation">,</span> i<span class="token punctuation">,</span> valid <span class="token operator">:=</span> <span class="token function">findWildcard</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没有发现通配符</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 通配符的名称必须包含':' 和 '*'</span>        <span class="token keyword">if</span> <span class="token operator">!</span>valid <span class="token punctuation">{</span>            <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"only one wildcard per path segment is allowed, has: '"</span> <span class="token operator">+</span>                wildcard <span class="token operator">+</span> <span class="token string">"' in path '"</span> <span class="token operator">+</span> fullPath <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 检查通配符是否有名称</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>wildcard<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">{</span>            <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"wildcards must be named with a non-empty name in path '"</span> <span class="token operator">+</span> fullPath <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 检查这个节点是否有已经存在的子节点</span>        <span class="token comment" spellcheck="true">// 如果我们在这里插入通配符，这些子节点将无法访问</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"wildcard segment '"</span> <span class="token operator">+</span> wildcard <span class="token operator">+</span>                <span class="token string">"' conflicts with existing children in path '"</span> <span class="token operator">+</span> fullPath <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> wildcard<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">':'</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// param</span>            <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 在当前通配符之前插入前缀</span>                n<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span>                path <span class="token operator">=</span> path<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>            n<span class="token punctuation">.</span>wildChild <span class="token operator">=</span> <span class="token boolean">true</span>            child <span class="token operator">:=</span> <span class="token operator">&amp;</span>node<span class="token punctuation">{</span>                nType<span class="token punctuation">:</span>     param<span class="token punctuation">,</span>                path<span class="token punctuation">:</span>      wildcard<span class="token punctuation">,</span>                maxParams<span class="token punctuation">:</span> numParams<span class="token punctuation">,</span>                fullPath<span class="token punctuation">:</span>  fullPath<span class="token punctuation">,</span>            <span class="token punctuation">}</span>            n<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>node<span class="token punctuation">{</span>child<span class="token punctuation">}</span>            n <span class="token operator">=</span> child            n<span class="token punctuation">.</span>priority<span class="token operator">++</span>            numParams<span class="token operator">--</span>            <span class="token comment" spellcheck="true">// 如果路径没有以通配符结束</span>            <span class="token comment" spellcheck="true">// 那么将有另一个以'/'开始的非通配符子路径。</span>            <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>wildcard<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>                path <span class="token operator">=</span> path<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>wildcard<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                child <span class="token operator">:=</span> <span class="token operator">&amp;</span>node<span class="token punctuation">{</span>                    maxParams<span class="token punctuation">:</span> numParams<span class="token punctuation">,</span>                    priority<span class="token punctuation">:</span>  <span class="token number">1</span><span class="token punctuation">,</span>                    fullPath<span class="token punctuation">:</span>  fullPath<span class="token punctuation">,</span>                <span class="token punctuation">}</span>                n<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>node<span class="token punctuation">{</span>child<span class="token punctuation">}</span>                n <span class="token operator">=</span> child  <span class="token comment" spellcheck="true">// 继续下一轮循环</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 否则我们就完成了。将处理函数插入新叶子中</span>            n<span class="token punctuation">.</span>handlers <span class="token operator">=</span> handlers            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// catchAll</span>        <span class="token keyword">if</span> i<span class="token operator">+</span><span class="token function">len</span><span class="token punctuation">(</span>wildcard<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">||</span> numParams <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">{</span>            <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"catch-all routes are only allowed at the end of the path in path '"</span> <span class="token operator">+</span> fullPath <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>path<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'/'</span> <span class="token punctuation">{</span>            <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"catch-all conflicts with existing handle for the path segment root in path '"</span> <span class="token operator">+</span> fullPath <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// currently fixed width 1 for '/'</span>        i<span class="token operator">--</span>        <span class="token keyword">if</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'/'</span> <span class="token punctuation">{</span>            <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"no / before catch-all in path '"</span> <span class="token operator">+</span> fullPath <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        n<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span>                <span class="token comment" spellcheck="true">// 第一个节点:路径为空的catchAll节点</span>        child <span class="token operator">:=</span> <span class="token operator">&amp;</span>node<span class="token punctuation">{</span>            wildChild<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            nType<span class="token punctuation">:</span>     catchAll<span class="token punctuation">,</span>            maxParams<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            fullPath<span class="token punctuation">:</span>  fullPath<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 更新父节点的maxParams</span>        <span class="token keyword">if</span> n<span class="token punctuation">.</span>maxParams <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>            n<span class="token punctuation">.</span>maxParams <span class="token operator">=</span> <span class="token number">1</span>        <span class="token punctuation">}</span>        n<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>node<span class="token punctuation">{</span>child<span class="token punctuation">}</span>        n<span class="token punctuation">.</span>indices <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> child        n<span class="token punctuation">.</span>priority<span class="token operator">++</span>        <span class="token comment" spellcheck="true">// 第二个节点:保存变量的节点</span>        child <span class="token operator">=</span> <span class="token operator">&amp;</span>node<span class="token punctuation">{</span>            path<span class="token punctuation">:</span>      path<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            nType<span class="token punctuation">:</span>     catchAll<span class="token punctuation">,</span>            maxParams<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            handlers<span class="token punctuation">:</span>  handlers<span class="token punctuation">,</span>            priority<span class="token punctuation">:</span>  <span class="token number">1</span><span class="token punctuation">,</span>            fullPath<span class="token punctuation">:</span>  fullPath<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        n<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>node<span class="token punctuation">{</span>child<span class="token punctuation">}</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果没有找到通配符，只需插入路径和句柄</span>    n<span class="token punctuation">.</span>path <span class="token operator">=</span> path    n<span class="token punctuation">.</span>handlers <span class="token operator">=</span> handlers    n<span class="token punctuation">.</span>fullPath <span class="token operator">=</span> fullPath<span class="token punctuation">}</span></code></pre><p><code>insertChild</code>函数是根据<code>path</code>本身进行分割，将<code>/</code>分开的部分分别作为节点保存，形成一棵树结构。参数匹配中的<code>:</code>和<code>*</code>的区别是，前者是匹配一个字段而后者是匹配后面所有的路径。</p><blockquote><p><font color="red"><strong>路由匹配</strong></font></p></blockquote><p>我们先来看gin框架处理请求的入口函数<code>ServeHTTP</code>：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// gin.go</span><span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这里使用了对象池</span>    c <span class="token operator">:=</span> engine<span class="token punctuation">.</span>pool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Context<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 这里有一个细节就是Get对象后做初始化</span>    c<span class="token punctuation">.</span>writermem<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>    c<span class="token punctuation">.</span>Request <span class="token operator">=</span> req    c<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    engine<span class="token punctuation">.</span><span class="token function">handleHTTPRequest</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 我们要找的处理HTTP请求的函数</span>    engine<span class="token punctuation">.</span>pool<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 处理完请求后将对象放回池子</span><span class="token punctuation">}</span></code></pre><p>函数很长，这里省略了部分代码，只保留相关逻辑代码：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// gin.go</span><span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">handleHTTPRequest</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// liwenzhou.com...</span>    <span class="token comment" spellcheck="true">// 根据请求方法找到对应的路由树</span>    t <span class="token operator">:=</span> engine<span class="token punctuation">.</span>trees    <span class="token keyword">for</span> i<span class="token punctuation">,</span> tl <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tl<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>method <span class="token operator">!=</span> httpMethod <span class="token punctuation">{</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        root <span class="token operator">:=</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>root        <span class="token comment" spellcheck="true">// 在路由树中根据path查找</span>        value <span class="token operator">:=</span> root<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>rPath<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Params<span class="token punctuation">,</span> unescape<span class="token punctuation">)</span>        <span class="token keyword">if</span> value<span class="token punctuation">.</span>handlers <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            c<span class="token punctuation">.</span>handlers <span class="token operator">=</span> value<span class="token punctuation">.</span>handlers            c<span class="token punctuation">.</span>Params <span class="token operator">=</span> value<span class="token punctuation">.</span>params            c<span class="token punctuation">.</span>fullPath <span class="token operator">=</span> value<span class="token punctuation">.</span>fullPath            c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 执行函数链条</span>            c<span class="token punctuation">.</span>writermem<span class="token punctuation">.</span><span class="token function">WriteHeaderNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// liwenzhou.com...</span>    c<span class="token punctuation">.</span>handlers <span class="token operator">=</span> engine<span class="token punctuation">.</span>allNoRoute    <span class="token function">serveError</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> default404Body<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>路由匹配是由节点的 <code>getValue</code>方法实现的。<code>getValue</code>根据给定的路径(键)返回<code>nodeValue</code>值，保存注册的处理函数和匹配到的路径参数数据。</p><p>如果找不到任何处理函数，则会尝试TSR(尾随斜杠重定向)。</p><p>代码虽然很长，但还算比较工整。大家可以借助注释看一下路由查找及参数匹配的逻辑。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// tree.go</span><span class="token keyword">type</span> nodeValue <span class="token keyword">struct</span> <span class="token punctuation">{</span>    handlers HandlersChain    params   Params  <span class="token comment" spellcheck="true">// []Param</span>    tsr      <span class="token builtin">bool</span>    fullPath <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// liwenzhou.com...</span><span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token function">getValue</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> po Params<span class="token punctuation">,</span> unescape <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value nodeValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    value<span class="token punctuation">.</span>params <span class="token operator">=</span> powalk<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Outer loop for walking the tree</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        prefix <span class="token operator">:=</span> n<span class="token punctuation">.</span>path        <span class="token keyword">if</span> path <span class="token operator">==</span> prefix <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 我们应该已经到达包含处理函数的节点。</span>            <span class="token comment" spellcheck="true">// 检查该节点是否注册有处理函数</span>            <span class="token keyword">if</span> value<span class="token punctuation">.</span>handlers <span class="token operator">=</span> n<span class="token punctuation">.</span>handlers<span class="token punctuation">;</span> value<span class="token punctuation">.</span>handlers <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                value<span class="token punctuation">.</span>fullPath <span class="token operator">=</span> n<span class="token punctuation">.</span>fullPath                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> path <span class="token operator">==</span> <span class="token string">"/"</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>wildChild <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>nType <span class="token operator">!=</span> root <span class="token punctuation">{</span>                value<span class="token punctuation">.</span>tsr <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 没有找到处理函数 检查这个路径末尾+/ 是否存在注册函数</span>            indices <span class="token operator">:=</span> n<span class="token punctuation">.</span>indices            <span class="token keyword">for</span> i<span class="token punctuation">,</span> max <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>indices<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> indices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'/'</span> <span class="token punctuation">{</span>                    n <span class="token operator">=</span> n<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    value<span class="token punctuation">.</span>tsr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>handlers <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token operator">||</span>                        <span class="token punctuation">(</span>n<span class="token punctuation">.</span>nType <span class="token operator">==</span> catchAll <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>handlers <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">len</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> prefix <span class="token punctuation">{</span>            path <span class="token operator">=</span> path<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">// 如果该节点没有通配符(param或catchAll)子节点</span>            <span class="token comment" spellcheck="true">// 我们可以继续查找下一个子节点</span>            <span class="token keyword">if</span> <span class="token operator">!</span>n<span class="token punctuation">.</span>wildChild <span class="token punctuation">{</span>                c <span class="token operator">:=</span> path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                indices <span class="token operator">:=</span> n<span class="token punctuation">.</span>indices                <span class="token keyword">for</span> i<span class="token punctuation">,</span> max <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>indices<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> c <span class="token operator">==</span> indices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>                        n <span class="token operator">=</span> n<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 遍历树</span>                        <span class="token keyword">continue</span> walk                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 没找到</span>                <span class="token comment" spellcheck="true">// 如果存在一个相同的URL但没有末尾/的叶子节点</span>                <span class="token comment" spellcheck="true">// 我们可以建议重定向到那里</span>                value<span class="token punctuation">.</span>tsr <span class="token operator">=</span> path <span class="token operator">==</span> <span class="token string">"/"</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>handlers <span class="token operator">!=</span> <span class="token boolean">nil</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 根据节点类型处理通配符子节点</span>            n <span class="token operator">=</span> n<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">switch</span> n<span class="token punctuation">.</span>nType <span class="token punctuation">{</span>            <span class="token keyword">case</span> param<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">// find param end (either '/' or path end)</span>                end <span class="token operator">:=</span> <span class="token number">0</span>                <span class="token keyword">for</span> end <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'/'</span> <span class="token punctuation">{</span>                    end<span class="token operator">++</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 保存通配符的值</span>                <span class="token keyword">if</span> <span class="token function">cap</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">int</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>maxParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    value<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span>Params<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>maxParams<span class="token punctuation">)</span>                <span class="token punctuation">}</span>                i <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>params<span class="token punctuation">)</span>                value<span class="token punctuation">.</span>params <span class="token operator">=</span> value<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 在预先分配的容量内扩展slice</span>                value<span class="token punctuation">.</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Key <span class="token operator">=</span> n<span class="token punctuation">.</span>path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                val <span class="token operator">:=</span> path<span class="token punctuation">[</span><span class="token punctuation">:</span>end<span class="token punctuation">]</span>                <span class="token keyword">if</span> unescape <span class="token punctuation">{</span>                    <span class="token keyword">var</span> err <span class="token builtin">error</span>                    <span class="token keyword">if</span> value<span class="token punctuation">.</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">,</span> err <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">QueryUnescape</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                        value<span class="token punctuation">.</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> val <span class="token comment" spellcheck="true">// fallback, in case of error</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    value<span class="token punctuation">.</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> val                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 继续向下查询</span>                <span class="token keyword">if</span> end <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>                        path <span class="token operator">=</span> path<span class="token punctuation">[</span>end<span class="token punctuation">:</span><span class="token punctuation">]</span>                        n <span class="token operator">=</span> n<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                        <span class="token keyword">continue</span> walk                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// ... but we can't</span>                    value<span class="token punctuation">.</span>tsr <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> end<span class="token operator">+</span><span class="token number">1</span>                    <span class="token keyword">return</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> value<span class="token punctuation">.</span>handlers <span class="token operator">=</span> n<span class="token punctuation">.</span>handlers<span class="token punctuation">;</span> value<span class="token punctuation">.</span>handlers <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                    value<span class="token punctuation">.</span>fullPath <span class="token operator">=</span> n<span class="token punctuation">.</span>fullPath                    <span class="token keyword">return</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 没有找到处理函数. 检查此路径末尾加/的路由是否存在注册函数</span>                    <span class="token comment" spellcheck="true">// 用于 TSR 推荐</span>                    n <span class="token operator">=</span> n<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    value<span class="token punctuation">.</span>tsr <span class="token operator">=</span> n<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/"</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>handlers <span class="token operator">!=</span> <span class="token boolean">nil</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span>            <span class="token keyword">case</span> catchAll<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">// 保存通配符的值</span>                <span class="token keyword">if</span> <span class="token function">cap</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">int</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>maxParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    value<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span>Params<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>maxParams<span class="token punctuation">)</span>                <span class="token punctuation">}</span>                i <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>params<span class="token punctuation">)</span>                value<span class="token punctuation">.</span>params <span class="token operator">=</span> value<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 在预先分配的容量内扩展slice</span>                value<span class="token punctuation">.</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Key <span class="token operator">=</span> n<span class="token punctuation">.</span>path<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> unescape <span class="token punctuation">{</span>                    <span class="token keyword">var</span> err <span class="token builtin">error</span>                    <span class="token keyword">if</span> value<span class="token punctuation">.</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">,</span> err <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">QueryUnescape</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                        value<span class="token punctuation">.</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> path <span class="token comment" spellcheck="true">// fallback, in case of error</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    value<span class="token punctuation">.</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> path                <span class="token punctuation">}</span>                value<span class="token punctuation">.</span>handlers <span class="token operator">=</span> n<span class="token punctuation">.</span>handlers                value<span class="token punctuation">.</span>fullPath <span class="token operator">=</span> n<span class="token punctuation">.</span>fullPath                <span class="token keyword">return</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"invalid node type"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 找不到，如果存在一个在当前路径最后添加/的路由</span>        <span class="token comment" spellcheck="true">// 我们会建议重定向到那里</span>        value<span class="token punctuation">.</span>tsr <span class="token operator">=</span> <span class="token punctuation">(</span>path <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> prefix<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'/'</span> <span class="token operator">&amp;&amp;</span>                path <span class="token operator">==</span> prefix<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>handlers <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-2-gin框架中间件详解"><a href="#1-2-gin框架中间件详解" class="headerlink" title="1.2 gin框架中间件详解"></a>1.2 gin框架中间件详解</h2><p>gin框架涉及中间件相关有4个常用的方法，它们分别是<code>c.Next()</code>、<code>c.Abort()</code>、<code>c.Set()</code>、<code>c.Get()</code>。</p><blockquote><p><font color="red"><strong>中间件的注册</strong></font></p></blockquote><p>gin框架中的中间件设计很巧妙，我们可以首先从我们最常用的<code>r := gin.Default()</code>的<code>Default</code>函数开始看，它内部构造一个新的<code>engine</code>之后就通过<code>Use()</code>函数注册了<code>Logger</code>中间件和<code>Recovery</code>中间件：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Engine <span class="token punctuation">{</span>    <span class="token function">debugPrintWARNINGDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    engine <span class="token operator">:=</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    engine<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Recovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 默认注册的两个中间件</span>    <span class="token keyword">return</span> engine<span class="token punctuation">}</span></code></pre><p>继续往下查看一下<code>Use()</code>函数的代码：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">Use</span><span class="token punctuation">(</span>middleware <span class="token operator">...</span>HandlerFunc<span class="token punctuation">)</span> IRoutes <span class="token punctuation">{</span>    engine<span class="token punctuation">.</span>RouterGroup<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>middleware<span class="token operator">...</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 实际上还是调用的RouterGroup的Use函数</span>    engine<span class="token punctuation">.</span><span class="token function">rebuild404Handlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    engine<span class="token punctuation">.</span><span class="token function">rebuild405Handlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> engine<span class="token punctuation">}</span></code></pre><p>从下方的代码可以看出，注册中间件其实就是将中间件函数追加到<code>group.Handlers</code>中：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>group <span class="token operator">*</span>RouterGroup<span class="token punctuation">)</span> <span class="token function">Use</span><span class="token punctuation">(</span>middleware <span class="token operator">...</span>HandlerFunc<span class="token punctuation">)</span> IRoutes <span class="token punctuation">{</span>    group<span class="token punctuation">.</span>Handlers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span>Handlers<span class="token punctuation">,</span> middleware<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> group<span class="token punctuation">.</span><span class="token function">returnObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>而我们注册路由时会将对应路由的函数和之前的中间件函数结合到一起：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>group <span class="token operator">*</span>RouterGroup<span class="token punctuation">)</span> <span class="token function">handle</span><span class="token punctuation">(</span>httpMethod<span class="token punctuation">,</span> relativePath <span class="token builtin">string</span><span class="token punctuation">,</span> handlers HandlersChain<span class="token punctuation">)</span> IRoutes <span class="token punctuation">{</span>    absolutePath <span class="token operator">:=</span> group<span class="token punctuation">.</span><span class="token function">calculateAbsolutePath</span><span class="token punctuation">(</span>relativePath<span class="token punctuation">)</span>    handlers <span class="token operator">=</span> group<span class="token punctuation">.</span><span class="token function">combineHandlers</span><span class="token punctuation">(</span>handlers<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 将处理请求的函数与中间件函数结合</span>    group<span class="token punctuation">.</span>engine<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span>httpMethod<span class="token punctuation">,</span> absolutePath<span class="token punctuation">,</span> handlers<span class="token punctuation">)</span>    <span class="token keyword">return</span> group<span class="token punctuation">.</span><span class="token function">returnObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>其中结合操作的函数内容如下，注意观察这里是如何实现拼接两个切片得到一个新切片的。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> abortIndex <span class="token builtin">int8</span> <span class="token operator">=</span> math<span class="token punctuation">.</span>MaxInt8 <span class="token operator">/</span> <span class="token number">2</span><span class="token keyword">func</span> <span class="token punctuation">(</span>group <span class="token operator">*</span>RouterGroup<span class="token punctuation">)</span> <span class="token function">combineHandlers</span><span class="token punctuation">(</span>handlers HandlersChain<span class="token punctuation">)</span> HandlersChain <span class="token punctuation">{</span>    finalSize <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span>Handlers<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">len</span><span class="token punctuation">(</span>handlers<span class="token punctuation">)</span>    <span class="token keyword">if</span> finalSize <span class="token operator">>=</span> <span class="token function">int</span><span class="token punctuation">(</span>abortIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这里有一个最大限制</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"too many handlers"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    mergedHandlers <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>HandlersChain<span class="token punctuation">,</span> finalSize<span class="token punctuation">)</span>    <span class="token function">copy</span><span class="token punctuation">(</span>mergedHandlers<span class="token punctuation">,</span> group<span class="token punctuation">.</span>Handlers<span class="token punctuation">)</span>    <span class="token function">copy</span><span class="token punctuation">(</span>mergedHandlers<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span>Handlers<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> handlers<span class="token punctuation">)</span>    <span class="token keyword">return</span> mergedHandlers<span class="token punctuation">}</span></code></pre><p>也就是说，我们会将一个路由的中间件函数和处理函数结合到一起组成一条处理函数链条<code>HandlersChain</code>，而它本质上就是一个由<code>HandlerFunc</code>组成的切片：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> HandlersChain <span class="token punctuation">[</span><span class="token punctuation">]</span>HandlerFunc</code></pre><blockquote><p><font color="red"><strong>中间件的执行</strong></font></p></blockquote><p>我们在上面路由匹配的时候见过如下逻辑：</p><pre class=" language-go"><code class="language-go">value <span class="token operator">:=</span> root<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>rPath<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Params<span class="token punctuation">,</span> unescape<span class="token punctuation">)</span><span class="token keyword">if</span> value<span class="token punctuation">.</span>handlers <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  c<span class="token punctuation">.</span>handlers <span class="token operator">=</span> value<span class="token punctuation">.</span>handlers  c<span class="token punctuation">.</span>Params <span class="token operator">=</span> value<span class="token punctuation">.</span>params  c<span class="token punctuation">.</span>fullPath <span class="token operator">=</span> value<span class="token punctuation">.</span>fullPath  c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 执行函数链条</span>  c<span class="token punctuation">.</span>writermem<span class="token punctuation">.</span><span class="token function">WriteHeaderNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span><span class="token punctuation">}</span></code></pre><p>其中<code>c.Next()</code>就是很关键的一步，它的代码很简单：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c<span class="token punctuation">.</span>index<span class="token operator">++</span>    <span class="token keyword">for</span> c<span class="token punctuation">.</span>index <span class="token operator">&lt;</span> <span class="token function">int8</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>handlers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>c<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        c<span class="token punctuation">.</span>index<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从上面的代码可以看到，这里通过索引遍历<code>HandlersChain</code>链条，从而实现依次调用该路由的每一个函数（中间件或处理请求的函数）。</p><p><img src="/2022/12/19/Gin%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/image-20221219213117225.png"></p><p>我们可以在中间件函数中通过再次调用<code>c.Next()</code>实现嵌套调用（func1中调用func2；func2中调用func3），</p><p><img src="/2022/12/19/Gin%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/image-20221219213157911.png"></p><p>或者通过调用<code>c.Abort()</code>中断整个调用链条，从当前函数返回。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c<span class="token punctuation">.</span>index <span class="token operator">=</span> abortIndex  <span class="token comment" spellcheck="true">// 直接将索引置为最大限制值，从而退出循环</span><span class="token punctuation">}</span></code></pre><blockquote><p><font color="red"><strong>c.Set()&#x2F;c.Get()</strong></font></p></blockquote><p><code>c.Set()</code>和<code>c.Get()</code>这两个方法多用于在多个函数之间通过<code>c</code>传递数据的，比如我们可以在认证中间件中获取当前请求的相关信息（userID等）通过<code>c.Set()</code>存入<code>c</code>，然后在后续处理业务逻辑的函数中通过<code>c.Get()</code>来获取当前请求的用户。<code>c</code>就像是一根绳子，将该次请求相关的所有的函数都串起来了。</p><p><img src="/2022/12/19/Gin%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/image-20221219213457286.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>gin框架路由使用前缀树，路由注册的过程是构造前缀树的过程，路由匹配的过程就是查找前缀树的过程。</li><li>gin框架的中间件函数和处理函数是以切片形式的调用链条存在的，我们可以顺序调用也可以借助<code>c.Next()</code>方法实现嵌套调用。</li><li>借助<code>c.Set()</code>和<code>c.Get()</code>方法我们能够在不同的中间件函数中传递数据。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMq从入门到精通</title>
      <link href="/2022/12/07/RabbitMq%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
      <url>/2022/12/07/RabbitMq%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMq从入门到精通"><a href="#RabbitMq从入门到精通" class="headerlink" title="RabbitMq从入门到精通"></a>RabbitMq从入门到精通</h1><h3 id="什么是消息中间件？"><a href="#什么是消息中间件？" class="headerlink" title="什么是消息中间件？"></a>什么是消息中间件？</h3><p><strong>消息中间件基于队列模型实现异步&#x2F;同步传输数据</strong></p><p><strong>作用：可以实现支撑高并发、异步解耦、流量削峰、降低耦合度。</strong></p><h3 id="传统的http请求存在那些缺点"><a href="#传统的http请求存在那些缺点" class="headerlink" title="传统的http请求存在那些缺点"></a>传统的http请求存在那些缺点</h3><ol><li><p>Http请求基于请求与响应的模型，在高并发的情况下，客户端发送大量的请求达到服务器端有可能会导致我们服务器端处理请求堆积。</p></li><li><p>Tomcat服务器处理每个请求都有自己独立的线程，如果超过最大线程数会将该请求缓存到队列中，如果请求堆积过多的情况下，有可能会导致tomcat服务器崩溃的问题。</p><p>所以一般都会在nginx入口实现限流，整合服务保护框架。</p></li><li><p>http请求处理业务逻辑如果比较耗时的情况下，容易造成客户端一直等待，阻塞等待过程中会导致客户端超时发生重试策略，有可能会引发幂等性问题。</p></li></ol><p><strong>注意事项：接口是为http协议的情况下，最好不要处理比较耗时的业务逻辑，耗时的业务逻辑应该单独交给多线程或者是mq处理。</strong></p><h3 id="Mq应用场景有哪些？"><a href="#Mq应用场景有哪些？" class="headerlink" title="Mq应用场景有哪些？"></a>Mq应用场景有哪些？</h3><ol><li>异步发送短信</li><li>异步发送新人优惠券</li><li>处理一些比较耗时的操作</li></ol><h3 id="为什么需要使用mq"><a href="#为什么需要使用mq" class="headerlink" title="为什么需要使用mq"></a>为什么需要使用mq</h3><p><strong>可以实现支撑高并发、异步解耦、流量削峰、降低耦合度。</strong></p><h3 id="Mq与多线程之间区别"><a href="#Mq与多线程之间区别" class="headerlink" title="Mq与多线程之间区别"></a>Mq与多线程之间区别</h3><ul><li><strong>MQ可以实现异步&#x2F;解耦&#x2F;流量削峰问题；</strong></li><li><strong>多线程也可以实现异步，但是消耗到cpu资源，没有实现解耦。</strong></li></ul><h3 id="Mq消息中间件名词"><a href="#Mq消息中间件名词" class="headerlink" title="Mq消息中间件名词"></a>Mq消息中间件名词</h3><ul><li><strong>Producer 生产者：投递消息到MQ服务器端；</strong></li><li><strong>Consumer 消费者：从MQ服务器端获取消息处理业务逻辑；</strong></li><li><strong>Broker  MQ服务器端</strong></li><li><strong>Topic 主题：分类业务逻辑发送短信主题、发送优惠券主题</strong></li><li><strong>Queue 存放消息模型 队列 先进先出 后进后出原则 数组&#x2F;链表</strong></li><li><strong>Message 生产者投递消息报文：json</strong></li></ul><h3 id="主流mq区别对比"><a href="#主流mq区别对比" class="headerlink" title="主流mq区别对比"></a>主流mq区别对比</h3><table><thead><tr><th>特性</th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>开发语言</td><td>java</td><td>erlang</td><td>java</td><td>scala</td></tr><tr><td>单机吞吐量</td><td>万级</td><td>万级</td><td>10万级</td><td>10万级</td></tr><tr><td>时效性</td><td>ms级</td><td>us级</td><td>ms级</td><td>ms级以内</td></tr><tr><td>可用性</td><td>高(主从架构)</td><td>高(主从架构)</td><td>非常高(分布式架构)</td><td>非常高(分布式架构)</td></tr><tr><td>功能特性</td><td>成熟的产品，在很多公司得到应用；有较多的文档；各种协议支持较好</td><td>基于erlang开发，所以并发能力很强，性能极其好，延时很低管理界面较丰富</td><td>MQ功能比较完备，扩展性佳</td><td>只支持主要的MQ功能，像一些消息查询，消息回溯等功能没有提供，毕竟是为大数据准备的，在大数据领域应用广</td></tr></tbody></table><h3 id="基于多线程队列简单实现mq"><a href="#基于多线程队列简单实现mq" class="headerlink" title="基于多线程队列简单实现mq"></a>基于多线程队列简单实现mq</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>LinkedBlockingDeque<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">STThreadMQ</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LinkedBlockingDeque<span class="token operator">&lt;</span>JSONObject<span class="token operator">></span> msgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//生产线程</span>        Thread producerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        JSONObject data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//存入消息</span>                        msgs<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"生产者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//消费线程</span>        Thread ConsumerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        JSONObject data <span class="token operator">=</span> msgs<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"消费者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ConsumerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong>生产者投递消息给MQ服务器端，MQ服务器端需要缓存该消息</strong></li></ul><h4 id="如果mq服务器端宕机之后，消息如何保证不丢失"><a href="#如果mq服务器端宕机之后，消息如何保证不丢失" class="headerlink" title="如果mq服务器端宕机之后，消息如何保证不丢失"></a>如果mq服务器端宕机之后，消息如何保证不丢失</h4><ul><li><strong>持久化机制</strong></li></ul><h4 id="如果mq接收到生产者投递消息，如果消费者不在的情况下，该消息是否会丢失？"><a href="#如果mq接收到生产者投递消息，如果消费者不在的情况下，该消息是否会丢失？" class="headerlink" title="如果mq接收到生产者投递消息，如果消费者不在的情况下，该消息是否会丢失？"></a>如果mq接收到生产者投递消息，如果消费者不在的情况下，该消息是否会丢失？</h4><ul><li><strong>不会丢失，消息确认机制 必须要消费者消费该消息成功之后，再通知给mq服务器端删除该消息。</strong></li></ul><h4 id="Mq服务器端将该消息推送消费者："><a href="#Mq服务器端将该消息推送消费者：" class="headerlink" title="Mq服务器端将该消息推送消费者："></a>Mq服务器端将该消息推送消费者：</h4><ul><li><strong>消费者已经和mq服务器保持长连接。</strong></li></ul><h4 id="消费者主动拉取消息："><a href="#消费者主动拉取消息：" class="headerlink" title="消费者主动拉取消息："></a>消费者主动拉取消息：</h4><ul><li><strong>消费者第一次刚启动的时候</strong></li></ul><h4 id="Mq如何实现抗高并发思想"><a href="#Mq如何实现抗高并发思想" class="headerlink" title="Mq如何实现抗高并发思想"></a>Mq如何实现抗高并发思想</h4><ul><li><strong>Mq消费者根据自身能力情况 ，拉取mq服务器端消息消费</strong></li><li><strong>默认的情况下是取出一条消息</strong></li><li><strong>缺点：存在延迟的问题</strong></li></ul><h4 id="需要考虑mq消费者提高速率的问题"><a href="#需要考虑mq消费者提高速率的问题" class="headerlink" title="需要考虑mq消费者提高速率的问题"></a>需要考虑mq消费者提高速率的问题</h4><ul><li><strong>如何消费者提高速率：消费者实现集群、消费者批量获取消息即可</strong></li></ul><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h3 id="RabbitMQ基本介绍"><a href="#RabbitMQ基本介绍" class="headerlink" title="RabbitMQ基本介绍"></a>RabbitMQ基本介绍</h3><p>RabbitMQ是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件），RabbitMQ服务器是用Erlang语言编写的。</p><p>RabitMQ官方网站:</p><p><a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a></p><ul><li><strong>1.点对点(简单)的队列</strong></li><li><strong>2.工作(公平性)队列模式</strong></li><li><strong>3.发布订阅模式</strong></li><li><strong>4.路由模式Routing</strong></li><li><strong>5.通配符模式Topics</strong></li><li><strong>6.RPC</strong></li></ul><p><a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></p><h3 id="RabbitMQ环境的基本安装"><a href="#RabbitMQ环境的基本安装" class="headerlink" title="RabbitMQ环境的基本安装"></a>RabbitMQ环境的基本安装</h3><ul><li><strong>1.下载并安装erlang,下载地址：<a href="http://www.erlang.org/download">http://www.erlang.org/download</a></strong></li><li><strong>2.配置erlang环境变量信息</strong><ul><li><strong>新增环境变量ERLANG_HOME&#x3D;erlang的安装地址</strong></li><li><strong>将%ERLANG_HOME%\bin加入到path中</strong></li></ul></li><li><strong>3.下载并安装RabbitMQ，下载地址：<a href="http://www.rabbitmq.com/download.html">http://www.rabbitmq.com/download.html</a></strong></li><li>**注意: RabbitMQ 它依赖于Erlang,需要先安装Erlang。 <a href="https://www.rabbitmq.com/install-windows.html">https://www.rabbitmq.com/install-windows.html</a> **</li></ul><h3 id="启动Rabbitmq常见问题"><a href="#启动Rabbitmq常见问题" class="headerlink" title="启动Rabbitmq常见问题"></a>启动Rabbitmq常见问题</h3><p>如果rabbitmq 启动成功无法访问 管理平台页面</p><p>进入到F:\path\rabbitmq\rabbitmq\rabbitmq_server-3.6.9\sbin&gt; 执行</p><p><strong>rabbitmq-plugins enable rabbitmq_management</strong></p><p><strong>rabbitmqctl start_app</strong></p><h3 id="Rabbitmq管理平台中心"><a href="#Rabbitmq管理平台中心" class="headerlink" title="Rabbitmq管理平台中心"></a>Rabbitmq管理平台中心</h3><p>RabbitMQ 管理平台地址 <a href="http://127.0.0.1:15672/">http://127.0.0.1:15672</a></p><p>默认账号:guest&#x2F;guest 用户可以自己创建新的账号</p><p><strong>Virtual Hosts:</strong></p><p>像mysql有数据库的概念并且可以指定用户对库和表等操作的权限。那RabbitMQ呢？</p><p>RabbitMQ也有类似的权限管理。在RabbitMQ中可以虚拟消息服务器VirtualHost，每个VirtualHost相当月一个相对独立的RabbitMQ服务器，每个VirtualHost之间是相互隔离的。exchange、queue、message不能互通</p><p><strong>默认的端口15672：rabbitmq管理平台端口号</strong></p><p><strong>默认的端口5672： rabbitmq消息中间内部通讯的端口</strong></p><p><strong>默认的端口号25672 rabbitmq集群的端口号</strong></p><h3 id="RabbitMQ常见名词"><a href="#RabbitMQ常见名词" class="headerlink" title="RabbitMQ常见名词"></a>RabbitMQ常见名词</h3><p><strong>&#x2F;Virtual Hosts—分类</strong></p><p><strong>&#x2F;队列 存放我们消息</strong></p><p><strong>Exchange 分派我们消息在那个队列存放起来 类似于nginx</strong></p><p><strong>15672—rabbitmq控制台管理平台 http协议</strong></p><p><strong>25672—rabbitmq 集群通信端口号</strong></p><p><strong>Amqp 5672—rabbitmq内部通信的一个端口号</strong></p><h3 id="快速入门RabbitMQ简单队列"><a href="#快速入门RabbitMQ简单队列" class="headerlink" title="快速入门RabbitMQ简单队列"></a>快速入门RabbitMQ简单队列</h3><p>首先需要再RabbitMQ平台创建Virtual Hosts 和队列。</p><p><strong>&#x2F;meiteVirtualHosts</strong></p><p><strong>—-订单队列</strong></p><p><strong>—-支付队列</strong></p><ol><li>在RabbitMQ平台创建一个队列：</li><li>在编写生产者代码</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Channel<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeoutException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"mayikt--queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建连接</span>        Connection connection <span class="token operator">=</span> RabbitMQConnection<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建通道</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String msg <span class="token operator">=</span> <span class="token string">"每特教育666"</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>QUEUE_NAME<span class="token punctuation">,</span>null<span class="token punctuation">,</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭通道和连接</span>        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>在编写消费者代码</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeoutException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"mayikt--queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建连接</span>        Connection connection <span class="token operator">=</span> RabbitMQConnection<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.设置通道</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DefaultConsumer defaultConsumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span><span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>                String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者获取消息:"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.监听队列</span>        <span class="token comment" spellcheck="true">//autoAck true:自动签收</span>        <span class="token comment" spellcheck="true">//autoAck false:</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>defaultConsumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>连接代码</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeoutException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConnection</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取连接</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>        ConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.设置连接VirtualHost</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/meiteVirtualHosts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.设置账号和密码</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.mq连接信息地址</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="RabbitMQ如何保证消息不丢失"><a href="#RabbitMQ如何保证消息不丢失" class="headerlink" title="RabbitMQ如何保证消息不丢失"></a>RabbitMQ如何保证消息不丢失</h3><h4 id="Mq如何保证消息不丢失："><a href="#Mq如何保证消息不丢失：" class="headerlink" title="Mq如何保证消息不丢失："></a>Mq如何保证消息不丢失：</h4><ol><li><em>生产者角色</em></li></ol><ul><li><strong>确保生产者投递消息到MQ服务器端成功。</strong></li><li><strong>Ack 消息确认机制</strong></li><li><strong>同步或者异步的形式</strong></li><li><strong>方式1：Confirms</strong></li><li><strong>方式2：事务消息</strong></li></ul><ol start="2"><li><em>消费者模式</em></li></ol><ul><li><strong>在rabbitmq情况下：</strong><ul><li><strong>必须要将消息消费成功之后，才会将该消息从mq服务器端中移除。</strong></li></ul></li><li><strong>在kafka中的情况下：</strong><ul><li><strong>不管是消费成功还是消费失败，该消息都不会立即从mq服务器端移除。</strong></li></ul></li></ul><h3 id="RabitMQ工作队列"><a href="#RabitMQ工作队列" class="headerlink" title="RabitMQ工作队列"></a>RabitMQ工作队列</h3><p><strong>默认的传统队列是为均摊消费，存在不公平性；如果每个消费者速度不一样的情况下，均摊消费是不公平的，应该是能者多劳。</strong><br><img src="/2022/12/07/RabbitMq%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/image-20221209190544583.png"></p><p>在通道中只需要设置basicQos为1即可，表示MQ服务器每次只会给消费者推送1条消息必须手动ack确认之后才会继续发送。channel.basicQos(1);</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>st<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>RabbitMQConnection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeoutException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer02</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"mayikt-queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TimeoutException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.创建连接</span>        Connection connection <span class="token operator">=</span> RabbitMQConnection<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.设置通道</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定我们消费者每次批量获取消息</span>        channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DefaultConsumer defaultConsumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token punctuation">}</span>                String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者获取消息:"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//消费者完成，删除消息</span>                channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.监听队列</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> defaultConsumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>st<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>RabbitMQConnection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeoutException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer01</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"mayikt-queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TimeoutException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.创建连接</span>        Connection connection <span class="token operator">=</span> RabbitMQConnection<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.设置通道</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定我们消费者每次批量获取消息</span>        channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DefaultConsumer defaultConsumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者获取消息:"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//消费者完成 删除消息</span>                channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.监听队列</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> defaultConsumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="RabbitMQ交换机类型"><a href="#RabbitMQ交换机类型" class="headerlink" title="RabbitMQ交换机类型"></a>RabbitMQ交换机类型</h3><p>Direct exchange（直连交换机）</p><p>Fanout exchange（扇型交换机）</p><p>Topic exchange（主题交换机）</p><p>Headers exchange（头交换机）</p><p>&#x2F;Virtual Hosts—区分不同的团队</p><p>—-队列 存放消息</p><p>—-交换机 路由消息存放在那个队列中 类似于nginx</p><p>—路由key 分发规则</p><h3 id="RabbitMQ-Fanout-发布订阅"><a href="#RabbitMQ-Fanout-发布订阅" class="headerlink" title="RabbitMQ Fanout 发布订阅"></a>RabbitMQ Fanout 发布订阅</h3><p><strong>生产者发送一条消息，经过交换机转发到多个不同的队列，多个不同的队列就多个不同的消费者。</strong></p><p><img src="/2022/12/07/RabbitMq%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/image-20221209191600910.png"></p><p><img src="/2022/12/07/RabbitMq%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/image-20221209191746631.png"></p><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><ol><li><strong>需要创建两个队列 ，每个队列对应一个消费者；</strong></li><li><strong>队列需要绑定我们交换机</strong></li><li><strong>生产者投递消息到交换机中，交换机在将消息分配给两个队列中都存放起来；</strong></li><li><strong>消费者从队列中获取这个消息。</strong></li></ol><h4 id="生产者代码"><a href="#生产者代码" class="headerlink" title="生产者代码"></a>生产者代码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>mayikt<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>RabbitMQConnection<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Channel<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeoutException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerFanout</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义交换机的名称     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"fanout_exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  创建Connection</span>        Connection connection <span class="token operator">=</span> RabbitMQConnection<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建Channel</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通道关联交换机</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">"fanout"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String msg <span class="token operator">=</span> <span class="token string">"每特教育6666"</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="消费者代码"><a href="#消费者代码" class="headerlink" title="消费者代码"></a>消费者代码</h4><h5 id="邮件消费者"><a href="#邮件消费者" class="headerlink" title="邮件消费者"></a>邮件消费者</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>mayikt<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>RabbitMQConnection<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeoutException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailConsumer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义邮件队列     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"fanout_email_queue"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 定义交换机的名称     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"fanout_exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"邮件消费者..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建我们的连接</span>        Connection connection <span class="token operator">=</span> RabbitMQConnection<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建我们通道</span>        <span class="token keyword">final</span> Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关联队列消费者关联队列</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DefaultConsumer defaultConsumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"邮件消费者获取消息:"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始监听消息 自动签收</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> defaultConsumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="短信消费者"><a href="#短信消费者" class="headerlink" title="短信消费者"></a>短信消费者</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmsConsumer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义短信队列     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"fanout_email_sms"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 定义交换机的名称     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"fanout_exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"短信消费者..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建我们的连接</span>        Connection connection <span class="token operator">=</span> RabbitMQConnection<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建我们通道</span>        <span class="token keyword">final</span> Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关联队列消费者关联队列</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DefaultConsumer defaultConsumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"短信消费者获取消息:"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始监听消息 自动签收</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> defaultConsumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Direct路由模式"><a href="#Direct路由模式" class="headerlink" title="Direct路由模式"></a>Direct路由模式</h4><p><strong>当交换机类型为direct类型时，根据队列绑定的路由建转发到具体的队列中存放消息</strong></p><p><img src="/2022/12/07/RabbitMq%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/clip_image002.jpg"></p><h4 id="Topic主题模式"><a href="#Topic主题模式" class="headerlink" title="Topic主题模式"></a>Topic主题模式</h4><p><strong>当交换机类型为topic类型时，根据队列绑定的路由建模糊转发到具体的队列中存放。</strong></p><p><strong>#号表示支持匹配多个词；</strong></p><p>*<strong>号表示只能匹配一个词</strong></p><p><img src="/2022/12/07/RabbitMq%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/clip_image001.png"></p><h3 id="SpringBoot整合RabbitMQ"><a href="#SpringBoot整合RabbitMQ" class="headerlink" title="SpringBoot整合RabbitMQ"></a>SpringBoot整合RabbitMQ</h3><h4 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>parent<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>parent<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span><span class="token operator">&lt;</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> springboot<span class="token operator">-</span>web组件 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 添加springboot对amqp的支持 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>amqp<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>lang3<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>fastjson <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>fastjson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">49</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><h4 id="配置类："><a href="#配置类：" class="headerlink" title="配置类："></a>配置类：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Binding<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>BindingBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>FanoutExchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @ClassName RabbitMQConfig * @Author song * @Version V1.0 **/</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义交换机     */</span>    <span class="token keyword">private</span> String EXCHANGE_SPRINGBOOT_NAME <span class="token operator">=</span> <span class="token string">"/mayikt_ex"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 短信队列     */</span>    <span class="token keyword">private</span> String FANOUT_SMS_QUEUE <span class="token operator">=</span> <span class="token string">"fanout_sms_queue"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 邮件队列     */</span>    <span class="token keyword">private</span> String FANOUT_EMAIL_QUEUE <span class="token operator">=</span> <span class="token string">"fanout_email_queue"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 配置smsQueue     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">smsQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>FANOUT_SMS_QUEUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 配置emailQueue     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">emailQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>FANOUT_EMAIL_QUEUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 配置fanoutExchange     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FanoutExchange <span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span>EXCHANGE_SPRINGBOOT_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 绑定交换机 sms</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">bindingSmsFanoutExchange</span><span class="token punctuation">(</span>Queue smsQueue<span class="token punctuation">,</span> FanoutExchange fanoutExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>smsQueue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 绑定交换机 email</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">bindingEmailFanoutExchange</span><span class="token punctuation">(</span>Queue emailQueue<span class="token punctuation">,</span> FanoutExchange fanoutExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>emailQueue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><h5 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">####连接地址</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1    <span class="token comment" spellcheck="true">####端口号</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token comment" spellcheck="true">####账号</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token comment" spellcheck="true">####密码</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest    <span class="token comment" spellcheck="true">### 地址</span>    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /meiteVirtualHosts</code></pre><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>AmqpTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @ClassName FanoutProducer * @Author song * @Version V1.0 **/</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutProducer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AmqpTemplate amqpTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发送消息     *     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/sendMsg"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sendMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 1.交换机名称         * 2.路由key名称         * 3.发送内容         */</span>        amqpTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"/mayikt_ex"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @ClassName FanoutEmailConsumer * @Author 蚂蚁课堂余胜军 QQ644064779 www.mayikt.com * @Version V1.0 **/</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"fanout_email_queue"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutEmailConsumer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">">>邮件消费者消息msg:{}&lt;&lt;"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @ClassName fanout_sms_queue * @Author 蚂蚁课堂余胜军 QQ644064779 www.mayikt.com * @Version V1.0 **/</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"fanout_sms_queue"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutSmsConsumer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">">>短信消费者消息msg:{}&lt;&lt;"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="生产者如何获取消费结果"><a href="#生产者如何获取消费结果" class="headerlink" title="生产者如何获取消费结果"></a>生产者如何获取消费结果</h3><p><strong>1.</strong>   <strong>根据业务来定</strong></p><p><strong>消费者消费成功结果：</strong></p><p><strong>1.能够在数据库中插入一条数据</strong></p><p><strong>2.Rocketmq</strong> <strong>自带全局消息id，能够根据该全局消息获取消费结果</strong></p><p><strong>原理：</strong> <strong>生产者投递消息到mq服务器，mq服务器端在这时候返回一个全局的消息id，</strong></p><p><strong>当我们消费者消费该消息成功之后，消费者会给我们mq服务器端发送通知标记该消息消费成功。</strong></p><p><strong>生产者获取到该消息全局id，每隔2s时间调用mq服务器端接口查询该消息是否有被消费成功。</strong></p><p><img src="/2022/12/07/RabbitMq%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/image-20221218112001858.png"></p><ol><li><strong>异步返回一个全局id，前端使用ajax定时主动查询；</strong></li><li><strong>在rocketmq中，自带根据消息id查询是否消费成功</strong></li></ol><h3 id="RabbitMQ死信队列"><a href="#RabbitMQ死信队列" class="headerlink" title="RabbitMQ死信队列"></a>RabbitMQ死信队列</h3><h4 id="死信队列产生的背景"><a href="#死信队列产生的背景" class="headerlink" title="死信队列产生的背景"></a>死信队列产生的背景</h4><p><strong>RabbitMQ死信队列俗称，备胎队列；消息中间件因为某种原因拒收该消息后，可以转移到死信队列中存放，死信队列也可以有交换机和路由key等。</strong></p><h4 id="产生死信队列的原因"><a href="#产生死信队列的原因" class="headerlink" title="产生死信队列的原因"></a>产生死信队列的原因</h4><ol><li><strong>消息投递到MQ中存放 消息已经过期 消费者没有及时的获取到我们消息，消息如果存放到mq服务器中过期之后，会转移到备胎死信队列存放。</strong></li><li><strong>队列达到最大的长度 （队列容器已经满了）</strong></li><li><strong>消费者消费多次消息失败，就会转移存放到死信队列中</strong></li></ol><p><img src="/2022/12/07/RabbitMq%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/image-20221218114950193.png"></p><h4 id="死信队列的架构原理"><a href="#死信队列的架构原理" class="headerlink" title="死信队列的架构原理"></a>死信队列的架构原理</h4><p>死信队列和普通队列区别不是很大</p><p>普通与死信队列都有自己独立的交换机和路由key、队列和消费者。</p><p>区别：</p><ol><li>生产者投递消息先投递到我们普通交换机中，普通交换机在将该消息投到普通队列中缓存起来，普通队列对应有自己独立普通消费者。</li><li>如果生产者投递消息到普通队列中，普通队列发现该消息一直没有被消费者消费的情况下，在这时候会将该消息转移到死信（备胎）交换机中，死信（备胎）交换机对应有自己独立的 死信（备胎）队列 对应独立死信（备胎）消费者。</li></ol><h4 id="死信队列应用场景"><a href="#死信队列应用场景" class="headerlink" title="死信队列应用场景"></a>死信队列应用场景</h4><ol><li><strong>30分钟订单超时设计</strong></li></ol><p>A. Redis过期key </p><p>B. 死信延迟队列实现：</p><p>采用死信队列，创建一个普通队列没有对应的消费者消费消息，在30分钟过后就会将该消息转移到死信备胎消费者实现消费。</p><p>备胎死信消费者会根据该订单号码查询是否已经支付过，如果没有支付的情况下则会开始回滚库存操作。</p><h3 id="RabbitMQ消息幂等问题"><a href="#RabbitMQ消息幂等问题" class="headerlink" title="RabbitMQ消息幂等问题"></a>RabbitMQ消息幂等问题</h3><h4 id="RabbitMQ消息自动重试机制"><a href="#RabbitMQ消息自动重试机制" class="headerlink" title="RabbitMQ消息自动重试机制"></a>RabbitMQ消息自动重试机制</h4><ol><li>当我们消费者处理执行我们业务代码的时候，如果抛出异常的情况下</li></ol><p>在这时候mq会自动触发重试机制，默认的情况下rabbitmq是无限次数的重试。需要人为指定重试次数限制问题</p><p><img src="/2022/12/07/RabbitMq%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/image-20221218150159410.png"></p><ol start="2"><li>在什么情况下消费者需要实现重试策略？</li></ol><p>A. 消费者获取消息后，调用第三方接口，但是调用第三方接口失败呢？是否需要重试？</p><p>该情况下需要实现重试策略，网络延迟只是暂时调用不通，重试多次有可能会调用通。</p><p>B. 消费者获取消息后，因为代码问题抛出数据异常，是否需要重试？</p><p>该情况下是不需要实现重试策略，就算重试多次，最终还是失败的。<br> 可以将日志存放起来，后期通过定时任务或者人工补偿形式。</p><p>如果是重试多次还是失败消息，需要重新发布消费者版本实现消费</p><p>可以使用死信队列</p><p>Mq在重试的过程中，有可能会引发消费者重复消费的问题。</p><p>Mq消费者需要解决 幂等性问题</p><p>幂等性 保证数据唯一</p><p>方式1：</p><p>生产者在投递消息的时候，生成一个全局唯一id，放在我们消息中。</p><p>Msg id&#x3D;123456</p><p>Msg id&#x3D;123456</p><p>Msg id&#x3D;123456</p><p>消费者获取到我们该消息，可以根据该全局唯一id实现去重复。</p><p>全局唯一id 根据业务来定的 订单号码作为全局的id</p><p>实际上还是需要再db层面解决数据防重复。</p><p>业务逻辑是在做insert操作 使用唯一主键约束</p><p>业务逻辑是在做update操作 使用乐观锁</p><ol><li>当消费者业务逻辑代码中，抛出异常自动实现重试 （默认是无数次重试）</li><li>应该对RabbitMQ重试次数实现限制，比如最多重试5次，每次间隔3s；重试多次还是失败的情况下，存放到死信队列或者存放到数据库表中记录后期人工补偿</li></ol><h4 id="如何合理选择消息重试"><a href="#如何合理选择消息重试" class="headerlink" title="如何合理选择消息重试"></a>如何合理选择消息重试</h4><p>总结：如果消费者处理消息时，因为代码原因抛出异常是需要从新发布版本才能解决的，那么就不需要重试，重试也解决不了该问题的。存放到死信队列或者是数据库表记录、后期人工实现补偿。</p><h5 id="Rabbitmq如何开启重试策略"><a href="#Rabbitmq如何开启重试策略" class="headerlink" title="Rabbitmq如何开启重试策略"></a>Rabbitmq如何开启重试策略</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">####连接地址</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1    <span class="token comment" spellcheck="true">####端口号</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token comment" spellcheck="true">####账号</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token comment" spellcheck="true">####密码</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest    <span class="token comment" spellcheck="true">### 地址</span>    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /meite_rabbitmq    <span class="token key atrule">listener</span><span class="token punctuation">:</span>      <span class="token key atrule">simple</span><span class="token punctuation">:</span>        <span class="token key atrule">retry</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">####开启消费者（程序出现异常的情况下会）进行重试</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token comment" spellcheck="true">####最大重试次数</span>          <span class="token key atrule">max-attempts</span><span class="token punctuation">:</span> <span class="token number">5</span>          <span class="token comment" spellcheck="true">####重试间隔次数</span>          <span class="token key atrule">initial-interval</span><span class="token punctuation">:</span> <span class="token number">3000</span></code></pre><h5 id="消费者重试过程中，如何避免幂等性问题"><a href="#消费者重试过程中，如何避免幂等性问题" class="headerlink" title="消费者重试过程中，如何避免幂等性问题"></a>消费者重试过程中，如何避免幂等性问题</h5><p><strong>重试的过程中，为了避免业务逻辑重复执行，建议提前全局id提前查询，如果存在</strong></p><p><strong>的情况下，就无需再继续做该流程。</strong></p><p><strong>重试的次数最好有一定间隔次数，在数据库底层层面保证数据唯一性，比如加上唯一id</strong>。</p><h5 id="SpringBoot开启消息确认机制"><a href="#SpringBoot开启消息确认机制" class="headerlink" title="SpringBoot开启消息确认机制"></a>SpringBoot开启消息确认机制</h5><p><strong>配置文件新增</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">####连接地址</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1    <span class="token comment" spellcheck="true">####端口号</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token comment" spellcheck="true">####账号</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token comment" spellcheck="true">####密码</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest    <span class="token comment" spellcheck="true">### 地址</span>    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /meiteVirtualHosts    <span class="token key atrule">listener</span><span class="token punctuation">:</span>      <span class="token key atrule">simple</span><span class="token punctuation">:</span>        <span class="token key atrule">retry</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">####开启消费者（程序出现异常的情况下会）进行重试</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token comment" spellcheck="true">####最大重试次数</span>          <span class="token key atrule">max-attempts</span><span class="token punctuation">:</span> <span class="token number">5</span>          <span class="token comment" spellcheck="true">####重试间隔次数</span>          <span class="token key atrule">initial-interval</span><span class="token punctuation">:</span> <span class="token number">3000</span>        <span class="token key atrule">acknowledge-mode</span><span class="token punctuation">:</span> manual  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span><span class="token number">8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver</code></pre><p><strong>消费者ack代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"fanout_order_queue"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutOrderConsumer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrderManager orderManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrderMapper orderMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>OrderEntity orderEntity<span class="token punctuation">,</span> Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        try {</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">">>orderEntity:{}&lt;&lt;"</span><span class="token punctuation">,</span> orderEntity<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String orderId <span class="token operator">=</span> orderEntity<span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">">>orderId is null&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        OrderEntity dbOrderEntity <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dbOrderEntity <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">">>该订单已经被消费过，无需重复消费!&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 无需继续重试</span>            channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> orderManager<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span>orderEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">">>插入数据库中数据成功&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 开启消息确认机制</span>            channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        int i = 1 / 0;</span><span class="token comment" spellcheck="true">//        } catch (Exception e) {</span><span class="token comment" spellcheck="true">//            // 将失败的消息记录下来，后期采用人工补偿的形式</span><span class="token comment" spellcheck="true">//        }</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h3 id="计算机网络概念"><a href="#计算机网络概念" class="headerlink" title="计算机网络概念"></a>计算机网络概念</h3><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205100514765.png"></p><h3 id="计算机网络的功能"><a href="#计算机网络的功能" class="headerlink" title="计算机网络的功能"></a>计算机网络的功能</h3><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205101139261.png"></p><h3 id="计算机网络的组成"><a href="#计算机网络的组成" class="headerlink" title="计算机网络的组成"></a>计算机网络的组成</h3><h4 id="1-组成部分：硬件、软件、协议"><a href="#1-组成部分：硬件、软件、协议" class="headerlink" title="1.组成部分：硬件、软件、协议"></a>1.组成部分：硬件、软件、协议</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205101334580.png"></p><h4 id="2-工作方式"><a href="#2-工作方式" class="headerlink" title="2.工作方式"></a>2.工作方式</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205101523444.png"></p><h4 id="3-功能组成"><a href="#3-功能组成" class="headerlink" title="3.功能组成"></a>3.功能组成</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205101825145.png"></p><h3 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h3><h4 id="1-按分布范围分"><a href="#1-按分布范围分" class="headerlink" title="1.按分布范围分"></a>1.按分布范围分</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205102011066.png"></p><h4 id="2-按使用者分"><a href="#2-按使用者分" class="headerlink" title="2.按使用者分"></a>2.按使用者分</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205102141538.png"></p><h4 id="3-按交换技术分："><a href="#3-按交换技术分：" class="headerlink" title="3.按交换技术分："></a>3.按交换技术分：</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205170012400.png"></p><h4 id="4-按拓扑结构分："><a href="#4-按拓扑结构分：" class="headerlink" title="4.按拓扑结构分："></a>4.按拓扑结构分：</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205170249053.png"></p><h4 id="5-按传输技术分："><a href="#5-按传输技术分：" class="headerlink" title="5.按传输技术分："></a>5.按传输技术分：</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205170423665.png"></p><h3 id="标准化工作："><a href="#标准化工作：" class="headerlink" title="标准化工作："></a>标准化工作：</h3><h4 id="标准的分类"><a href="#标准的分类" class="headerlink" title="标准的分类"></a>标准的分类</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205170854637.png"></p><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205171212153.png"></p><h4 id="标准化工作的相关组织"><a href="#标准化工作的相关组织" class="headerlink" title="标准化工作的相关组织"></a>标准化工作的相关组织</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205171425541.png"></p><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><h4 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205172059011.png"></p><h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205172759524.png"></p><h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205173258598.png"></p><h4 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205174108604.png"></p><h4 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205174343890.png"></p><h4 id="往返时延RTT"><a href="#往返时延RTT" class="headerlink" title="往返时延RTT"></a>往返时延RTT</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205174708833.png"></p><h4 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205174955334.png"></p><h3 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h3><h4 id="为什么要分层？"><a href="#为什么要分层？" class="headerlink" title="为什么要分层？"></a>为什么要分层？</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205175548861.png"></p><h4 id="怎么分层？"><a href="#怎么分层？" class="headerlink" title="怎么分层？"></a>怎么分层？</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205182732804.png"></p><h4 id="正式认识分层结构"><a href="#正式认识分层结构" class="headerlink" title="正式认识分层结构"></a>正式认识分层结构</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205183219166.png"></p><h4 id="概念总结："><a href="#概念总结：" class="headerlink" title="概念总结："></a>概念总结：</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205183516922.png"></p><h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><h4 id="ISO-x2F-OSI参考模型是怎么来的？"><a href="#ISO-x2F-OSI参考模型是怎么来的？" class="headerlink" title="ISO&#x2F;OSI参考模型是怎么来的？"></a>ISO&#x2F;OSI参考模型是怎么来的？</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205184137896.png"></p><h4 id="ISO-x2F-OSI参考模型"><a href="#ISO-x2F-OSI参考模型" class="headerlink" title="ISO&#x2F;OSI参考模型"></a>ISO&#x2F;OSI参考模型</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205184833011.png"></p><h4 id="ISO-x2F-OSI参考模型解释通信过程"><a href="#ISO-x2F-OSI参考模型解释通信过程" class="headerlink" title="ISO&#x2F;OSI参考模型解释通信过程"></a>ISO&#x2F;OSI参考模型解释通信过程</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205200453221.png"></p><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205201023407.png"></p><h4 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205201351248.png"></p><h4 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205201756675.png"></p><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205202541243.png"></p><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205202840237.png"></p><h4 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205203124368.png"></p><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205203524236.png"></p><h3 id="OSI参考模型与TCP-x2F-IP参考模型"><a href="#OSI参考模型与TCP-x2F-IP参考模型" class="headerlink" title="OSI参考模型与TCP&#x2F;IP参考模型"></a>OSI参考模型与TCP&#x2F;IP参考模型</h3><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205203823604.png"></p><h4 id="OSI参考模型与TCP-x2F-IP参考模型相同点"><a href="#OSI参考模型与TCP-x2F-IP参考模型相同点" class="headerlink" title="OSI参考模型与TCP&#x2F;IP参考模型相同点"></a>OSI参考模型与TCP&#x2F;IP参考模型相同点</h4><p><strong>1.都分层</strong></p><p><strong>2.基于独立的协议栈的概念</strong></p><p><strong>3.可以实现异构网络互联</strong></p><h4 id="OSI参考模型与TCP-x2F-IP参考模型不同点"><a href="#OSI参考模型与TCP-x2F-IP参考模型不同点" class="headerlink" title="OSI参考模型与TCP&#x2F;IP参考模型不同点"></a>OSI参考模型与TCP&#x2F;IP参考模型不同点</h4><p><strong>1.OSI定义<font color="red">三</font>点：服务、协议、接口</strong></p><p><strong>2.OSI<font color="red">先</font>出现，参考模型先于协议发明，不偏向特定协议</strong></p><p><strong>3.TCP\IP设计之初就考虑到异构网<font color="red">互联</font>问题，将IP作为重要层次</strong></p><p><strong>4.</strong></p><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205205059858.png"></p><h4 id="5层参考模型"><a href="#5层参考模型" class="headerlink" title="5层参考模型"></a>5层参考模型</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205205358132.png"></p><h4 id="5层参考模型的数据封装与解封装"><a href="#5层参考模型的数据封装与解封装" class="headerlink" title="5层参考模型的数据封装与解封装"></a>5层参考模型的数据封装与解封装</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205205605596.png"></p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="物理层基本概念"><a href="#物理层基本概念" class="headerlink" title="物理层基本概念"></a>物理层基本概念</h3><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205212434375.png"></p><h4 id="典型的数据通讯模型"><a href="#典型的数据通讯模型" class="headerlink" title="典型的数据通讯模型"></a>典型的数据通讯模型</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205213546018.png"></p><h4 id="数据通信相关术语"><a href="#数据通信相关术语" class="headerlink" title="数据通信相关术语"></a>数据通信相关术语</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205214121310.png"></p><h4 id="三种通信方式"><a href="#三种通信方式" class="headerlink" title="三种通信方式"></a>三种通信方式</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205214500898.png"></p><h4 id="两种数据传输方式"><a href="#两种数据传输方式" class="headerlink" title="两种数据传输方式"></a>两种数据传输方式</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205215051195.png"></p><h4 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221205221931653.png"></p><h4 id="速率、波特、带宽"><a href="#速率、波特、带宽" class="headerlink" title="速率、波特、带宽"></a>速率、波特、带宽</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206143513318.png"></p><h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206143656818.png"></p><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206143930343.png"></p><h4 id="失真"><a href="#失真" class="headerlink" title="失真"></a>失真</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206144433449.png"></p><h4 id="失真的一种现象–码间串扰"><a href="#失真的一种现象–码间串扰" class="headerlink" title="失真的一种现象–码间串扰"></a>失真的一种现象–码间串扰</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206144939898.png"></p><h4 id="奈氏准则-奈奎斯特定理"><a href="#奈氏准则-奈奎斯特定理" class="headerlink" title="奈氏准则(奈奎斯特定理)"></a>奈氏准则(奈奎斯特定理)</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206145551760.png"></p><h5 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206145722705.png"></p><h4 id="香农定理"><a href="#香农定理" class="headerlink" title="香农定理"></a>香农定理</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206150320310.png"></p><h5 id="练习题："><a href="#练习题：" class="headerlink" title="练习题："></a>练习题：</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206150546306.png"></p><h4 id="“Nice”和”香浓”"><a href="#“Nice”和”香浓”" class="headerlink" title="“Nice”和”香浓”"></a>“Nice”和”香浓”</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206151022845.png"></p><h3 id="编码-amp-调制"><a href="#编码-amp-调制" class="headerlink" title="编码&amp;调制"></a>编码&amp;调制</h3><h4 id="基带信号与宽带信号"><a href="#基带信号与宽带信号" class="headerlink" title="基带信号与宽带信号"></a>基带信号与宽带信号</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206151634703.png"></p><h4 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206151923361.png"></p><h5 id="数字数据编码为数字信号"><a href="#数字数据编码为数字信号" class="headerlink" title="数字数据编码为数字信号"></a>数字数据编码为数字信号</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206181435522.png"></p><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206181611292.png"></p><h5 id="数字数据调制为模拟信号"><a href="#数字数据调制为模拟信号" class="headerlink" title="数字数据调制为模拟信号"></a>数字数据调制为模拟信号</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206182134043.png"></p><h5 id="模拟数据编码为数字信号"><a href="#模拟数据编码为数字信号" class="headerlink" title="模拟数据编码为数字信号"></a>模拟数据编码为数字信号</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206192617382.png"></p><h5 id="模拟数据调制为模拟信号"><a href="#模拟数据调制为模拟信号" class="headerlink" title="模拟数据调制为模拟信号"></a>模拟数据调制为模拟信号</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206192947439.png"></p><h4 id="物理层传输介质"><a href="#物理层传输介质" class="headerlink" title="物理层传输介质"></a>物理层传输介质</h4><h5 id="传输介质及分类"><a href="#传输介质及分类" class="headerlink" title="传输介质及分类"></a>传输介质及分类</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206193619927.png"></p><h5 id="导向性传输介质–1-双绞线"><a href="#导向性传输介质–1-双绞线" class="headerlink" title="导向性传输介质–1.双绞线"></a>导向性传输介质–1.双绞线</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206193927595.png"></p><h5 id="导向性传输介质–2-同轴电缆"><a href="#导向性传输介质–2-同轴电缆" class="headerlink" title="导向性传输介质–2.同轴电缆"></a>导向性传输介质–2.同轴电缆</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206194633736.png"></p><h5 id="导向性传输介质–3-光纤"><a href="#导向性传输介质–3-光纤" class="headerlink" title="导向性传输介质–3.光纤"></a>导向性传输介质–3.光纤</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206194936407.png"></p><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206195444266.png"></p><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206195640768.png"></p><h4 id="非导向性传输介质"><a href="#非导向性传输介质" class="headerlink" title="非导向性传输介质"></a>非导向性传输介质</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206210944896.png"></p><h4 id="物理层设备"><a href="#物理层设备" class="headerlink" title="物理层设备"></a>物理层设备</h4><h5 id="中继器"><a href="#中继器" class="headerlink" title="中继器"></a>中继器</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206211641155.png"></p><h5 id="集线器-多口中继器"><a href="#集线器-多口中继器" class="headerlink" title="集线器(多口中继器)"></a>集线器(多口中继器)</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206212147810.png"></p><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="1-链路层的功能"><a href="#1-链路层的功能" class="headerlink" title="1.链路层的功能"></a>1.链路层的功能</h3><h4 id="数据链路层功能概述"><a href="#数据链路层功能概述" class="headerlink" title="数据链路层功能概述"></a>数据链路层功能概述</h4><h5 id="数据链路层的研究思想"><a href="#数据链路层的研究思想" class="headerlink" title="数据链路层的研究思想"></a>数据链路层的研究思想</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206212902402.png"></p><h5 id="数据链路层基本概念"><a href="#数据链路层基本概念" class="headerlink" title="数据链路层基本概念"></a>数据链路层基本概念</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206213115139.png"></p><h5 id="数据链路层功能概述-1"><a href="#数据链路层功能概述-1" class="headerlink" title="数据链路层功能概述"></a>数据链路层功能概述</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206213518758.png"></p><h4 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206213949313.png"></p><h4 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206214141683.png"></p><h5 id="1-字符计数法"><a href="#1-字符计数法" class="headerlink" title="1.字符计数法"></a>1.字符计数法</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206214332978.png"> </p><h5 id="2-字符填充法"><a href="#2-字符填充法" class="headerlink" title="2.字符填充法"></a>2.字符填充法</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206214532362.png"></p><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206214749078.png"></p><h5 id="3-零比特填充法"><a href="#3-零比特填充法" class="headerlink" title="3.零比特填充法"></a>3.零比特填充法</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206215012120.png"></p><h5 id="4-违规编码法"><a href="#4-违规编码法" class="headerlink" title="4.违规编码法"></a>4.违规编码法</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221206215200113.png"></p><h4 id="差错控制-检错编码"><a href="#差错控制-检错编码" class="headerlink" title="差错控制(检错编码)"></a>差错控制(检错编码)</h4><h5 id="差错从何而来？"><a href="#差错从何而来？" class="headerlink" title="差错从何而来？"></a>差错从何而来？</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207092830178.png"></p><h5 id="数据链路层的差错控制"><a href="#数据链路层的差错控制" class="headerlink" title="数据链路层的差错控制"></a>数据链路层的差错控制</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207093230314.png"></p><h5 id="检错编码–奇偶校验码"><a href="#检错编码–奇偶校验码" class="headerlink" title="检错编码–奇偶校验码"></a>检错编码–奇偶校验码</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207093743234.png"></p><h5 id="检错编码–CRC循环冗余码"><a href="#检错编码–CRC循环冗余码" class="headerlink" title="检错编码–CRC循环冗余码"></a>检错编码–CRC循环冗余码</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207094929326.png"></p><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207095030486.png"></p><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207095208955.png"></p><h5 id="纠错编码–海明码"><a href="#纠错编码–海明码" class="headerlink" title="纠错编码–海明码"></a>纠错编码–海明码</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207095858264.png"></p><h6 id="1-确定校验码位数r"><a href="#1-确定校验码位数r" class="headerlink" title="1.确定校验码位数r"></a>1.确定校验码位数r</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207100050411.png"></p><h6 id="2-确定校验码和数据位置"><a href="#2-确定校验码和数据位置" class="headerlink" title="2.确定校验码和数据位置"></a>2.确定校验码和数据位置</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207100606588.png"></p><h6 id="3-求出校验码的值"><a href="#3-求出校验码的值" class="headerlink" title="3.求出校验码的值"></a>3.求出校验码的值</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207101245868.png"></p><h6 id="4-检错并纠错"><a href="#4-检错并纠错" class="headerlink" title="4.检错并纠错"></a>4.检错并纠错</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207101733974.png"></p><h3 id="2-链路层的两种信道"><a href="#2-链路层的两种信道" class="headerlink" title="2.链路层的两种信道"></a>2.链路层的两种信道</h3><h4 id="流量控制与可靠传输机制"><a href="#流量控制与可靠传输机制" class="headerlink" title="流量控制与可靠传输机制"></a>流量控制与可靠传输机制</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207103145697.png"></p><h4 id="流量控制的方法"><a href="#流量控制的方法" class="headerlink" title="流量控制的方法"></a>流量控制的方法</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207103530541.png"></p><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207103639848.png"></p><h5 id="可靠传输、滑动窗口、流量控制"><a href="#可靠传输、滑动窗口、流量控制" class="headerlink" title="可靠传输、滑动窗口、流量控制"></a>可靠传输、滑动窗口、流量控制</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207104142136.png"></p><h5 id="停止-等待协议"><a href="#停止-等待协议" class="headerlink" title="停止-等待协议"></a>停止-等待协议</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207110104025.png"></p><h6 id="停等协议–无差错情况"><a href="#停等协议–无差错情况" class="headerlink" title="停等协议–无差错情况"></a>停等协议–无差错情况</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207110320884.png"></p><h6 id="停等协议–有差错情况"><a href="#停等协议–有差错情况" class="headerlink" title="停等协议–有差错情况"></a>停等协议–有差错情况</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207110946819.png"></p><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207112229564.png"></p><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207113212804.png"></p><h6 id="停等协议性能分析"><a href="#停等协议性能分析" class="headerlink" title="停等协议性能分析"></a>停等协议性能分析</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207113442521.png"></p><h6 id="信道利用率"><a href="#信道利用率" class="headerlink" title="信道利用率"></a>信道利用率</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207113709877.png"></p><h5 id="选择重传协议"><a href="#选择重传协议" class="headerlink" title="选择重传协议"></a>选择重传协议</h5><h6 id="GBN协议的弊端"><a href="#GBN协议的弊端" class="headerlink" title="GBN协议的弊端"></a>GBN协议的弊端</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207151819811.png"></p><h6 id="选择重传协议中的滑动窗口"><a href="#选择重传协议中的滑动窗口" class="headerlink" title="选择重传协议中的滑动窗口"></a>选择重传协议中的滑动窗口</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207152223770.png"></p><h6 id="SR发送方必须响应的三件事"><a href="#SR发送方必须响应的三件事" class="headerlink" title="SR发送方必须响应的三件事"></a>SR发送方必须响应的三件事</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207152440538.png"></p><h6 id="SR接收方要做的事"><a href="#SR接收方要做的事" class="headerlink" title="SR接收方要做的事"></a>SR接收方要做的事</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207152915796.png"></p><h6 id="运行中的SR"><a href="#运行中的SR" class="headerlink" title="运行中的SR"></a>运行中的SR</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207153302686.png"></p><h6 id="滑动窗口的长度"><a href="#滑动窗口的长度" class="headerlink" title="滑动窗口的长度"></a>滑动窗口的长度</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207154134529.png"></p><h6 id="SR协议重点总结"><a href="#SR协议重点总结" class="headerlink" title="SR协议重点总结"></a>SR协议重点总结</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207154257225.png"></p><h5 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207154458448.png"></p><h5 id="后退N帧协议中的滑动窗口"><a href="#后退N帧协议中的滑动窗口" class="headerlink" title="后退N帧协议中的滑动窗口"></a>后退N帧协议中的滑动窗口</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207155514403.png"></p><h6 id="GBN发送方必须响应的三件事"><a href="#GBN发送方必须响应的三件事" class="headerlink" title="GBN发送方必须响应的三件事"></a>GBN发送方必须响应的三件事</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207160009689.png"></p><h6 id="GBN接收方要做的事"><a href="#GBN接收方要做的事" class="headerlink" title="GBN接收方要做的事"></a>GBN接收方要做的事</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207160600959.png"></p><h6 id="运行中的GBN"><a href="#运行中的GBN" class="headerlink" title="运行中的GBN"></a>运行中的GBN</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207160857687.png"></p><h6 id="滑动窗口长度"><a href="#滑动窗口长度" class="headerlink" title="滑动窗口长度"></a>滑动窗口长度</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207161103055.png"></p><h6 id="GBN协议重点总结"><a href="#GBN协议重点总结" class="headerlink" title="GBN协议重点总结"></a>GBN协议重点总结</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207161337932.png"></p><h6 id="习题1"><a href="#习题1" class="headerlink" title="习题1"></a>习题1</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207161540594.png"></p><h6 id="GBN协议性能分析"><a href="#GBN协议性能分析" class="headerlink" title="GBN协议性能分析"></a>GBN协议性能分析</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207161700453.png"></p><h5 id="传输数据使用的两种链路"><a href="#传输数据使用的两种链路" class="headerlink" title="传输数据使用的两种链路"></a>传输数据使用的两种链路</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207162801313.png"></p><h5 id="介质访问控制"><a href="#介质访问控制" class="headerlink" title="介质访问控制"></a>介质访问控制</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207163029578.png"></p><h5 id="信道划分介质访问控制"><a href="#信道划分介质访问控制" class="headerlink" title="信道划分介质访问控制"></a>信道划分介质访问控制</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207163935948.png"></p><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207164031795.png"></p><h6 id="频分多路复用FDM"><a href="#频分多路复用FDM" class="headerlink" title="频分多路复用FDM"></a>频分多路复用FDM</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207165933930.png"></p><h6 id="时分多路复用TDM"><a href="#时分多路复用TDM" class="headerlink" title="时分多路复用TDM"></a>时分多路复用TDM</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207170207245.png"></p><h6 id="改进的时分复用–统计时分复用STDM"><a href="#改进的时分复用–统计时分复用STDM" class="headerlink" title="改进的时分复用–统计时分复用STDM"></a>改进的时分复用–统计时分复用STDM</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207170447275.png"></p><h6 id="波分多路复用WDM"><a href="#波分多路复用WDM" class="headerlink" title="波分多路复用WDM"></a>波分多路复用WDM</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207170714346.png"></p><h6 id="码分多路复用CDM"><a href="#码分多路复用CDM" class="headerlink" title="码分多路复用CDM"></a>码分多路复用CDM</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207174326691.png"></p><h5 id="ALOHA协议"><a href="#ALOHA协议" class="headerlink" title="ALOHA协议"></a>ALOHA协议</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207175029262.png"></p><h6 id="纯-ALOHA协议"><a href="#纯-ALOHA协议" class="headerlink" title="纯 ALOHA协议"></a>纯 ALOHA协议</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207175348555.png"></p><h6 id="时隙ALOfHA协议"><a href="#时隙ALOfHA协议" class="headerlink" title="时隙ALOfHA协议"></a>时隙ALOfHA协议</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207175615572.png"></p><h5 id="CSMA协议"><a href="#CSMA协议" class="headerlink" title="CSMA协议"></a>CSMA协议</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207184223657.png"></p><h6 id="1-坚持CSMA"><a href="#1-坚持CSMA" class="headerlink" title="1-坚持CSMA"></a>1-坚持CSMA</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207184436174.png"></p><h6 id="非坚持CSMA"><a href="#非坚持CSMA" class="headerlink" title="非坚持CSMA"></a>非坚持CSMA</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207185620877.png"></p><h6 id="p-坚持CSMA"><a href="#p-坚持CSMA" class="headerlink" title="p-坚持CSMA"></a>p-坚持CSMA</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207190243837.png"></p><h5 id="三种CSMA对比总结"><a href="#三种CSMA对比总结" class="headerlink" title="三种CSMA对比总结"></a>三种CSMA对比总结</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207190437668.png"></p><h5 id="介质访问控制-1"><a href="#介质访问控制-1" class="headerlink" title="介质访问控制"></a>介质访问控制</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207191030978.png"></p><h6 id="轮询协议"><a href="#轮询协议" class="headerlink" title="轮询协议"></a>轮询协议</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207191338955.png"></p><h6 id="令牌传递协议"><a href="#令牌传递协议" class="headerlink" title="令牌传递协议"></a>令牌传递协议</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207192041875.png"></p><h5 id="CSMA-x2F-CA协议"><a href="#CSMA-x2F-CA协议" class="headerlink" title="CSMA&#x2F;CA协议"></a>CSMA&#x2F;CA协议</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207192537343.png"></p><h6 id="CSMA-x2F-CA协议工作原理"><a href="#CSMA-x2F-CA协议工作原理" class="headerlink" title="CSMA&#x2F;CA协议工作原理"></a>CSMA&#x2F;CA协议工作原理</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207193144330.png"></p><h6 id="CSMA-x2F-CD-与-CSMA-x2F-CA"><a href="#CSMA-x2F-CD-与-CSMA-x2F-CA" class="headerlink" title="CSMA&#x2F;CD 与 CSMA&#x2F;CA"></a>CSMA&#x2F;CD 与 CSMA&#x2F;CA</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221207193323336.png"></p><h3 id="3-局域网、广域网"><a href="#3-局域网、广域网" class="headerlink" title="3.局域网、广域网"></a>3.局域网、广域网</h3><h4 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208100613693.png"></p><h5 id="局域网拓扑结构"><a href="#局域网拓扑结构" class="headerlink" title="局域网拓扑结构"></a>局域网拓扑结构</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208100958180.png"></p><h5 id="局域网传输介质"><a href="#局域网传输介质" class="headerlink" title="局域网传输介质"></a>局域网传输介质</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208101127251.png"></p><h5 id="局域网介质访问控制方法"><a href="#局域网介质访问控制方法" class="headerlink" title="局域网介质访问控制方法"></a>局域网介质访问控制方法</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208102643600.png"></p><h5 id="局域网的分类"><a href="#局域网的分类" class="headerlink" title="局域网的分类"></a>局域网的分类</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208102847290.png"></p><h5 id="IEEE-802标准"><a href="#IEEE-802标准" class="headerlink" title="IEEE 802标准"></a>IEEE 802标准</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208103632396.png"></p><h5 id="MAC子层和LLC子层"><a href="#MAC子层和LLC子层" class="headerlink" title="MAC子层和LLC子层"></a>MAC子层和LLC子层</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208104024392.png"></p><h4 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h4><h5 id="以太网概述"><a href="#以太网概述" class="headerlink" title="以太网概述"></a>以太网概述</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208104551340.png"></p><h5 id="以太网提供无连接、不可靠的服务"><a href="#以太网提供无连接、不可靠的服务" class="headerlink" title="以太网提供无连接、不可靠的服务"></a>以太网提供无连接、不可靠的服务</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208104748763.png"></p><h5 id="以太网传输介质与拓扑结构的发展"><a href="#以太网传输介质与拓扑结构的发展" class="headerlink" title="以太网传输介质与拓扑结构的发展"></a>以太网传输介质与拓扑结构的发展</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208105002383.png"></p><h5 id="10BASE-T以太网"><a href="#10BASE-T以太网" class="headerlink" title="10BASE-T以太网"></a>10BASE-T以太网</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208105736771.png"></p><h5 id="适配器与MAC地址"><a href="#适配器与MAC地址" class="headerlink" title="适配器与MAC地址"></a>适配器与MAC地址</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208110102525.png"></p><h5 id="以太网MAC帧"><a href="#以太网MAC帧" class="headerlink" title="以太网MAC帧"></a>以太网MAC帧</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208111030457.png"></p><h5 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208111228354.png"></p><h4 id="IEEE-802-11无线局域网"><a href="#IEEE-802-11无线局域网" class="headerlink" title="IEEE 802.11无线局域网"></a>IEEE 802.11无线局域网</h4><h5 id="802-11的MAC帧头格式"><a href="#802-11的MAC帧头格式" class="headerlink" title="802.11的MAC帧头格式"></a>802.11的MAC帧头格式</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208155922265.png"></p><h5 id="有固定基础设施无线局域网"><a href="#有固定基础设施无线局域网" class="headerlink" title="有固定基础设施无线局域网"></a>有固定基础设施无线局域网</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208160804710.png"></p><h5 id="无固定基础设施无线局域网的自我组织网络"><a href="#无固定基础设施无线局域网的自我组织网络" class="headerlink" title="无固定基础设施无线局域网的自我组织网络"></a>无固定基础设施无线局域网的自我组织网络</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208160955573.png"></p><h4 id="CSMA-x2F-CD协议"><a href="#CSMA-x2F-CD协议" class="headerlink" title="CSMA&#x2F;CD协议"></a>CSMA&#x2F;CD协议</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208161700031.png"></p><h5 id="传播时延对载波监听的影响"><a href="#传播时延对载波监听的影响" class="headerlink" title="传播时延对载波监听的影响"></a>传播时延对载波监听的影响</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208162533768.png"></p><h5 id="如何确定碰撞后的重传时机？"><a href="#如何确定碰撞后的重传时机？" class="headerlink" title="如何确定碰撞后的重传时机？"></a>如何确定碰撞后的重传时机？</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208163059912.png"></p><h5 id="最小帧长问题"><a href="#最小帧长问题" class="headerlink" title="最小帧长问题"></a>最小帧长问题</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208163344722.png"></p><h4 id="PPP协议和HDLC协议"><a href="#PPP协议和HDLC协议" class="headerlink" title="PPP协议和HDLC协议"></a>PPP协议和HDLC协议</h4><h5 id="广域网"><a href="#广域网" class="headerlink" title="广域网"></a>广域网</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208163919943.png"></p><h5 id="PPP协议的特点"><a href="#PPP协议的特点" class="headerlink" title="PPP协议的特点"></a>PPP协议的特点</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208164039920.png"></p><h5 id="PPP协议应满足的要求"><a href="#PPP协议应满足的要求" class="headerlink" title="PPP协议应满足的要求"></a>PPP协议应满足的要求</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208165432678.png"></p><h5 id="PPP协议无需满足的要求"><a href="#PPP协议无需满足的要求" class="headerlink" title="PPP协议无需满足的要求"></a>PPP协议无需满足的要求</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208165544008.png"></p><h5 id="PPP协议的三个组成部分"><a href="#PPP协议的三个组成部分" class="headerlink" title="PPP协议的三个组成部分"></a>PPP协议的三个组成部分</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208165737514.png"></p><h5 id="PPP协议的状态图"><a href="#PPP协议的状态图" class="headerlink" title="PPP协议的状态图"></a>PPP协议的状态图</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208165914393.png"></p><h5 id="PPP协议的帧格式"><a href="#PPP协议的帧格式" class="headerlink" title="PPP协议的帧格式"></a>PPP协议的帧格式</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208170125575.png"></p><h5 id="HDLC协议"><a href="#HDLC协议" class="headerlink" title="HDLC协议"></a>HDLC协议</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208170313096.png"></p><h5 id="HDLC的站"><a href="#HDLC的站" class="headerlink" title="HDLC的站"></a>HDLC的站</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208170537204.png"></p><h5 id="HDLC的帧格式"><a href="#HDLC的帧格式" class="headerlink" title="HDLC的帧格式"></a>HDLC的帧格式</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208170726593.png"></p><h5 id="PPP协议-amp-HDLC协议"><a href="#PPP协议-amp-HDLC协议" class="headerlink" title="PPP协议&amp;HDLC协议"></a>PPP协议&amp;HDLC协议</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208171021892.png"></p><h3 id="4-链路层的设备"><a href="#4-链路层的设备" class="headerlink" title="4.链路层的设备"></a>4.链路层的设备</h3><h4 id="物理层扩展以太网"><a href="#物理层扩展以太网" class="headerlink" title="物理层扩展以太网"></a>物理层扩展以太网</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208171706425.png"></p><h4 id="链路层扩展以太网"><a href="#链路层扩展以太网" class="headerlink" title="链路层扩展以太网"></a>链路层扩展以太网</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208172209679.png"></p><h5 id="网桥分类–透明网桥"><a href="#网桥分类–透明网桥" class="headerlink" title="网桥分类–透明网桥"></a>网桥分类–透明网桥</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208173200765.png"></p><h5 id="网桥分类–源路由网桥"><a href="#网桥分类–源路由网桥" class="headerlink" title="网桥分类–源路由网桥"></a>网桥分类–源路由网桥</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208173615432.png"></p><h5 id="多接口网桥–以太网交换机"><a href="#多接口网桥–以太网交换机" class="headerlink" title="多接口网桥–以太网交换机"></a>多接口网桥–以太网交换机</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208174223077.png"></p><h5 id="以太网交换机的两种方式"><a href="#以太网交换机的两种方式" class="headerlink" title="以太网交换机的两种方式"></a>以太网交换机的两种方式</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208174418588.png"></p><h5 id="冲突域和广播域"><a href="#冲突域和广播域" class="headerlink" title="冲突域和广播域"></a>冲突域和广播域</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208175139525.png"></p><h2 id="第四章-网络层"><a href="#第四章-网络层" class="headerlink" title="第四章 网络层"></a>第四章 网络层</h2><h4 id="网络层-1"><a href="#网络层-1" class="headerlink" title="网络层"></a>网络层</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208184639562.png"></p><h4 id="数据交换方式"><a href="#数据交换方式" class="headerlink" title="数据交换方式"></a>数据交换方式</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\薛之谦\AppData\Roaming\Typora\typora-user-images\image-20221208185135502.png" alt="image-20221208185135502"></p><h5 id="为什么要数据交换？"><a href="#为什么要数据交换？" class="headerlink" title="为什么要数据交换？"></a>为什么要数据交换？</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208185720898.png"></p><h5 id="数据交换方式-1"><a href="#数据交换方式-1" class="headerlink" title="数据交换方式"></a>数据交换方式</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208192008645.png"></p><h6 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208193109449.png"></p><h6 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208193926204.png"></p><h6 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208194410216.png"></p><h6 id="报文交换-amp-分组交换"><a href="#报文交换-amp-分组交换" class="headerlink" title="报文交换&amp;分组交换"></a>报文交换&amp;分组交换</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208195524884.png"></p><h6 id="三种数据交换方式比较总结"><a href="#三种数据交换方式比较总结" class="headerlink" title="三种数据交换方式比较总结"></a>三种数据交换方式比较总结</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221208195727638.png"></p><h4 id="数据报方式-amp-虚电路方式"><a href="#数据报方式-amp-虚电路方式" class="headerlink" title="数据报方式&amp;虚电路方式"></a>数据报方式&amp;虚电路方式</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209094748354.png"></p><h4 id="几种传输单元名词解析"><a href="#几种传输单元名词解析" class="headerlink" title="几种传输单元名词解析"></a>几种传输单元名词解析</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209095041412.png"></p><h4 id="数据报-因特网在用"><a href="#数据报-因特网在用" class="headerlink" title="数据报(因特网在用)"></a>数据报(因特网在用)</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209095351301.png"></p><h4 id="虚电路"><a href="#虚电路" class="headerlink" title="虚电路"></a>虚电路</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209095813182.png"></p><h4 id="数据报-amp-虚电报"><a href="#数据报-amp-虚电报" class="headerlink" title="数据报&amp;虚电报"></a>数据报&amp;虚电报</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209095922759.png"></p><h4 id="数据交换方式-2"><a href="#数据交换方式-2" class="headerlink" title="数据交换方式"></a>数据交换方式</h4><h5 id="网络中的”掌中宝”"><a href="#网络中的”掌中宝”" class="headerlink" title="网络中的”掌中宝”"></a>网络中的”掌中宝”</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209100330778.png"></p><h4 id="路由算法及路由协议"><a href="#路由算法及路由协议" class="headerlink" title="路由算法及路由协议"></a>路由算法及路由协议</h4><h5 id="路由算法"><a href="#路由算法" class="headerlink" title="路由算法"></a>路由算法</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209101020462.png"></p><h5 id="路由算法的分类"><a href="#路由算法的分类" class="headerlink" title="路由算法的分类"></a>路由算法的分类</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209103034811.png"></p><h5 id="分层次的路由选择协议"><a href="#分层次的路由选择协议" class="headerlink" title="分层次的路由选择协议"></a>分层次的路由选择协议</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209103440802.png"></p><h4 id="IP数据报格式"><a href="#IP数据报格式" class="headerlink" title="IP数据报格式"></a>IP数据报格式</h4><h5 id="TCP-x2F-IP协议栈"><a href="#TCP-x2F-IP协议栈" class="headerlink" title="TCP&#x2F;IP协议栈"></a>TCP&#x2F;IP协议栈</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209103912157.png"></p><h5 id="IP数据报格式-1"><a href="#IP数据报格式-1" class="headerlink" title="IP数据报格式"></a>IP数据报格式</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209104649056.png"></p><h5 id="IP数据报分片"><a href="#IP数据报分片" class="headerlink" title="IP数据报分片"></a>IP数据报分片</h5><h6 id="最大传送单元MTU"><a href="#最大传送单元MTU" class="headerlink" title="最大传送单元MTU"></a>最大传送单元MTU</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209111944262.png"></p><h6 id="IP数据报分片例题"><a href="#IP数据报分片例题" class="headerlink" title="IP数据报分片例题"></a>IP数据报分片例题</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209112246032.png"></p><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209113216147.png"></p><h5 id="IP编址的历史阶段"><a href="#IP编址的历史阶段" class="headerlink" title="IP编址的历史阶段"></a>IP编址的历史阶段</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209113435453.png"></p><h6 id="分类的IP地址"><a href="#分类的IP地址" class="headerlink" title="分类的IP地址"></a>分类的IP地址</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209114036805.png"></p><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209114731198.png"></p><h6 id="私有IP地址"><a href="#私有IP地址" class="headerlink" title="私有IP地址"></a>私有IP地址</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209114923426.png"></p><h6 id="分类的IP地址-1"><a href="#分类的IP地址-1" class="headerlink" title="分类的IP地址"></a>分类的IP地址</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209115252602.png"></p><h4 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h4><h5 id="网络地址转换NAT"><a href="#网络地址转换NAT" class="headerlink" title="网络地址转换NAT"></a>网络地址转换NAT</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209115813456.png"></p><h5 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209151151862.png"></p><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209151605535.png"></p><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209151739249.png"></p><h5 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209152048096.png"></p><h5 id="子网掩码练习题"><a href="#子网掩码练习题" class="headerlink" title="子网掩码练习题"></a>子网掩码练习题</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209152453125.png"></p><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209152857181.png"></p><h5 id="使用子网时分组的转发"><a href="#使用子网时分组的转发" class="headerlink" title="使用子网时分组的转发"></a>使用子网时分组的转发</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209155030480.png"></p><h5 id="无分类编址CIDR"><a href="#无分类编址CIDR" class="headerlink" title="无分类编址CIDR"></a>无分类编址CIDR</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209155800475.png"></p><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209160315350.png"></p><h5 id="构成超网"><a href="#构成超网" class="headerlink" title="构成超网"></a>构成超网</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209160655274.png"></p><h5 id="最长前缀匹配"><a href="#最长前缀匹配" class="headerlink" title="最长前缀匹配"></a>最长前缀匹配</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209161140093.png"></p><h5 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h5><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209161855913.png"></p><h5 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h5><h6 id="发送数据的过程"><a href="#发送数据的过程" class="headerlink" title="发送数据的过程"></a>发送数据的过程</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209163612047.png"></p><h6 id="ARP协议-1"><a href="#ARP协议-1" class="headerlink" title="ARP协议"></a>ARP协议</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209164537475.png"></p><h6 id="ARP协议习题"><a href="#ARP协议习题" class="headerlink" title="ARP协议习题"></a>ARP协议习题</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209165132757.png"></p><h5 id="DHCP协议"><a href="#DHCP协议" class="headerlink" title="DHCP协议"></a>DHCP协议</h5><h6 id="主机如何获取IP地址"><a href="#主机如何获取IP地址" class="headerlink" title="主机如何获取IP地址"></a>主机如何获取IP地址</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209165814604.png"></p><h6 id="DHCP协议-1"><a href="#DHCP协议-1" class="headerlink" title="DHCP协议"></a>DHCP协议</h6><p><img src="/2022/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221209171600200.png"></p>]]></content>
      
      
      <categories>
          
          <category> java知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper入门</title>
      <link href="/2022/11/04/zookeeper%E5%85%A5%E9%97%A8/"/>
      <url>/2022/11/04/zookeeper%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><h2 id="Zookeeper-概念"><a href="#Zookeeper-概念" class="headerlink" title="Zookeeper 概念"></a>Zookeeper 概念</h2><ul><li><strong>Zookeeper是ApacheHadoop项目下的一个子目录，是一个树形目录服务</strong></li><li><strong>Zookeeper翻译过来是 动物管理员，他是用来管理Hadoop(大象)、Hive(蜜蜂)、Pig(小猪)的管理员，简称zk</strong></li><li><strong>Zookeeper是一个分布式，开源的分布式应用程序的协调服务。</strong></li><li><strong>Zookeeper提供的主要功能包括：</strong><ul><li><strong>配置管理</strong></li><li><strong>分布式锁</strong></li><li><strong>集群管理</strong></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka教程</title>
      <link href="/2022/11/04/Kafka%E6%95%99%E7%A8%8B/"/>
      <url>/2022/11/04/Kafka%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka教程"><a href="#Kafka教程" class="headerlink" title="Kafka教程"></a>Kafka教程</h1>]]></content>
      
      
      
        <tags>
            
            <tag> java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/01/Nginx%E5%85%A5%E9%97%A8/"/>
      <url>/2022/09/01/Nginx%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/2022/08/02/%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/08/02/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构与算法之链表："><a href="#数据结构与算法之链表：" class="headerlink" title="数据结构与算法之链表："></a>数据结构与算法之链表：</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code01_ReverseList</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>        <span class="token keyword">public</span> Node next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>            value <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DoubleNode</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>        <span class="token keyword">public</span> DoubleNode last<span class="token punctuation">;</span>        <span class="token keyword">public</span> DoubleNode next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">DoubleNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>            value <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//反转单链表</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Node <span class="token function">reverseLinkedList</span><span class="token punctuation">(</span>Node head<span class="token punctuation">)</span><span class="token punctuation">{</span>        Node pre <span class="token operator">=</span> null<span class="token punctuation">;</span>        Node next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//反转双向链表</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DoubleNode <span class="token function">reverseDoubleList</span><span class="token punctuation">(</span>DoubleNode head<span class="token punctuation">)</span><span class="token punctuation">{</span>        DoubleNode pre <span class="token operator">=</span> null<span class="token punctuation">;</span>        DoubleNode next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>last <span class="token operator">=</span> next<span class="token punctuation">;</span>            head <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除指定元素</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Node <span class="token function">removeValue</span><span class="token punctuation">(</span>Node head<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>value <span class="token operator">!=</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//head来到不需要删除的第一个元素</span>        Node per <span class="token operator">=</span> head<span class="token punctuation">;</span>        Node cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value <span class="token operator">==</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>                per<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                per <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="1、设计模式概述"><a href="#1、设计模式概述" class="headerlink" title="1、设计模式概述"></a>1、设计模式概述</h2><h3 id="1-4、设计模式分类"><a href="#1-4、设计模式分类" class="headerlink" title="1.4、设计模式分类"></a>1.4、设计模式分类</h3><ul><li><p><strong>创建型模式</strong></p><p>用于描述”怎样创建对象“，它的主要特点是”将对象的创建与使用分离“。GoF（四人组）书中提供了单例、原型、工厂方法、抽象工厂、构造者等 5 种创建型模式。</p></li><li><p><strong>结构型模式</strong></p><p>用于描述如何将类或对象按某种布局组成更大的结构，GoF（四人组）书中提供了代理，适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</p></li><li><p><strong>行为型模式</strong></p><p>用于描述类或对象之间怎样相互共同完成单个对象无法单独完成得任务，以及怎样分配职责。GoF（四人组）书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</p></li></ul><h2 id="2、UML"><a href="#2、UML" class="headerlink" title="2、UML"></a>2、UML</h2><p>统一建模语言，用来设计软件的可视化建模语言。它的特点是简单，统一，图形化，能表达软件设计中的动态与静态信息。</p><p>UML从目标系统的不同角度出发，定义了用例图、类图、对象图、、状态图、活动图、时序图、协作图、构件图、部署图等 9 种图。</p><h3 id="2-1、类图概述"><a href="#2-1、类图概述" class="headerlink" title="2.1、类图概述"></a>2.1、类图概述</h3><p>类图是先试试了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性地信息。类图是面向对象建模地主要组成部分。</p><h3 id="2-2、类图的作用"><a href="#2-2、类图的作用" class="headerlink" title="2.2、类图的作用"></a>2.2、类图的作用</h3><ul><li>在软件工程中，类tu1是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解；</li><li>类图是系统分析和设计阶段的重要产物，是系统偏码和测试的重要模型。</li></ul><h3 id="2-3、类图表示法"><a href="#2-3、类图表示法" class="headerlink" title="2.3、类图表示法"></a>2.3、类图表示法</h3><h4 id="2-3-1、类的表示方法"><a href="#2-3-1、类的表示方法" class="headerlink" title="2.3.1、类的表示方法"></a>2.3.1、类的表示方法</h4><p>在UML类图中，类的使用包含类名、属性和方法并且带有分割线的矩形来表示，比如下图表示一个Employee类，它包含name，age和address这 3 个属性，以及work()方法。<br><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220525153009430.png"></p><p>属性&#x2F;方法名称前加的加号和减号表示了这个属性&#x2F;方法的可见性，UML类图中表示可见性的符号有三种：</p><ul><li>+：表示public</li><li>-：表示private</li><li>#：表示protected</li></ul><p>属性的完整表示方式是：<strong>可见性   名称：类型  [ &#x3D; 缺省值]</strong></p><p>方法的完整表示方法是：<strong>可见性   名称（参数列表）[ ：返回类型 ]</strong></p><blockquote><p>注意：</p><p>​        1、中括号中的内容表示是可选的</p><p>​        2、也有将类型放到变量名前面，返回值类型放在方法名前面</p></blockquote><p><strong>举个例子：</strong><br><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220525154454726.png"></p><p>上图Demo类定义了三个方法：</p><ul><li>method()方法：修饰符为public，没有参数，没有返回值。</li><li>method1()方法：修饰符为pravite，没有参数，返回值类型为String。</li><li>method2()方法：修饰符为protected，接收两个参数，第一个参数为int，第二个参数为String，返回值类型是int。</li></ul><h4 id="2-3-2、类与类之间关系的表示方式"><a href="#2-3-2、类与类之间关系的表示方式" class="headerlink" title="2.3.2、类与类之间关系的表示方式"></a>2.3.2、类与类之间关系的表示方式</h4><h4 id="2-3-2-1、关联关系"><a href="#2-3-2-1、关联关系" class="headerlink" title="2.3.2.1、关联关系"></a>2.3.2.1、关联关系</h4><p>关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关联关系和组合关系。先介绍一般关联。</p><p>关联又可以分为单向关联，双向关联，自关联。</p><p><strong>1、单向关联</strong><br><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220525155547585.png"></p><p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让Customer类持有一个类型为Address的成员变量类实现。</p><p><strong>2、双向关联</strong><br><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220525160122272.png"></p><p>从图中我们很容易看出，所谓的双向关联就是双方各自持有对方类型的成员变量。</p><p>在UML类图中，双向关联用一个不带箭头的直线表示。上图中Customer类中维护一个List<Product>，表示一个顾客可以购买多个商品；在Product类中维护一个Customer类型成员变量表示这个产品被哪个顾客所购买。</Product></p><p><strong>3、自关联</strong><br><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220525160824417.png"></p><p>自关联在UML类图中用一个带有箭头且指向自身的线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是”自己包含自己“。</p><h4 id="2-3-2-2-聚合关系"><a href="#2-3-2-2-聚合关系" class="headerlink" title="2.3.2.2 聚合关系"></a>2.3.2.2 聚合关系</h4><p>聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。</p><p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体 对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在</p><p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。下图所示是大学和教师的 关系图：<br><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220525163317864.png"></p><h4 id="2-3-2-3-组合关系"><a href="#2-3-2-3-组合关系" class="headerlink" title="2.3.2.3 组合关系"></a>2.3.2.3 组合关系</h4><p>组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。</p><p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在， 部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p><p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。下图所示是头和嘴的关系图：<br><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220525163949877.png"></p><h4 id="2-3-2-4-依赖关系"><a href="#2-3-2-4-依赖关系" class="headerlink" title="2.3.2.4 依赖关系"></a>2.3.2.4 依赖关系</h4><p>依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某 个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方 法来完成一些职责。</p><p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。下图所示是司机 和汽车的关系图，司机驾驶汽车：<br><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220525164821374.png"></p><h4 id="2-3-2-5-继承关系"><a href="#2-3-2-5-继承关系" class="headerlink" title="2.3.2.5 继承关系"></a>2.3.2.5 继承关系</h4><p>继承关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一 种继承关系。</p><p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使 用面向对象的继承机制来实现泛化关系。例如，Student 类和 Teacher 类都是 Person 类的子 类，其类图如下图所示：<br><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220525165201611.png"></p><h4 id="2-3-2-6-实现关系"><a href="#2-3-2-6-实现关系" class="headerlink" title="2.3.2.6 实现关系"></a>2.3.2.6 实现关系</h4><p>实现关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明 的所有的抽象操作。</p><p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和 船实现了交通工具，其类图如图所示。<br><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220525165502221.png"></p><h2 id="3，软件设计原则"><a href="#3，软件设计原则" class="headerlink" title="3，软件设计原则"></a>3，软件设计原则</h2><p>在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽 量根据6条原则来开发程序，从而提高软件开发效率、节约软件开发成本和维护成本。</p><h3 id="3-1-开闭原则"><a href="#3-1-开闭原则" class="headerlink" title="3.1 开闭原则"></a>3.1 开闭原则</h3><p><strong>对扩展开放，对修改关闭。</strong>在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效 果。简言之，是为了使程序的扩展性好，易于维护和升级。</p><p>想要达到这样的效果，我们需要使用接口和抽象类。</p><p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节 可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类 来扩展就可以了。 </p><p>下面以 搜狗输入法 的皮肤为例介绍开闭原则的应用。</p><p><strong>【例】</strong> 搜狗输入法 的皮肤设计。</p><p>分析： 搜狗输入法 的皮肤是输入法背景图片、窗口颜色和声音等元素的组合。用户可以根据自己的喜 爱更换自己的输入法的皮肤，也可以从网上下载新的皮肤。这些皮肤有共同的特点，可以为其定义一个 抽象类（AbstractSkin），而每个具体的皮肤（DefaultSpecificSkin和 HeimaSpecificSkin）是其子类。用户窗体可以根据需要选择或者增加新的主题，而不需要修改原代 码，所以它是满足开闭原则的。<font color="red">PS:SouGoulnput 对 AbstractSkin 为聚合关系，图中画错了</font><br><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220525170537310.png"></p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>st<span class="token punctuation">.</span>principles<span class="token punctuation">.</span>demo1<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractSkin</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//显示的方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>st<span class="token punctuation">.</span>principles<span class="token punctuation">.</span>demo1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 默认皮肤类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultSkin</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSkin</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认皮肤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>st<span class="token punctuation">.</span>principles<span class="token punctuation">.</span>demo1<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeimaSkin</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSkin</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"黑马程序员皮肤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>st<span class="token punctuation">.</span>principles<span class="token punctuation">.</span>demo1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 搜狗输入法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SougouInput</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AbstractSkin skin<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSkin</span><span class="token punctuation">(</span>AbstractSkin skin<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>skin <span class="token operator">=</span> skin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        skin<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>st<span class="token punctuation">.</span>principles<span class="token punctuation">.</span>demo1<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建搜狗输入法对象</span>        SougouInput input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SougouInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建皮肤对象</span><span class="token comment" spellcheck="true">//        DefaultSkin skin = new DefaultSkin();</span>        HeimaSkin skin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeimaSkin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将皮肤设置到输入法中</span>        input<span class="token punctuation">.</span><span class="token function">setSkin</span><span class="token punctuation">(</span>skin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.显示皮肤</span>        input<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-里氏代换原则"><a href="#3-2-里氏代换原则" class="headerlink" title="3.2 里氏代换原则"></a>3.2 里氏代换原则</h4><p>里氏代换原则是面向对象设计的基本原则之一。</p><p>里氏代换原则：任何基类可以出现的地方，子类一定可以出现。通俗理解：子类可以扩展父类的功能， 但不能改变父类原有的功能。换句话说，子类继承父类时，除添加新的方法完成新增功能外，尽量不要 重写父类的方法。</p><p>如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较 差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。</p><p>下面看一个里氏替换原则中经典的一个例子</p><p><strong>【例】</strong>正方形不是长方形。</p><p>在数学领域里，正方形毫无疑问是长方形，它是一个长宽相等的长方形。所以，我们开发的一个与几何 图形相关的软件系统，就可以顺理成章的让正方形继承自长方形。<br><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220525173328004.png"></p><p>代码如下：</p><p><strong>长方形类（Rectangle）：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 长方形类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> length<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> width<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLength</span><span class="token punctuation">(</span><span class="token keyword">double</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> width<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token keyword">double</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>正方形类</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 正方形类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Rectangle</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLength</span><span class="token punctuation">(</span><span class="token keyword">double</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token keyword">double</span> width<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>测试类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RectangleDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建长方形对象</span>        Rectangle r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置长和宽</span>        r<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用resize方法进行扩宽</span>        <span class="token function">resize</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printLengthAndWidth</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Square s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printLengthAndWidth</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//扩宽方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span>Rectangle rectangle<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果长比宽小，进行扩宽操作</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> rectangle<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            rectangle<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//打印长和宽</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printLengthAndWidth</span><span class="token punctuation">(</span>Rectangle rectangle<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220529100819117.png"></p><h4 id="3-3、依赖倒转原则"><a href="#3-3、依赖倒转原则" class="headerlink" title="3.3、依赖倒转原则"></a>3.3、依赖倒转原则</h4><p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。简 单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p><p>个例子来理解依赖倒转原则：</p><p><strong>【例】</strong>组装电脑</p><p>现要组装一台电脑，需要配件cpu，硬盘，内存条。只有这些配置都有了，计算机才能正常的运行。选 择cpu有很多选择，如Intel，AMD等，硬盘可以选择希捷，西数等，内存条可以选择金士顿，海盗船 等。<br><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220529101626348.png"></p><p>根据依赖倒转原则进行改进： 代码我们只需要修改Computer类，让Computer类依赖抽象（各个配件的接口），而不是依赖于各个 组件具体的实现类。</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220529110858661.png"></p><p><strong>代码如下：</strong></p><p><strong>电脑：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> HardDisk hardDisk<span class="token punctuation">;</span>    <span class="token keyword">private</span> Cpu cpu<span class="token punctuation">;</span>    <span class="token keyword">private</span> Memory memory<span class="token punctuation">;</span>    <span class="token keyword">public</span> HardDisk <span class="token function">getHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hardDisk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHardDisk</span><span class="token punctuation">(</span>HardDisk hardDisk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hardDisk <span class="token operator">=</span> hardDisk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Cpu <span class="token function">getCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cpu<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCpu</span><span class="token punctuation">(</span>Cpu cpu<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Memory <span class="token function">getMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> memory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMemory</span><span class="token punctuation">(</span>Memory memory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>memory <span class="token operator">=</span> memory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运行计算机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String data <span class="token operator">=</span> hardDisk<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从银盘上获取的数据是："</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        cpu<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        memory<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Cpu接口</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Cpu接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Cpu</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//运行cpu</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>硬盘接口</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HardDisk</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//存储数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>String data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取数据</span>    <span class="token keyword">public</span> String <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>内存条接口</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 内存条接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Memory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntelCpu</span> <span class="token keyword">implements</span> <span class="token class-name">Cpu</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用Intel处理器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KingstonMemory</span> <span class="token keyword">implements</span> <span class="token class-name">Memory</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用金士顿内存条"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 希捷硬盘 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiJieHardDisk</span> <span class="token keyword">implements</span> <span class="token class-name">HardDisk</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//存储数据的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>String data<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用希捷硬盘存储数据为："</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取数据的方法</span>    <span class="token keyword">public</span> String <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用希捷硬盘取数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"数据"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>测试类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建计算机的组件对象</span>        HardDisk hardDisk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiJieHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cpu cpu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntelCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Memory memory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KingstonMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建计算机对象</span>        Computer c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//组装计算机</span>        c<span class="token punctuation">.</span><span class="token function">setCpu</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">setHardDisk</span><span class="token punctuation">(</span>hardDisk<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">setMemory</span><span class="token punctuation">(</span>memory<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-4、接口隔离原则"><a href="#3-4、接口隔离原则" class="headerlink" title="3.4、接口隔离原则"></a>3.4、接口隔离原则</h4><p>客户端不应该被迫依赖于它不使用的方法；一个类对另一个类的依赖应该建立在最小的接口上。</p><p><strong>【例】</strong>安全门案例</p><p>我们需要创建一个安全门，该安全门具有防火，防水，防盗的功能。可以将防火，防水，放盗能提取成一个接口，形成一套规范。类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220529112326742.png"></p><p>上面的设计我们发现了它存在的问题，黑马品牌的安全门具有防盗，防水，防火的功能。现在如果我们 还需要再创建一个传智品牌的安全门，而该安全门只具有防盗、防水功能呢？很显然如果实现 SafetyDoor接口就违背了接口隔离原则，那么我们如何进行修改呢？看如下类图：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220529112522314.png"></p><p><strong>代码如下：</strong></p><p><strong>AntiThetf（接口）：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AntiTheft</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">antiTheft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>Fireproof（接口）：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Fireproof</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">fireproof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>Waterproof（接口）：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Waterproof</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">waterproof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>HeiMaSafetyDoor（类）：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeiMaSafetyDoor</span> <span class="token keyword">implements</span> <span class="token class-name">AntiTheft</span><span class="token punctuation">,</span>Fireproof<span class="token punctuation">,</span>Waterproof <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">antiTheft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"防盗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fireproof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"防火"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">waterproof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"防水"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>ItcastSafetyDoor（类）：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItcastSafetyDoor</span> <span class="token keyword">implements</span> <span class="token class-name">AntiTheft</span><span class="token punctuation">,</span>Fireproof <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">antiTheft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"防盗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fireproof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"防火"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-5、迪米特法则"><a href="#3-5、迪米特法则" class="headerlink" title="3.5、迪米特法则"></a>3.5、迪米特法则</h4><p>迪米特法则又叫最少知识原则。</p><p>只和你的直接朋友交谈，不跟“陌生人”说话（Talk only to your immediate friends and not to strangers）。</p><p>其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发 该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p><p>迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象 的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。</p><p>一个例子来理解迪米特法则</p><p><strong>【例】</strong>明星与经纪人的关系实例</p><p>明星由于全身心投入艺术，所以许多日常事务由经纪人负责处理，如和粉丝的见面会，和媒体公司的业 务洽淡等。这里的经纪人是明星的朋友，而粉丝和媒体公司是陌生人，所以适合使用迪米特法则。</p><p>类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220529154432396.png"></p><p><strong>代码如下：</strong></p><p><strong>明星类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Star</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Star</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>粉丝类（Fans）</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fans</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Fans</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>媒体公司类（Company）</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Company</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>经纪人类：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Agent</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Star star<span class="token punctuation">;</span>    <span class="token keyword">private</span> Fans fans<span class="token punctuation">;</span>    <span class="token keyword">private</span> Company company<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStar</span><span class="token punctuation">(</span>Star star<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>star <span class="token operator">=</span> star<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFans</span><span class="token punctuation">(</span>Fans fans<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fans <span class="token operator">=</span> fans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCompany</span><span class="token punctuation">(</span>Company company<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>company <span class="token operator">=</span> company<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">meeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fans<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"与明星"</span> <span class="token operator">+</span> star<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> "见面        了。"<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">business</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>company<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"与明星"</span> <span class="token operator">+</span> star<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>        <span class="token string">"洽淡业务。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-6-合成复用原则"><a href="#3-6-合成复用原则" class="headerlink" title="3.6 合成复用原则"></a>3.6 合成复用原则</h4><p>合成复用原则是指：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。</p><p>通常类的复用分为继承复用和合成复用两种。</p><p>继承复用虽然有简单和易实现的优点，但它也存在以下缺点：</p><ol><li><p>继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所 以这种复用又称为“白箱”复用。</p></li><li><p>子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展 与维护。</p></li></ol><p>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已 有对象的功能，它有以下优点：</p><ol><li><p>它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱” 复用。</p></li><li><p>对象间的耦合度低。可以在类的成员位置声明抽象。</p></li><li><p>复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的 对象。</p></li></ol><p><strong>一个例子来理解合成复用原则</strong></p><p><strong>【例】</strong>汽车分类管理程序</p><p>汽车按“动力源”划分可分为汽油汽车、电动汽车等；按“颜色”划分可分为白色汽车、黑色汽车和红色 汽车等。如果同时考虑这两种分类，其组合就很多。类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220529170851538.png"></p><p>从上面类图可以看到使用继承复用产生了很多子类，如果现在又有新的动力源或者新的颜色的话， 就需要再定义新的类。我们试着将继承复用改为聚合复用看一下。</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220529171122632.png"></p><h2 id="4、创建者模式"><a href="#4、创建者模式" class="headerlink" title="4、创建者模式"></a>4、创建者模式</h2><p>创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。</p><p>这样可以降低系统的耦合度，使用者不需要关注对象的创建细节。</p><p>创建型模式分为：</p><ul><li>单例模式 </li><li>工厂方法模式 </li><li>抽象工程模式 </li><li>原型模式 </li><li>建造者模式</li></ul><h3 id="4-1-单例设计模式"><a href="#4-1-单例设计模式" class="headerlink" title="4.1 单例设计模式"></a>4.1 单例设计模式</h3><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创 建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供 了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><h4 id="4-1-1-单例模式的结构"><a href="#4-1-1-单例模式的结构" class="headerlink" title="4.1.1 单例模式的结构"></a>4.1.1 单例模式的结构</h4><p>单例模式的主要有以下角色：</p><ul><li>单例类。只能创建一个实例的类</li><li>访问类。使用单例类</li></ul><h4 id="4-1-2-单例模式的实现"><a href="#4-1-2-单例模式的实现" class="headerlink" title="4.1.2 单例模式的实现"></a>4.1.2 单例模式的实现</h4><blockquote><p>单例设计模式分类两种：</p><p>​    饿汉式：类加载就会导致该单实例对象被创建</p><p>​    懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建</p></blockquote><ol><li>饿汉式-方式1（静态变量方式）</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 饿汉式*         静态变量创建类的对象*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在成员位置创建该类的对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><font color="red">说明：</font></p><p>该方式在成员位置声明Singleton类型的静态变量，并创建Singleton类的对象instance。 instance对象是随着类的加载而创建的。如果该对象足够大的话，而一直没有使用就会造成内存的浪费。</p><ol start="2"><li>饿汉式-方式2（静态代码块方式）</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 懒汉式*         线程不安全*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在成员位置创建该类的对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><font color="red">说明：</font></p><p>该方式在成员位置声明Singleton类型的静态变量，而对象的创建是在静态代码块中，也是对着 类的加载而创建。所以和饿汉式的方式1基本上一样，当然该方式也存在内存浪费问题。</p><ol start="3"><li>懒汉式-方式1（线程不安全）</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 懒汉式*         线程不安全*         加锁*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在成员位置创建该类的对象    </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><font color="red">说明：</font></p><p>从上面代码我们可以看出该方式在成员位置声明Singleton类型的静态变量，并没有进行对象的 赋值操作，那么什么时候赋值的呢？当调用getInstance()方法获取Singleton类的对象的时 候才创建Singleton类的对象，这样就实现了懒加载的效果。但是，如果是多线程环境，会出现 线程安全问题。</p><ol start="4"><li>懒汉式-方式3（双重检查锁）</li></ol><p>讨论一下懒汉模式中加锁的问题，对于 getInstance() 方法来说，绝大部分的操作都是读 操作，读操作是线程安全的，所以我们没必让每个线程必须持有锁才能调用该方法，我们需要调整 加锁的时机。由此也产生了一种新的实现模式：双重检查锁模式</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 双重检查方式*/</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> Singleton instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对外提供静态方法获取该对象</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//第一次判断，如果instance不为null，不进入抢锁阶段，直接返回实例</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//抢到锁之后再次判断是否为null</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><font color="red">小结：</font></p><p>添加 volatile 关键字之后的双重检查锁模式是一种比较好的单例实现模式，能够保证在多线程 的情况下线程安全也不会有性能问题。</p><ol start="5"><li>懒汉式-方式4（静态内部类方式）</li></ol><p>静态内部类单例模式中实例由内部类创建，由于 JVM 在加载外部类的过程中, 是不会加载静态 内部类的, 只有内部类的属性&#x2F;方法被调用时才会被加载, 并初始化其静态属性。静态属性由于被 static 修饰，保证只被实例化一次，并且严格保证实例化顺序。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 静态内部类方式*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SingletonHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><font color="red">说明：</font></p><p>​        第一次加载Singleton类时不会去初始化INSTANCE，只有第一次调用getInstance，虚拟机加 载SingletonHolder 并初始化INSTANCE，这样不仅能确保线程安全，也能保证 Singleton 类的唯一性。</p><p><font color="red">小结：</font></p><p>​        静态内部类单例模式是一种优秀的单例模式，是开源项目中比较常用的一种单例模式。在没有加任 何锁的情况下，保证了多线程下的安全，并且没有任何性能影响和空间的浪费。</p><ol start="6"><li>枚举方式</li></ol><p>枚举类实现单例模式是极力推荐的单例实现模式，因为枚举类型是线程安全的，并且只会装载一 次，设计者充分的利用了枚举的这个特性来实现单例模式，枚举的写法非常简单，而且枚举类型是 所用单例实现中唯一一种不会被破坏的单例实现模式。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 枚举方式*/</span><span class="token keyword">public</span> <span class="token keyword">enum</span> Singleton <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><font color="red">说明：</font></p><p>枚举方式属于饿汉式方式。</p><h4 id="4-1-3-存在的问题"><a href="#4-1-3-存在的问题" class="headerlink" title="4.1.3 存在的问题"></a>4.1.3 存在的问题</h4><h5 id="4-1-3-1-问题演示"><a href="#4-1-3-1-问题演示" class="headerlink" title="4.1.3.1 问题演示"></a>4.1.3.1 问题演示</h5><p>破坏单例模式：</p><p>使上面定义的单例类（Singleton）可以创建多个对象，枚举方式除外。有两种方式，分别是序列化 和反射。</p><ul><li><p>序列化反序列化</p><p><strong>Singleton类：</strong></p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SingletonHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Test类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//往文件中写对象</span>        <span class="token comment" spellcheck="true">//writeObject2File();</span>        <span class="token comment" spellcheck="true">//从文件中读取对象</span>        Singleton s1 <span class="token operator">=</span> <span class="token function">readObjectFromFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singleton s2 <span class="token operator">=</span> <span class="token function">readObjectFromFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断两个反序列化后的对象是否是同一个对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton <span class="token function">readObjectFromFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象输入流对象</span>    ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token function">newFileInputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Think\\Desktop\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一个读取Singleton对象</span>        Singleton instance <span class="token operator">=</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeObject2File</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取Singleton类的对象</span>        Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建对象输出流</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token function">newFileOutputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Think\\Desktop\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将instance对象写出到文件中</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>上面代码运行结果是 false ，表明序列化和反序列化已经破坏了单例设计模式。</p></blockquote><ul><li><p><strong>反射</strong></p><p><strong>Singleton类：</strong></p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> Singleton instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> instance<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Test类：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取Singleton类的字节码对象</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取Singleton类的私有无参构造方法对象</span>        Constructor constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取消访问检查</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建Singleton类的对象s1</span>        Singleton s1 <span class="token operator">=</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建Singleton类的对象s2</span>        Singleton s2 <span class="token operator">=</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断通过反射创建的两个Singleton对象是否是同一个对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>上面代码运行结果是 false ，表明序列化和反序列化已经破坏了单例设计模式</p></blockquote><blockquote><p><font color="red">注意：</font>枚举方式不会出现这两个问题。</p></blockquote><h5 id="4-1-3-2-问题的解决"><a href="#4-1-3-2-问题的解决" class="headerlink" title="4.1.3.2 问题的解决"></a>4.1.3.2 问题的解决</h5><ul><li><p>序列化、反序列方式破坏单例模式的解决方法</p><p>在Singleton类中添加 readResolve() 方法，在反序列化时被反射调用，如果定义了这个方法， 就返回这个方法的值，如果没有定义，则返回新new出来的对象。</p><p><strong>Singleton类：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SingletonHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 下面是为了解决序列化反序列化破解单例模式    */</span>    <span class="token keyword">private</span> Object <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SingletonHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p><strong>源码解析：</strong></p><p>ObjectInputStream类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> Object <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span>ClassNotFoundException<span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// if nested read, passHandle contains handle of enclosing object</span>    <span class="token keyword">int</span> outerHandle <span class="token operator">=</span> passHandle<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Object obj <span class="token operator">=</span> <span class="token function">readObject0</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重点查看readObject0方法</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">private</span> Object <span class="token function">readObject0</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> unshared<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>tc<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">case</span> TC_OBJECT<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token function">checkResolve</span><span class="token punctuation">(</span><span class="token function">readOrdinaryObject</span><span class="token punctuation">(</span>unshared<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重点查看readOrdinaryObject方法</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        depth<span class="token operator">--</span><span class="token punctuation">;</span>        bin<span class="token punctuation">.</span><span class="token function">setBlockDataMode</span><span class="token punctuation">(</span>oldMode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> Object <span class="token function">readOrdinaryObject</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> unshared<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//isInstantiable 返回true，执行 desc.newInstance()，通过反射创建新的单例类，</span>        obj <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">isInstantiable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> desc<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 在Singleton类中添加 readResolve 方法后 desc.hasReadResolveMethod()方法执行结果为true</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> handles<span class="token punctuation">.</span><span class="token function">lookupException</span><span class="token punctuation">(</span>passHandle<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>desc<span class="token punctuation">.</span><span class="token function">hasReadResolveMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过反射调用 Singleton 类中的 readResolve 方法，将返回值赋值给rep变量</span>    <span class="token comment" spellcheck="true">// 这样多次调用ObjectInputStream类中的readObject方法，继而就会调用我们定义的readResolve方法，所以返回的是同一个对象。</span>        Object rep <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">invokeReadResolve</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>反射方式破解单例的解决方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            反射破解单例模式需要添加的代码        */</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> Singleton instance<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><font color="red">说明:</font></p><p>这种方式比较好理解。当通过反射方式调用构造方法进行创建创建时，直接抛异常。不运行此中操作。</p><h4 id="4-1-4-JDK源码解析-Runtime类"><a href="#4-1-4-JDK源码解析-Runtime类" class="headerlink" title="4.1.4 JDK源码解析-Runtime类"></a>4.1.4 JDK源码解析-Runtime类</h4><p>Runtime类就是使用的单例设计模式。</p><ol><li>通过源代码查看使用的是哪儿种单例模式</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Runtime</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Runtime currentRuntime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Returns the runtime object associated with the current Javaapplication.     * Most of the methods of class &lt;code>Runtime&lt;/code> are instance     * methods and must be invoked with respect to the current runtimeobject.     *     * @return the &lt;code>Runtime&lt;/code> object associated with thecurrent     * Java application.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Runtime <span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> currentRuntime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** Don't let anyone else instantiate this class */</span>    <span class="token keyword">private</span> <span class="token function">Runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>从上面源代码中可以看出Runtime类使用的是恶汉式（静态属性）方式来实现单例模式的。</p><ol start="2"><li>使用Runtime类中的方法</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuntimeDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取Runtime类对象</span>        Runtime runtime <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回Java 虚拟机中的内存总量。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回Java 虚拟机试图使用的最大内存量。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个新的进程执行指定的字符串命令，返回进程对象</span>        Process process <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"ipconfig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取命令执行后的结果，通过输入流获取</span>        InputStream inputStream <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4、创建型模式"><a href="#4、创建型模式" class="headerlink" title="4、创建型模式"></a>4、创建型模式</h2><h3 id="4-2-工厂模式"><a href="#4-2-工厂模式" class="headerlink" title="4.2 工厂模式"></a>4.2 工厂模式</h3><h4 id="4-2-1-概述"><a href="#4-2-1-概述" class="headerlink" title="4.2.1 概述"></a>4.2.1 概述</h4><p>需求：设计一个咖啡店点餐系统。</p><p>设计一个咖啡类（Coffee），并定义其两个子类（美式咖啡【AmericanCoffee】和拿铁咖啡 【LatteCoffee】）；再设计一个咖啡店类（CoffeeStore），咖啡店具有点咖啡的功能。</p><p>具体类的设计如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220531203539953.png"></p><p>在java中，万物皆对象，这些对象都需要创建，如果创建的时候直接new该对象，就会对该对象耦合严 重，假如我们要更换对象，所有new对象的地方都需要修改一遍，这显然违背了软件设计的开闭原则。 如果我们使用工厂来生产对象，我们就只和工厂打交道就可以了，彻底和对象解耦，如果要更换对象， 直接在工厂里更换该对象即可，达到了与对象解耦的目的；所以说，工厂模式最大的优点就是：<strong>解耦。</strong></p><p>在本教程中会介绍三种工厂的使用</p><ul><li>简单工厂模式（不属于GOF的23种经典设计模式）</li><li>工厂方法模式</li><li>抽象工厂模式</li></ul><h4 id="4-2-2-简单工厂模式"><a href="#4-2-2-简单工厂模式" class="headerlink" title="4.2.2 简单工厂模式"></a>4.2.2 简单工厂模式</h4><p>简单工厂不是一种设计模式，反而比较像是一种编程习惯。</p><h5 id="4-2-2-1-结构"><a href="#4-2-2-1-结构" class="headerlink" title="4.2.2.1 结构"></a>4.2.2.1 结构</h5><p>简单工厂包含如下角色：</p><ul><li>抽象产品 ：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品 ：实现或者继承抽象产品的子类</li><li>具体工厂 ：提供了创建产品的方法，调用者通过该方法来获取产品。</li></ul><h5 id="4-2-2-2-实现"><a href="#4-2-2-2-实现" class="headerlink" title="4.2.2.2 实现"></a>4.2.2.2 实现</h5><p>现在使用简单工厂对上面案例进行改进，类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220531210545935.png"></p><p>工厂类代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleCoffeeFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Coffee <span class="token function">createCoffee</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Coffee coffee <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"americano"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            coffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AmericanoCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"latte"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            coffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LatteCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> coffee<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>工厂（factory）处理创建对象的细节，一旦有了SimpleCoffeeFactory，CoffeeStore类中的 orderCoffee()就变成此对象的客户，后期如果需要Coffee对象直接从工厂中获取即可。这样也就 解除了和Coffee实现类的耦合，同时又产生了新的耦合，CoffeeStore对象和 SimpleCoffeeFactory工厂对象的耦合，工厂对象和商品对象的耦合。</p><p>后期如果再加新品种的咖啡，我们势必要需求修改SimpleCoffeeFactory的代码，违反了开闭原 则。工厂类的客户端可能有很多，比如创建美团外卖等，这样只需要修改工厂类的代码，省去其他的修 改操作。</p><h5 id="4-2-2-4-优缺点"><a href="#4-2-2-4-优缺点" class="headerlink" title="4.2.2.4 优缺点"></a>4.2.2.4 优缺点</h5><p><strong>优点：</strong></p><p>封装了创建对象的过程，可以通过参数直接获取对象。把对象的创建和业务逻辑层分开，这样以后就避 免了修改客户代码，如果要实现新产品直接修改工厂类，而不需要在原代码中修改，这样就降低了客户 代码修改的可能性，更加容易扩展。</p><p><strong>缺点：</strong></p><p>增加新产品时还是需要修改工厂类的代码，违背了“开闭原则”。</p><h5 id="4-2-2-3-扩展"><a href="#4-2-2-3-扩展" class="headerlink" title="4.2.2.3 扩展"></a>4.2.2.3 扩展</h5><p><strong>静态工厂</strong></p><p>在开发中也有一部分人将工厂类中的创建对象的功能定义为静态的，这个就是静态工厂模式，它也不是 23种设计模式中的。代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleCoffeeFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Coffee <span class="token function">createCoffee</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Coffee coffee <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"americano"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            coffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AmericanoCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"latte"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            coffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LatteCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> coffe<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-2-3-工厂方法模式"><a href="#4-2-3-工厂方法模式" class="headerlink" title="4.2.3 工厂方法模式"></a>4.2.3 工厂方法模式</h4><p>针对上例中的缺点，使用工厂方法模式就可以完美的解决，完全遵循开闭原则。</p><h5 id="4-2-3-1-概念"><a href="#4-2-3-1-概念" class="headerlink" title="4.2.3.1 概念"></a>4.2.3.1 概念</h5><p>定义一个用于创建对象的接口，让子类决定实例化哪个产品类对象。工厂方法使一个产品类的实例化延 迟到其工厂的子类。</p><h5 id="4-2-3-2-结构"><a href="#4-2-3-2-结构" class="headerlink" title="4.2.3.2 结构"></a>4.2.3.2 结构</h5><p>工厂方法模式的主要角色：</p><ul><li><p>抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂 方法来创建产品。</p></li><li><p>具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</p></li><li><p>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。</p></li><li><p>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同 具体工厂之间一一对应。</p></li></ul><h5 id="4-2-3-3-实现"><a href="#4-2-3-3-实现" class="headerlink" title="4.2.3.3 实现"></a>4.2.3.3 实现</h5><p>使用工厂方法模式对上例进行改进，类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220614113530001.png"></p><p>代码如下：</p><p>抽象工厂：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CoffeeFactory</span> <span class="token punctuation">{</span>    Coffee <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>具体工厂：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LatteCoffeeFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CoffeeFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Coffee <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LatteCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AmericanCoffeeFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CoffeeFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Coffee <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AmericanCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>咖啡店类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeStore</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> CoffeeFactory factory<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">CoffeeStore</span><span class="token punctuation">(</span>CoffeeFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> Coffee <span class="token function">orderCoffee</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Coffee coffee <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coffee<span class="token punctuation">.</span><span class="token function">addMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coffee<span class="token punctuation">.</span><span class="token function">addsugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> coffee<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从以上的编写的代码可以看到，要增加产品类时也要相应地增加工厂类，不需要修改工厂类的代码了， 这样就解决了简单工厂模式的缺点。</p><p>工厂方法模式是简单工厂模式的进一步抽象。由于使用了多态性，工厂方法模式保持了简单工厂模式的 优点，而且克服了它的缺点。</p><h5 id="4-2-3-4-优缺点"><a href="#4-2-3-4-优缺点" class="headerlink" title="4.2.3.4 优缺点"></a>4.2.3.4 优缺点</h5><p><strong>优点：</strong></p><ul><li>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；</li><li>在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改， 满足开闭原则；</li></ul><p><strong>缺点：</strong></p><ul><li>每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。</li></ul><h4 id="4-2-4-抽象工厂模式"><a href="#4-2-4-抽象工厂模式" class="headerlink" title="4.2.4 抽象工厂模式"></a>4.2.4 抽象工厂模式</h4><p>前面介绍的工厂方法模式中考虑的是一类产品的生产，如畜牧场只养动物、电视机厂只生产电视机、传 智播客只培养计算机软件专业的学生等。</p><p>这些工厂只生产同种类产品，同种类产品称为同等级产品，也就是说：工厂方法模式只考虑生产同等级 的产品，但是在现实生活中许多工厂是综合型的工厂，能生产多等级（种类） 的产品，如电器厂既生 产电视机又生产洗衣机或空调，大学既有软件专业又有生物专业等。</p><p>本节要介绍的抽象工厂模式将考虑多等级产品的生产，将同一个具体工厂所生产的位于不同等级的一组 产品称为一个产品族，下图所示横轴是产品等级，也就是同一类产品；纵轴是产品族，也就是同一品牌 的产品，同一品牌的产品产自同一个工厂。</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220614152045184.png"></p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220614152640293.png"></p><h5 id="4-2-4-1-概念"><a href="#4-2-4-1-概念" class="headerlink" title="4.2.4.1 概念"></a>4.2.4.1 概念</h5><p>是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就 能得到同族的不同等级的产品的模式结构。</p><p>抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生 产多个等级的产品。</p><h5 id="4-2-4-2-结构"><a href="#4-2-4-2-结构" class="headerlink" title="4.2.4.2 结构"></a>4.2.4.2 结构</h5><p>抽象工厂模式的主要角色如下：</p><ul><li><p>抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法，可以 创建多个不同等级的产品。</p></li><li><p>具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创 建。</p></li><li><p>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多 个抽象产品。</p></li><li><p>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它 同具体工厂之间是多对一的关系。</p></li></ul><h5 id="4-2-4-2-实现"><a href="#4-2-4-2-实现" class="headerlink" title="4.2.4.2 实现"></a>4.2.4.2 实现</h5><p>现咖啡店业务发生改变，不仅要生产咖啡还要生产甜点，如提拉米苏、抹茶慕斯等，要是按照工厂方法 模式，需要定义提拉米苏类、抹茶慕斯类、提拉米苏工厂、抹茶慕斯工厂、甜点工厂类，很容易发生类 爆炸情况。其中拿铁咖啡、美式咖啡是一个产品等级，都是咖啡；提拉米苏、抹茶慕斯也是一个产品等 级；拿铁咖啡和提拉米苏是同一产品族（也就是都属于意大利风味），美式咖啡和抹茶慕斯是同一产品 族（也就是都属于美式风味）。所以这个案例可以使用抽象工厂模式实现。类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220615153941089.png"></p><p>代码如下：</p><p>抽象工厂：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DessertFactory</span> <span class="token punctuation">{</span>    Coffee <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Dessert <span class="token function">createDessert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>具体工厂：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//美式甜点工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AmericanDessertFactory</span> <span class="token keyword">implements</span> <span class="token class-name">DessertFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Coffee <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AmericanCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> Dessert <span class="token function">createDessert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MatchaMousse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//意大利风味甜点工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItalyDessertFactory</span> <span class="token keyword">implements</span> <span class="token class-name">DessertFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Coffee <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LatteCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> Dessert <span class="token function">createDessert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tiramisu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果要加同一个产品族的话，只需要再加一个对应的工厂类即可，不需要修改其他的类。</p><h5 id="4-2-4-3-优缺点"><a href="#4-2-4-3-优缺点" class="headerlink" title="4.2.4.3 优缺点"></a>4.2.4.3 优缺点</h5><p><strong>优点：</strong></p><p>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p><p><strong>缺点：</strong></p><p>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。</p><h5 id="4-2-4-4-使用场景"><a href="#4-2-4-4-使用场景" class="headerlink" title="4.2.4.4 使用场景"></a>4.2.4.4 使用场景</h5><ul><li>当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空 调等。</li><li>系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋。</li><li>系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结 构。</li></ul><h4 id="4-2-5-模式扩展"><a href="#4-2-5-模式扩展" class="headerlink" title="4.2.5 模式扩展"></a>4.2.5 模式扩展</h4><p><strong>简单工厂+配置文件解除耦合</strong></p><p>可以通过工厂模式+配置文件的方式解除工厂对象和产品对象的耦合。在工厂类中加载配置文件中的全 类名，并创建对象进行存储，客户端如果需要对象，直接进行获取即可。</p><p>第一步：定义配置文件</p><p>使用properties文件作为配置文件，名称为bean.properties</p><pre class=" language-bash"><code class="language-bash">american<span class="token operator">=</span>com.itheima.pattern.factory.config_factory.AmericanCoffeelatte<span class="token operator">=</span>com.itheima.pattern.factory.config_factory.LatteCoffee</code></pre><p>第二步：改进工厂类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Coffee<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Properties p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream is <span class="token operator">=</span> CoffeeFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"bean.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            p<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//遍历Properties集合对象</span>            Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> keys <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Object key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//根据键获取值（全类名）</span>                String className <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取字节码对象</span>                Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>                Coffee obj <span class="token operator">=</span> <span class="token punctuation">(</span>Coffee<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Coffee <span class="token function">createCoffee</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>静态成员变量用来存储创建的对象（键存储的是名称，值存储的是对应的对象），而读取配置文件以及 创建对象写在静态代码块中，目的就是只需要执行一次。</p><h4 id="4-2-6-JDK源码解析-Collection-iterator方法"><a href="#4-2-6-JDK源码解析-Collection-iterator方法" class="headerlink" title="4.2.6 JDK源码解析-Collection.iterator方法"></a>4.2.6 JDK源码解析-Collection.iterator方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"令狐冲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"风清扬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"任我行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取迭代器对象</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用迭代器遍历</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String ele <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用迭代器遍历集合，获取集合中的元素。而单列集合获取迭代器的方法 就使用到了工厂方法模式。我们看通过类图看看结构：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220615170848649.png"></p><p>Collection接口是抽象工厂类，ArrayList是具体的工厂类；Iterator接口是抽象商品类， ArrayList类中的Iter内部类是具体的商品类。在具体的工厂类中iterator()方法创建具体的商品 类的对象。</p><blockquote><p>另：</p><p>1,DateForamt类中的getInstance()方法使用的是工厂模式；</p><p>2,Calendar类中的getInstance()方法使用的是工厂模式；</p></blockquote><h3 id="4-3-原型模式"><a href="#4-3-原型模式" class="headerlink" title="4.3 原型模式"></a>4.3 原型模式</h3><h4 id="4-3-1-概述"><a href="#4-3-1-概述" class="headerlink" title="4.3.1 概述"></a>4.3.1 概述</h4><p>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。</p><h4 id="4-3-2-结构"><a href="#4-3-2-结构" class="headerlink" title="4.3.2 结构"></a>4.3.2 结构</h4><p>原型模式包含如下角色：</p><ul><li>抽象原型类：规定了具体原型对象必须实现的的 clone() 方法。</li><li>具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。</li><li>访问类：使用具体原型类中的 clone() 方法来复制新的对象。</li></ul><p>接口类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220615172539866.png"></p><h4 id="4-3-3-实现"><a href="#4-3-3-实现" class="headerlink" title="4.3.3 实现"></a>4.3.3 实现</h4><p>原型模式的克隆分为浅克隆和深克隆。</p><blockquote><p>浅克隆：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原 有属性所指向的对象的内存地址。</p><p>深克隆：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。</p></blockquote><p>Java中的Object类中提供了 clone() 方法来实现浅克隆。 Cloneable 接口是上面的类图中的抽 象原型类，而实现了Cloneable接口的子实现类就是具体的原型类。代码如下：</p><p><strong>Realizetype（具体的原型类）：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Realizetype</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Realizetype</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体的原型对象创建完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Realizetype <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体原型复制成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Realizetype<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>PrototypeTest（测试访问类）：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrototypeTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException<span class="token punctuation">{</span>        Realizetype r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Realizetype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Realizetype r2 <span class="token operator">=</span> r1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象r1和r2是同一个对象？"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>r1 <span class="token operator">==</span> r2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-3-4-案例"><a href="#4-3-4-案例" class="headerlink" title="4.3.4 案例"></a>4.3.4 案例</h4><p><strong>用原型模式生成“三好学生”奖状</strong></p><p>同一学校的“三好学生”奖状除了获奖人姓名不同，其他都相同，可以使用原型模式复制多个“三好学 生”奖状出来，然后在修改奖状上的名字即可。</p><p>类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220617164124604.png"></p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//奖状类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Citation</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"同学：在2020学年第一学期中表现优秀，被评为三好学生。特发此状！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Citation <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Citation<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//测试访问类</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CitationTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        Citation c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Citation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//复制奖状</span>    Citation c2 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试访问类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CitationTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException<span class="token punctuation">{</span>        Citation c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Citation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//复制奖状</span>        Citation c2 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将奖状的名字修改李四</span>        c2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-3-5-使用场景"><a href="#4-3-5-使用场景" class="headerlink" title="4.3.5 使用场景"></a>4.3.5 使用场景</h4><ul><li>对象的创建非常复杂，可以使用原型模式快捷的创建对象。</li><li>性能和安全要求比较高。</li></ul><h4 id="4-3-6-扩展（深克隆）"><a href="#4-3-6-扩展（深克隆）" class="headerlink" title="4.3.6 扩展（深克隆）"></a>4.3.6 扩展（深克隆）</h4><p>将上面的“三好学生”奖状的案例中Citation类的name属性修改为Student类型的属性。代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//奖状类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Citation</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Student stu<span class="token punctuation">;</span>        <span class="token keyword">public</span> Student <span class="token function">getStu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> stu<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStu</span><span class="token punctuation">(</span>Student stu<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stu <span class="token operator">=</span> stu<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"同学：在2020学年第一学期中表现优秀，被评为三好学生。特发此状！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Citation <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Citation<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//学生类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CitationTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>    Citation c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Citation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"西安"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c1<span class="token punctuation">.</span><span class="token function">setStu</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//复制奖状</span>    Citation c2 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取c2奖状所属学生对象</span>    Student stu1 <span class="token operator">=</span> c2<span class="token punctuation">.</span><span class="token function">getStu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stu1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断stu对象和stu1对象是否是同一个对象</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stu和stu1是同一个对象？"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>stu <span class="token operator">==</span> stu1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong><font color="red">说明：</font></strong></p><p>stu对象和stu1对象是同一个对象，就会产生将stu1对象中name属性值改为“李四”，两个 Citation（奖状）对象中显示的都是李四。这就是浅克隆的效果，对具体原型类（Citation）中的 引用类型的属性进行引用的复制。这种情况需要使用深克隆，而进行深克隆需要使用对象流。代码如 下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CitationTest1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Citation c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Citation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"西安"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">setStu</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建对象输出流对象</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Think\\Desktop\\b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将c1对象写出到文件中</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建对象出入流对象</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token function">newFileInputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Think\\Desktop\\b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取对象</span>        Citation c2 <span class="token operator">=</span> <span class="token punctuation">(</span>Citation<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取c2奖状所属学生对象</span>        Student stu1 <span class="token operator">=</span> c2<span class="token punctuation">.</span><span class="token function">getStu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断stu对象和stu1对象是否是同一个对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stu和stu1是同一个对象？"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>stu <span class="token operator">==</span> stu1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：Citation类和Student类必须实现Serializable接口，否则会抛NotSerializableException异常。</p></blockquote><h3 id="4-4-建造者模式"><a href="#4-4-建造者模式" class="headerlink" title="4.4 建造者模式"></a>4.4 建造者模式</h3><h5 id="4-4-1-概述"><a href="#4-4-1-概述" class="headerlink" title="4.4.1 概述"></a>4.4.1 概述</h5><p>将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示。</p><ul><li>分离了部件的构造(由Builder来负责)和装配(由Director负责)。 从而可以构造出复杂的对 象。这个模式适用于：某个对象的构建过程复杂的情况。</li><li>由于实现了构建和装配的解耦。不同的构建器，相同的装配，也可以做出不同的对象；相同的构建 器，不同的装配顺序也可以做出不同的对象。也就是实现了构建算法、装配算法的解耦，实现了更好的复用。</li><li>建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对 象的类型就可以得到该对象，而无须知道其内部的具体构造细节。</li></ul><h5 id="4-4-2-结构"><a href="#4-4-2-结构" class="headerlink" title="4.4.2 结构"></a>4.4.2 结构</h5><p>建造者（Builder）模式包含如下角色：</p><ul><li>抽象建造者类（Builder）：这个接口规定要实现复杂对象的那些部分的创建，并不涉及具体的 部件对象的创建。</li><li>具体建造者类（ConcreteBuilder）：实现 Builder 接口，完成复杂产品的各个部件的具体 创建方法。在构造过程完成后，提供产品的实例。</li><li>产品类（Product）：要创建的复杂对象。</li><li>指挥者类（Director）：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产 品的信息，只负责保证对象各部分完整创建或按某种顺序创建。</li></ul><p>类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220619161526768.png"></p><h5 id="4-4-3-实例"><a href="#4-4-3-实例" class="headerlink" title="4.4.3 实例"></a>4.4.3 实例</h5><p><strong>创建共享单车</strong></p><p>生产自行车是一个复杂的过程，它包含了车架，车座等组件的生产。而车架又有碳纤维，铝合金等材质 的，车座有橡胶，真皮等材质。对于自行车的生产就可以使用建造者模式。</p><p>这里Bike是产品，包含车架，车座等组件；Builder是抽象建造者，MobikeBuilder 和 OfoBuilder是具体的建造者；Director是指挥者。类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220619162638431.png"></p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自行车类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bike</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String frame<span class="token punctuation">;</span>    <span class="token keyword">private</span> String seat<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> frame<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFrame</span><span class="token punctuation">(</span>String frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>frame <span class="token operator">=</span> frame<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> seat<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSeat</span><span class="token punctuation">(</span>String seat<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seat <span class="token operator">=</span> seat<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 抽象 builder 类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> Bike mBike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildSeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> Bike <span class="token function">createBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//摩拜单车Builder类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MobikeBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mBike<span class="token punctuation">.</span><span class="token function">setFrame</span><span class="token punctuation">(</span><span class="token string">"铝合金车架"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildSeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mBike<span class="token punctuation">.</span><span class="token function">setSeat</span><span class="token punctuation">(</span><span class="token string">"真皮车座"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Bike <span class="token function">createBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mBike<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//ofo单车Builder类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OfoBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mBike<span class="token punctuation">.</span><span class="token function">setFrame</span><span class="token punctuation">(</span><span class="token string">"碳纤维车架"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildSeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mBike<span class="token punctuation">.</span><span class="token function">setSeat</span><span class="token punctuation">(</span><span class="token string">"橡胶车座"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Bike <span class="token function">createBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mBike<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//指挥者类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Builder mBuilder<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Director</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mBuilder <span class="token operator">=</span> builder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Bike <span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mBuilder<span class="token punctuation">.</span><span class="token function">buildFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mBuilder<span class="token punctuation">.</span><span class="token function">buildSeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mBuilder<span class="token punctuation">.</span><span class="token function">createBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">showBike</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showBike</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MobikeBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showBike</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Director director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>        Bike bike <span class="token operator">=</span> director<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bike<span class="token punctuation">.</span><span class="token function">getFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bike<span class="token punctuation">.</span><span class="token function">getSeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意：</strong></p><p>上面示例是 Builder模式的常规用法，指挥者类 Director 在建造者模式中具有很重要的作用，它 用于指导具体构建者如何构建产品，控制调用先后次序，并向调用者返回完整的产品类，但是有些情况 下需要简化系统结构，可以把指挥者类和抽象建造者进行结合</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 抽象 builder 类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> Bike mBike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildSeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> Bike <span class="token function">createBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Bike <span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">BuildSeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>说明：</strong></p><p>这样做确实简化了系统结构，但同时也加重了抽象建造者类的职责，也不是太符合单一职责原则，如果 construct() 过于复杂，建议还是封装到 Director 中。</p><h5 id="4-4-4-优缺点"><a href="#4-4-4-优缺点" class="headerlink" title="4.4.4 优缺点"></a>4.4.4 优缺点</h5><p><strong>优点：</strong></p><ul><li>建造者模式的封装性很好。使用建造者模式可以有效的封装变化，在使用建造者模式的场景中，一 般产品类和建造者类是比较稳定的，因此，将主要的业务逻辑封装在指挥者类中对整体而言可以取 得比较好的稳定性。</li><li>在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得 相同的创建过程可以创建不同的产品对象。</li><li>可以更加精细地控制产品的创建过程 。将复杂产品的创建步骤分解在不同的方法中，使得创建过 程更加清晰，也更方便使用程序来控制创建过程。</li><li>建造者模式很容易进行扩展。如果有新的需求，通过实现一个新的建造者类就可以完成，基本上不 用修改之前已经测试通过的代码，因此也就不会对原有功能引入风险。符合开闭原则。</li></ul><p><strong>缺点：</strong></p><p>造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适 合使用建造者模式，因此其使用范围受到一定的限制。</p><h5 id="4-4-5-使用场景"><a href="#4-4-5-使用场景" class="headerlink" title="4.4.5 使用场景"></a>4.4.5 使用场景</h5><p>建造者（Builder）模式创建的是复杂对象，其产品的各个部分经常面临着剧烈的变化，但将它们组合 在一起的算法却相对稳定，所以它通常在以下场合使用。</p><ul><li>创建的对象较复杂，由多个部件构成，各部件面临着复杂的变化，但构件间的建造顺序是稳定的。</li><li>创建复杂对象的算法独立于该对象的组成部分以及它们的装配方式，即产品的构建过程和最终的表 示是独立的。</li></ul><h5 id="4-4-6-模式扩展"><a href="#4-4-6-模式扩展" class="headerlink" title="4.4.6 模式扩展"></a>4.4.6 模式扩展</h5><p>建造者模式除了上面的用途外，在开发中还有一个常用的使用方式，就是当一个类构造器需要传入很多 参数时，如果创建这个类的实例，代码可读性会非常差，而且很容易引入错误，此时就可以利用建造者 模式进行重构。</p><p>重构前代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String cpu<span class="token punctuation">;</span>    <span class="token keyword">private</span> String screen<span class="token punctuation">;</span>    <span class="token keyword">private</span> String memory<span class="token punctuation">;</span>    <span class="token keyword">private</span> String mainboard<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Phone</span><span class="token punctuation">(</span>String cpu<span class="token punctuation">,</span> String screen<span class="token punctuation">,</span> String memory<span class="token punctuation">,</span> String mainboard<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>screen <span class="token operator">=</span> screen<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>memory <span class="token operator">=</span> memory<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mainboard <span class="token operator">=</span> mainboard<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cpu<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCpu</span><span class="token punctuation">(</span>String cpu<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> screen<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScreen</span><span class="token punctuation">(</span>String screen<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>screen <span class="token operator">=</span> screen<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> memory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMemory</span><span class="token punctuation">(</span>String memory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>memory <span class="token operator">=</span> memory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMainboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mainboard<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMainboard</span><span class="token punctuation">(</span>String mainboard<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mainboard <span class="token operator">=</span> mainboard<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Phone{"</span> <span class="token operator">+</span>            <span class="token string">"cpu='"</span> <span class="token operator">+</span> cpu <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">", screen='"</span> <span class="token operator">+</span> screen <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">", memory='"</span> <span class="token operator">+</span> memory <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">", mainboard='"</span> <span class="token operator">+</span> mainboard <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>        <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构建Phone对象</span>        Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token string">"intel"</span><span class="token punctuation">,</span><span class="token string">"三星屏幕"</span><span class="token punctuation">,</span><span class="token string">"金士顿"</span><span class="token punctuation">,</span><span class="token string">"华硕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面在客户端代码中构建Phone对象，传递了四个参数，如果参数更多呢？代码的可读性及使用的成本 就是比较高。</p><p>重构后代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String cpu<span class="token punctuation">;</span>    <span class="token keyword">private</span> String screen<span class="token punctuation">;</span>    <span class="token keyword">private</span> String memory<span class="token punctuation">;</span>    <span class="token keyword">private</span> String mainboard<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Phone</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cpu <span class="token operator">=</span> builder<span class="token punctuation">.</span>cpu<span class="token punctuation">;</span>        screen <span class="token operator">=</span> builder<span class="token punctuation">.</span>screen<span class="token punctuation">;</span>        memory <span class="token operator">=</span> builder<span class="token punctuation">.</span>memory<span class="token punctuation">;</span>        mainboard <span class="token operator">=</span> builder<span class="token punctuation">.</span>mainboard<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String cpu<span class="token punctuation">;</span>        <span class="token keyword">private</span> String screen<span class="token punctuation">;</span>        <span class="token keyword">private</span> String memory<span class="token punctuation">;</span>        <span class="token keyword">private</span> String mainboard<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">cpu</span><span class="token punctuation">(</span>String val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cpu <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Builder <span class="token function">screen</span><span class="token punctuation">(</span>String val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        screen <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Builder <span class="token function">memory</span><span class="token punctuation">(</span>String val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        memory <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Builder <span class="token function">mainboard</span><span class="token punctuation">(</span>String val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mainboard <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Phone <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Phone{"</span> <span class="token operator">+</span>            <span class="token string">"cpu='"</span> <span class="token operator">+</span> cpu <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">", screen='"</span> <span class="token operator">+</span> screen <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">", memory='"</span> <span class="token operator">+</span> memory <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">", mainboard='"</span> <span class="token operator">+</span> mainboard <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">cpu</span><span class="token punctuation">(</span><span class="token string">"intel"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">mainboard</span><span class="token punctuation">(</span><span class="token string">"华硕"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">memory</span><span class="token punctuation">(</span><span class="token string">"金士顿"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">screen</span><span class="token punctuation">(</span><span class="token string">"三星"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重构后的代码在使用起来更方便，某种程度上也可以提高开发效率。从软件设计上，对程序员的要求比 较高。</p><h3 id="4-5-创建者模式对比"><a href="#4-5-创建者模式对比" class="headerlink" title="4.5 创建者模式对比"></a>4.5 创建者模式对比</h3><h4 id="4-5-1-工厂方法模式VS建造者模式"><a href="#4-5-1-工厂方法模式VS建造者模式" class="headerlink" title="4.5.1 工厂方法模式VS建造者模式"></a>4.5.1 工厂方法模式VS建造者模式</h4><p>工厂方法模式注重的是整体对象的创建方式；而建造者模式注重的是部件构建的过程，意在通过一步一 步地精确构造创建出一个复杂的对象</p><p>我们举个简单例子来说明两者的差异，如要制造一个超人，如果使用工厂方法模式，直接产生出来的就 是一个力大无穷、能够飞翔、内裤外穿的超人；而如果使用建造者模式，则需要组装手、头、脚、躯干 等部分，然后再把内裤外穿，于是一个超人就诞生了。</p><h4 id="4-5-2-抽象工厂模式VS建造者模式"><a href="#4-5-2-抽象工厂模式VS建造者模式" class="headerlink" title="4.5.2 抽象工厂模式VS建造者模式"></a>4.5.2 抽象工厂模式VS建造者模式</h4><p>抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组 合，采用抽象工厂模式则是不需要关心构建过程，只关心什么产品由什么工厂生产即可。</p><p>建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品。</p><p>如果将抽象工厂模式看成汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组 装工厂，通过对部件的组装可以返回一辆完整的汽车。</p><h2 id="5，结构型模式"><a href="#5，结构型模式" class="headerlink" title="5，结构型模式"></a>5，结构型模式</h2><p>结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式， 前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象。</p><p>由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象结构型模式比类结构型 模式具有更大的灵活性。</p><p>结构型模式分为以下 7 种：</p><ul><li>代理模式</li><li>适配器模式</li><li>装饰者模式</li><li>桥接模式</li><li>外观模式</li><li>组合模式</li><li>享元模式</li></ul><h3 id="5-1-代理模式"><a href="#5-1-代理模式" class="headerlink" title="5.1 代理模式"></a>5.1 代理模式</h3><h4 id="5-1-1-概述"><a href="#5-1-1-概述" class="headerlink" title="5.1.1 概述"></a>5.1.1 概述</h4><p>由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接 引用目标对象，代理对象作为访问对象和目标对象之间的中介。</p><p>Java中的代理按照代理类生成时机不同又分为静态代理和动态代理。静态代理代理类在编译期就生 成，而动态代理代理类则是在Java运行时动态生成。动态代理又有JDK代理和CGLib代理两种。</p><h4 id="5-1-2-结构"><a href="#5-1-2-结构" class="headerlink" title="5.1.2 结构"></a>5.1.2 结构</h4><p>代理（Proxy）模式分为三种角色：</p><ul><li>抽象主题（Subject）类： 通过接口或抽象类声明真实主题和代理对象实现的业务方法。</li><li>真实主题（Real Subject）类： 实现了抽象主题中的具体业务，是代理对象所代表的真实对 象，是最终要引用的对象。</li><li>代理（Proxy）类 ： 提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访 问、控制或扩展真实主题的功能。</li></ul><h4 id="5-1-3-静态代理"><a href="#5-1-3-静态代理" class="headerlink" title="5.1.3 静态代理"></a>5.1.3 静态代理</h4><p>【例】火车站卖票</p><p>如果要买火车票的话，需要去火车站买票，坐车到火车站，排队等一系列的操作，显然比较麻烦。而火 车站在多个地方都有代售点，我们去代售点买票就方便很多了。这个例子其实就是典型的代理模式，火 车站是目标对象，代售点是代理对象。类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220619201841458.png"></p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//卖票接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SellTickets</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//火车站 火车站具有卖票功能，所以需要实现SellTickets接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrainStation</span> <span class="token keyword">implements</span> <span class="token class-name">SellTickets</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"火车站卖票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//代售点</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyPoint</span> <span class="token keyword">implements</span> <span class="token class-name">SellTickets</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> TrainStation station <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrainStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理点收取一些服务费用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        station<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ProxyPoint pp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pp<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从上面代码中可以看出测试类直接访问的是ProxyPoint类对象，也就是说ProxyPoint作为访问对象 和目标对象的中介。同时也对sell方法进行了增强（代理点收取一些服务费用）。</p><h4 id="5-1-4-JDK动态代理"><a href="#5-1-4-JDK动态代理" class="headerlink" title="5.1.4 JDK动态代理"></a>5.1.4 JDK动态代理</h4><p>接下来使用动态代理实现上面案例，先说说JDK提供的动态代理。Java中提供了一个动态代理类 Proxy，Proxy并不是我们上述所说的代理对象的类，而是提供了一个创建代理对象的静态方法 （newProxyInstance方法）来获取代理对象。</p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//卖票接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SellTickets</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//火车站 火车站具有卖票功能，所以需要实现SellTickets接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrainStation</span> <span class="token keyword">implements</span> <span class="token class-name">SellTickets</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"火车站卖票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//代理工厂，用来创建代理对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> TrainStation station <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrainStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**     * ClassLoader loader : 类加载器，用于加载代理类。可以通过目标对象获取类加载器     * Class&lt;?>[] interfaces : 代理类实现的接口的字节码对象     * InvocationHandler h : 代理对象的调用处理程序     * @return     */</span>    <span class="token keyword">public</span> SellTickets <span class="token function">getProxyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//返回代理对象即可</span>        ShellTickets proxyObject <span class="token operator">=</span> <span class="token punctuation">(</span>ShellTickets<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>            station<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            station<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">/**                     *                     * @param proxy : 代理对象。和proxyObject对象是同一个对象，在invoke方法中基本不用                     * @param method : 对接口中的方法进行封装的method对象                     * @param args : 调用方法的实际参数                     * @return : 就是方法的返回值                     * @throws Throwable                     */</span>                 <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                     <span class="token comment" spellcheck="true">//System.out.println("invoke 方法执行了");</span>                     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代售点收取一点服务费用(jdk动态代理)!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//执行目标对象的方法</span>                     Object obj <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>station<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">return</span> obj<span class="token punctuation">;</span>                 <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proxyObject<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取代理对象</span>        ProxyFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            SellTickets proxyObject <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getProxyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyObject<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><font color="red">使用了动态代理，我们思考下面问题：</font></p><ul><li>ProxyFactory是代理类吗？</li></ul><p>ProxyFactory不是代理模式中所说的代理类，而代理类是程序在运行过程中动态的在内存中生 成的类。通过阿里巴巴开源的 Java 诊断工具（Arthas【阿尔萨斯】）查看代理类的结构：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>proxy<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span>SellTickets<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>UndeclaredThrowableException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> $Proxy0 <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">SellTickets</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> Method m3<span class="token punctuation">;</span>        <span class="token keyword">public</span> $<span class="token function">Proxy0</span><span class="token punctuation">(</span>InvocationHandler invocationHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>invocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token punctuation">{</span>        m3 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.itheima.proxy.dynamic.jdk.SellTickets"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"sell"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m3<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> InvocationHandler h<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从上面的类中，我们可以看到以下几个信息：</p><blockquote><p>代理类（$Proxy0）实现了SellTickets。这也就印证了我们之前说的真实类和代理类实 现同样的接口。</p><p>代理类（$Proxy0）将我们提供了的匿名内部类对象传递给了父类。</p></blockquote><ul><li>动态代理的执行流程是什么样？</li></ul><p>下面是摘取的重点代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//程序运行过程中动态生成的代理类</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> $Proxy0 <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">SellTickets</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Method m3<span class="token punctuation">;</span>        <span class="token keyword">public</span> $<span class="token function">Proxy0</span><span class="token punctuation">(</span>InvocationHandler invocationHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>invocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token punctuation">{</span>        m3 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.itheima.proxy.dynamic.jdk.SellTickets"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"sell"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m3<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Java提供的动态代理相关类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> InvocationHandler h<span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token function">Proxy</span><span class="token punctuation">(</span>InvocationHandler h<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>h <span class="token operator">=</span> h<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//代理工厂类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> TrainStation station <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrainStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> SellTickets <span class="token function">getProxyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SellTickets sellTickets <span class="token operator">=</span> <span class="token punctuation">(</span>SellTickets<span class="token punctuation">)</span>Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>station<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    station<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                        <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理点收取一些服务费用(JDK动态代理方式)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>station<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> result<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sellTickets<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试访问类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取代理对象</span>        ProxyFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SellTickets proxyObject <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getProxyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyObject<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行流程如下：</p><ol><li>在测试类中通过代理对象调用sell()方法</li><li>根据多态的特性，执行的是代理类（$Proxy0）中的sell()方法</li><li>代理类（$Proxy0）中的sell()方法中又调用了InvocationHandler接口的子实现类对象的 invoke方法</li><li>invoke方法通过反射执行了真实对象所属类(TrainStation)中的sell()方法</li></ol><h4 id="5-1-5-CGLIB动态代理"><a href="#5-1-5-CGLIB动态代理" class="headerlink" title="5.1.5 CGLIB动态代理"></a>5.1.5 CGLIB动态代理</h4><p>同样是上面的案例，我们再次使用CGLIB代理实现。</p><p>如果没有定义SellTickets接口，只定义了TrainStation(火车站类)。很显然JDK代理是无法使用 了，因为JDK动态代理要求必须定义接口，对接口进行代理。</p><p>CGLIB是一个功能强大，高性能的代码生成包。它为没有实现接口的类提供代理，为JDK的动态代理提 供了很好的补充。</p><p>CGLIB是第三方提供的包，所以需要引入jar包的坐标：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//火车站</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrainStation</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"火车站卖票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//代理工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> TrainStation target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrainStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TrainStation <span class="token function">getProxyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建Enhancer对象，类似于JDK动态代理的Proxy类，下一步就是设置几个参数</span>        Enhancer enhancer <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置父类的字节码对象</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置回调函数</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建代理对象</span>        TrainStation obj <span class="token operator">=</span> <span class="token punctuation">(</span>TrainStation<span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        intercept方法参数说明：            o ： 代理对象            method ： 真实对象中的方法的Method实例            args ： 实际参数            methodProxy ：代理对象中的方法的method实例    */</span>    <span class="token keyword">public</span> TrainStation <span class="token function">intercept</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span>MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理点收取一些服务费用(CGLIB动态代理方式)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TrainStation result <span class="token operator">=</span> <span class="token punctuation">(</span>TrainStation<span class="token punctuation">)</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建代理工厂对象</span>        ProxyFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取代理对象</span>        TrainStation proxyObject <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getProxyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyObject<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5-1-6-三种代理的对比"><a href="#5-1-6-三种代理的对比" class="headerlink" title="5.1.6 三种代理的对比"></a>5.1.6 三种代理的对比</h4><ul><li><p>jdk代理和CGLIB代理</p><p>使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，在 JDK1.6之前比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的类或者 方法进行代理，因为CGLib原理是动态生成被代理类的子类。</p><p>在JDK1.6、JDK1.7、JDK1.8逐步对JDK动态代理优化之后，在调用次数较少的情况下，JDK代 理效率高于CGLib代理效率，只有当进行大量调用的时候，JDK1.6和JDK1.7比CGLib代理效率 低一点，但是到JDK1.8的时候，JDK代理效率高于CGLib代理。所以如果有接口使用JDK动态代 理，如果没有接口使用CGLIB代理。</p></li><li><p>动态代理和静态代理</p><p>动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中 的方法中处理（InvocationHandler.invoke）。这样，在接口方法数量比较多的时候，我们 可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。</p><p>如果接口增加一个方法，静态代理模式除了所有实现类需要实现这个方法外，所有代理类也需要实 现此方法。增加了代码维护的复杂度。而动态代理不会出现该问题</p></li></ul><h4 id="5-1-7-优缺点"><a href="#5-1-7-优缺点" class="headerlink" title="5.1.7 优缺点"></a>5.1.7 优缺点</h4><p><strong>优点：</strong></p><ul><li>代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；</li><li>代理对象可以扩展目标对象的功能；</li><li>代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度；</li></ul><p><strong>缺点：</strong></p><ul><li>增加了系统的复杂度；</li></ul><h4 id="5-1-8-使用场景"><a href="#5-1-8-使用场景" class="headerlink" title="5.1.8 使用场景"></a>5.1.8 使用场景</h4><ul><li><p>远程（Remote）代理</p><p>本地服务通过网络请求远程服务。为了实现本地到远程的通信，我们需要实现网络通信，处理其中 可能的异常。为良好的代码设计和可维护性，我们将网络通信部分隐藏起来，只暴露给本地服务一 个接口，通过该接口即可访问远程服务提供的功能，而不必过多关心通信部分的细节。</p></li><li><p>防火墙（Firewall）代理</p><p>当你将浏览器配置成使用代理功能时，防火墙就将你的浏览器的请求转给互联网；当互联网返回响 应时，代理服务器再把它转给你的浏览器。</p></li><li><p>保护（Protect or Access）代理</p><p>控制对一个对象的访问，如果需要，可以给不同的用户提供不同级别的使用权限。</p></li></ul><h3 id="5-2-适配器模式"><a href="#5-2-适配器模式" class="headerlink" title="5.2 适配器模式"></a>5.2 适配器模式</h3><h4 id="5-2-1-概述"><a href="#5-2-1-概述" class="headerlink" title="5.2.1 概述"></a>5.2.1 概述</h4><p>如果去欧洲国家去旅游的话，他们的插座是欧洲标准。而我们使用的插头并不适配。因此我们的笔记本电脑，手机在当地不能直接充电。所以就需要一个插座转换器，转换器第1面插 入当地的插座，第2面供我们充电，这样使得我们的插头在当地能使用。生活中这样的例子很多，手机 充电器（将220v转换为5v的电压），读卡器等，其实就是使用到了<font color="red">适配器模式</font>。</p><p><strong>定义：</strong></p><p>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能 一起工作。</p><p>适配器模式分为类适配器模式和对象适配器模式，前者类之间的耦合度比后者高，且要求程序员了解现 有组件库中的相关组件的内部结构，所以应用相对较少些。</p><h4 id="5-2-2-结构"><a href="#5-2-2-结构" class="headerlink" title="5.2.2 结构"></a>5.2.2 结构</h4><p>适配器模式（Adapter）包含以下主要角色：</p><ul><li>目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。</li><li>适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。</li><li>适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成 目标接口，让客户按目标接口的格式访问适配者。</li></ul><h4 id="5-2-3-类适配器模式"><a href="#5-2-3-类适配器模式" class="headerlink" title="5.2.3 类适配器模式"></a>5.2.3 类适配器模式</h4><p>实现方式：定义一个适配器类来实现当前系统的业务接口，同时又继承现有组件库中已经存在的组件。</p><p>【例】读卡器</p><p>现有一台电脑只能读取SD卡，而要读取TF卡中的内容的话就需要使用到适配器模式。创建一个读卡 器，将TF卡中的内容读取出来。</p><p>类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220622201856286.png"></p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//SD卡的接口</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SDCard</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//读取SD卡方法</span>        String <span class="token function">readSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//写入SD卡功能</span>        <span class="token keyword">void</span> <span class="token function">writeSD</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//SD卡实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SDCardImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SDCard</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">readSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String msg <span class="token operator">=</span> <span class="token string">"sd card read a msg :hello word SD"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeSD</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sd card write msg : "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//电脑类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">readSD</span><span class="token punctuation">(</span>SDCard sdCard<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sdCard <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"sd card null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sdCard<span class="token punctuation">.</span><span class="token function">readSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//TF卡接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TFCard</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//读取TF卡方法</span>    String <span class="token function">readTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写入TF卡功能</span>    <span class="token keyword">void</span> <span class="token function">writeTF</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//TF卡实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TFCardImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TFCard</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> String <span class="token function">readTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String msg <span class="token operator">=</span><span class="token string">"tf card read msg : hello word tf card"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeTF</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tf card write a msg : "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义适配器类（SD兼容TF）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SDAdapterTF</span> <span class="token keyword">extends</span> <span class="token class-name">TFCardImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SDCard</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">readSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"adapter read tf card "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">readTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeSD</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"adapter write tf card"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">writeTF</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Computer computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SDCard sdCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SDCardImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>computer<span class="token punctuation">.</span><span class="token function">readSD</span><span class="token punctuation">(</span>sdCard<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SDAdapterTF adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SDAdapterTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>computer<span class="token punctuation">.</span><span class="token function">readSD</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>类适配器模式违背了合成复用原则。类适配器是客户类有一个接口规范的情况下可用，反之不可用。</p><h4 id="5-2-4-对象适配器模式"><a href="#5-2-4-对象适配器模式" class="headerlink" title="5.2.4 对象适配器模式"></a>5.2.4 对象适配器模式</h4><p>实现方式：对象适配器模式可釆用将现有组件库中已经实现的组件引入适配器类中，该类同时实现当前 系统的业务接口。</p><p>【例】读卡器</p><p>类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220622201856286.png"></p><p>代码如下：</p><p>类适配器模式的代码，我们只需要修改适配器类（SDAdapterTF）和测试类。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建适配器对象（SD兼容TF）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SDAdapterTF</span> <span class="token keyword">implements</span> <span class="token class-name">SDCard</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> TFCard tfCard<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">SDAdapterTF</span><span class="token punctuation">(</span>TFCard tfCard<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tfCard <span class="token operator">=</span> tfCard<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">readSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"adapter read tf card "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tfCard<span class="token punctuation">.</span><span class="token function">readTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeSD</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"adapter write tf card"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tfCard<span class="token punctuation">.</span><span class="token function">writeTF</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Computer computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SDCard sdCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SDCardImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>computer<span class="token punctuation">.</span><span class="token function">readSD</span><span class="token punctuation">(</span>sdCard<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TFCard tfCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TFCardImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SDAdapterTF adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SDAdapterTF</span><span class="token punctuation">(</span>tfCard<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>computer<span class="token punctuation">.</span><span class="token function">readSD</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：还有一个适配器模式是接口适配器模式。当不希望实现一个接口中所有的方法时，可以创 建一个抽象类Adapter ，实现所有方法。而此时我们只需要继承该抽象类即可。</p></blockquote><h4 id="5-2-5-应用场景"><a href="#5-2-5-应用场景" class="headerlink" title="5.2.5 应用场景"></a>5.2.5 应用场景</h4><ul><li>以前开发的系统存在满足新系统功能需求的类，但其接口同新系统的接口不一致。</li><li>使用第三方提供的组件，但组件接口定义和自己要求的接口定义不同。</li></ul><h4 id="5-2-6-JDK源码解析"><a href="#5-2-6-JDK源码解析" class="headerlink" title="5.2.6 JDK源码解析"></a>5.2.6 JDK源码解析</h4><p>Reader（字符流）、InputStream（字节流）的适配使用的是InputStreamReader。</p><p>InputStreamReader继承自java.io包中的Reader，对他中的抽象的未实现的方法给出实现。如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">return</span> sd<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span> cbuf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">return</span> sd<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如上代码中的sd（StreamDecoder类对象），在Sun的JDK实现中，实际的方法实现是对 sun.nio.cs.StreamDecoder类的同名方法的调用封装。类结构图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220622212945845.png"></p><p>从上图可以看出：</p><ul><li>InputStreamReader是对同样实现了Reader的StreamDecoder的封装。</li><li>StreamDecoder不是Java SE API中的内容，是Sun JDK给出的自身实现。但我们知道他们对 构造方法中的字节流类（InputStream）进行封装，并通过该类进行了字节流和字符流之间的解 码转换。</li></ul><p><strong><font color="red">结论：</font></strong></p><p>从表层来看，InputStreamReader做了InputStream字节流类到Reader字符流之间的转换。而从 如上Sun JDK中的实现类关系结构中可以看出，是StreamDecoder的设计实现在实际上采用了适配器模式。</p><h3 id="5-3-装饰者模式"><a href="#5-3-装饰者模式" class="headerlink" title="5.3 装饰者模式"></a>5.3 装饰者模式</h3><h4 id="5-3-1-概述"><a href="#5-3-1-概述" class="headerlink" title="5.3.1 概述"></a>5.3.1 概述</h4><p>一个快餐店的例子。</p><p>快餐店有炒面、炒饭这些快餐，可以额外附加鸡蛋、火腿、培根这些配菜，当然加配菜需要额外加钱， 每个配菜的价钱通常不太一样，那么计算总价就会显得比较麻烦。</p><p>使用继承的方式存在的问题：</p><ul><li><p>扩展性不好</p><p>如果要再加一种配料（火腿肠），我们就会发现需要给FriedRice和FriedNoodles分别定义一 个子类。如果要新增一个快餐品类（炒河粉）的话，就需要定义更多的子类。</p></li><li><p>产生过多的子类</p></li></ul><p><strong>定义：</strong></p><p>指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式。</p><h4 id="5-3-2-结构"><a href="#5-3-2-结构" class="headerlink" title="5.3.2 结构"></a>5.3.2 结构</h4><p>装饰（Decorator）模式中的角色：</p><ul><li>抽象构件（Component）角色 ：定义一个抽象接口以规范准备接收附加责任的对象。</li><li>具体构件（Concrete Component）角色 ：实现抽象构件，通过装饰角色为其添加一些职责.</li><li>抽象装饰（Decorator）角色 ： 继承或实现抽象构件，并包含具体构件的实例，可以通过其子 类扩展具体构件的功能。</li><li>具体装饰（ConcreteDecorator）角色 ：实现抽象装饰的相关方法，并给具体构件对象添加附 加的责任。</li></ul><h4 id="5-3-3-案例"><a href="#5-3-3-案例" class="headerlink" title="5.3.3 案例"></a>5.3.3 案例</h4><p>我们使用装饰者模式对快餐店案例进行改进，体会装饰者模式的精髓。</p><p>类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220623094721632.png"></p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//快餐接口</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">FastFood</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> price<span class="token punctuation">;</span>    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">FastFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">FastFood</span><span class="token punctuation">(</span><span class="token keyword">float</span> price<span class="token punctuation">,</span> String desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">float</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDesc</span><span class="token punctuation">(</span>String desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取价格</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//炒饭</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FriedRice</span> <span class="token keyword">extends</span> <span class="token class-name">FastFood</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">FriedRice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"炒饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//炒面</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FriedNoodles</span> <span class="token keyword">extends</span> <span class="token class-name">FastFood</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">FriedNoodles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"炒面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//配料类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Garnish</span> <span class="token keyword">extends</span> <span class="token class-name">FastFood</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> FastFood fastFood<span class="token punctuation">;</span>    <span class="token keyword">public</span> FastFood <span class="token function">getFastFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> fastFood<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFastFood</span><span class="token punctuation">(</span>FastFood fastFood<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fastFood <span class="token operator">=</span> fastFood<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Garnish</span><span class="token punctuation">(</span>FastFood fastFood<span class="token punctuation">,</span> <span class="token keyword">float</span> price<span class="token punctuation">,</span> String desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fastFood <span class="token operator">=</span> fastFood<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//鸡蛋配料</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Egg</span> <span class="token keyword">extends</span> <span class="token class-name">Garnish</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Egg</span><span class="token punctuation">(</span>FastFood fastFood<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>fastFood<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"鸡蛋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getFastFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getFastFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//培根配料</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bacon</span> <span class="token keyword">extends</span> <span class="token class-name">Garnish</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Bacon</span><span class="token punctuation">(</span>FastFood fastFood<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>fastFood<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"培根"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getFastFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getFastFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//点一份炒饭</span>        FastFood food <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FriedRice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//花费的价格</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>food<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> food<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//点一份加鸡蛋的炒饭</span>        FastFood food1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FriedRice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        food1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Egg</span><span class="token punctuation">(</span>food1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//花费的价格</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>food1<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> food1<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//点一份加培根的炒面</span>        FastFood food2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FriedNoodles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        food2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bacon</span><span class="token punctuation">(</span>food2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//花费的价格</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>food2<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> food2<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>好处：</p><ul><li>饰者模式可以带来比继承更加灵活性的扩展功能，使用更加方便，可以通过组合不同的装饰者对象 来获取具有不同行为状态的多样化的结果。装饰者模式比继承更具良好的扩展性，完美的遵循开闭 原则，继承是静态的附加责任，装饰者则是动态的附加责任。</li><li>装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以 动态扩展一个实现类的功能。</li></ul><h4 id="5-3-4-使用场景"><a href="#5-3-4-使用场景" class="headerlink" title="5.3.4 使用场景"></a>5.3.4 使用场景</h4><ul><li><p>当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。</p><p>不能采用继承的情况主要有两类：</p><ul><li>第一类是系统中存在大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目 呈爆炸性增长；</li><li>第二类是因为类定义不能继承（如final类）</li></ul></li><li><p>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</p></li><li><p>当对象的功能要求可以动态地添加，也可以再动态地撤销时。</p></li></ul><h4 id="5-3-5-JDK源码解析"><a href="#5-3-5-JDK源码解析" class="headerlink" title="5.3.5 JDK源码解析"></a>5.3.5 JDK源码解析</h4><p>IO流中的包装类使用到了装饰者模式。BufferedInputStream，BufferedOutputStream， BufferedReader，BufferedWriter。</p><p>我们以BufferedWriter举例来说明，先看看如何使用BufferedWriter</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建BufferedWriter对象</span>        <span class="token comment" spellcheck="true">//创建FileWriter对象</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Think\\Desktop\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//写数据</span>        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello Buffered"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用起来感觉确实像是装饰者模式，接下来看它们的结构：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220623111007742.png"></p><blockquote><p><font color="red">小结：</font></p><p>BufferedWriter使用装饰者模式对Writer子实现类进行了增强，添加了缓冲区，提高了写数 据的效率。</p></blockquote><h4 id="5-3-6-代理和装饰者的区别"><a href="#5-3-6-代理和装饰者的区别" class="headerlink" title="5.3.6 代理和装饰者的区别"></a>5.3.6 代理和装饰者的区别</h4><p>静态代理和装饰者模式的区别：</p><ul><li><p>相同点：</p><ul><li>都要实现与目标类相同的业务接口</li><li>在两个类中都要声明目标对象</li><li>都可以在不修改目标类的前提下增强目标方法</li></ul></li><li><p>不同点：</p><ul><li>目的不同 装饰者是为了增强目标对象 静态代理是为了保护和隐藏目标对象</li><li>获取目标对象构建的地方不同 装饰者是由外界传递进来，可以通过构造方法传递 静态代理 是在代理类内部创建，以此来隐藏目标对象</li></ul></li></ul><h3 id="5-4-桥接模式"><a href="#5-4-桥接模式" class="headerlink" title="5.4 桥接模式"></a>5.4 桥接模式</h3><h4 id="5-4-1-概述"><a href="#5-4-1-概述" class="headerlink" title="5.4.1 概述"></a>5.4.1 概述</h4><p>现在有一个需求，需要创建不同的图形，并且每个图形都有可能会有不同的颜色。我们可以利用继承的 方式来设计类的关系：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220623112924549.png"></p><p>我们可以发现有很多的类，假如我们再增加一个形状或再增加一种颜色，就需要创建更多的类。</p><p>试想，在一个有多种可能会变化的维度的系统中，用继承方式会造成类爆炸，扩展起来不灵活。每次在 一个维度上新增一个具体实现都要增加多个子类。为了更加灵活的设计系统，我们此时可以考虑使用桥 接模式。</p><p><strong>定义：</strong></p><p>将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实 现这两个可变维度的耦合度。</p><h4 id="5-4-2-结构"><a href="#5-4-2-结构" class="headerlink" title="5.4.2 结构"></a>5.4.2 结构</h4><p>桥接（Bridge）模式包含以下主要角色：</p><ul><li>抽象化（Abstraction）角色 ：定义抽象类，并包含一个对实现化对象的引用。</li><li>扩展抽象化（Refined Abstraction）角色 ：是抽象化角色的子类，实现父类中的业务方法， 并通过组合关系调用实现化角色中的业务方法。</li><li>实现化（Implementor）角色 ：定义实现化角色的接口，供扩展抽象化角色调用。</li><li>具体实现化（Concrete Implementor）角色 ：给出实现化角色接口的具体实现。</li></ul><h4 id="5-4-3-案例"><a href="#5-4-3-案例" class="headerlink" title="5.4.3 案例"></a>5.4.3 案例</h4><p>【例】视频播放器</p><p>需要开发一个跨平台视频播放器，可以在不同操作系统平台（如Windows、Mac、Linux等）上播放多 种格式的视频文件，常见的视频格式包括RMVB、AVI、WMV等。该播放器包含了两个维度，适合使用桥 接模式。</p><p>类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220623113617135.png"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//视频文件</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">VideoFile</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//avi文件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AVIFile</span> <span class="token keyword">implements</span> <span class="token class-name">VideoFile</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"avi视频文件："</span><span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//rmvb文件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">REVBBFile</span> <span class="token keyword">implements</span> <span class="token class-name">VideoFile</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rmvb文件："</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//操作系统版本</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OperatingSystemVersion</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> VideoFile videoFile<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">OperatingSystemVersion</span><span class="token punctuation">(</span>VideoFile videoFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>videoFile <span class="token operator">=</span> videoFile<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Windows版本</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Windows</span> <span class="token keyword">extends</span> <span class="token class-name">OperatingSystem</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Windows</span><span class="token punctuation">(</span>VideoFile videoFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>videoFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        videoFile<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//mac版本</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mac</span> <span class="token keyword">extends</span> <span class="token class-name">OperatingSystemVersion</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Mac</span><span class="token punctuation">(</span>VideoFile videoFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>videoFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        videoFile<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        OperatingSystem os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Windows</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AVIFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">"战狼3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>好处：</strong></p><ul><li>桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。 如：如果现在还有一种视频文件类型wmv，我们只需要再定义一个类实现VideoFile接口即可， 其他类不需要发生变化。</li><li>实现细节对客户透明</li></ul><h4 id="5-4-4-使用场景"><a href="#5-4-4-使用场景" class="headerlink" title="5.4.4 使用场景"></a>5.4.4 使用场景</h4><ul><li>当一个类存在两个独立变化的维度，且这两个维度都需要进行扩展时。</li><li>当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时。</li><li>当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时。避免在两个层次之间 建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。</li></ul><h3 id="5-5-外观模式"><a href="#5-5-外观模式" class="headerlink" title="5.5 外观模式"></a>5.5 外观模式</h3><h4 id="5-5-1-概述"><a href="#5-5-1-概述" class="headerlink" title="5.5.1 概述"></a>5.5.1 概述</h4><p>有些人可能炒过股票，但其实大部分人都不太懂，这种没有足够了解证券知识的情况下做股票是很容易 亏钱的，刚开始炒股肯定都会想，如果有个懂行的帮帮手就好，其实基金就是个好帮手，支付宝里就有 许多的基金，它将投资者分散的资金集中起来，交由专业的经理人进行管理，投资于股票、债券、外汇 等领域，而基金投资的收益归持有者所有，管理机构收取一定比例的托管管理费用。</p><p><strong>定义：</strong></p><p>又名门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问 的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降 低应用程序的复杂度，提高了程序的可维护性。</p><p>外观（Facade）模式是“迪米特法则”的典型应用</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220623153612791.png"></p><h4 id="5-5-2-结构"><a href="#5-5-2-结构" class="headerlink" title="5.5.2 结构"></a>5.5.2 结构</h4><p>外观（Facade）模式包含以下主要角色：</p><ul><li>外观（Facade）角色：为多个子系统对外提供一个共同的接口。</li><li>子系统（Sub System）角色：实现系统的部分功能，客户可以通过外观角色访问它。</li></ul><h4 id="5-5-3-案例"><a href="#5-5-3-案例" class="headerlink" title="5.5.3 案例"></a>5.5.3 案例</h4><p>【例】智能家电控制</p><p>小明的爷爷已经60岁了，一个人在家生活：每次都需要打开灯、打开电视、打开空调；睡觉时关闭灯、 关闭电视、关闭空调；操作起来都比较麻烦。所以小明给爷爷买了智能音箱，可以通过语音直接控制这 些智能家电的开启和关闭。类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220623153941460.png"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//灯类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Light</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开了灯...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭了灯...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//电视类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TV</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开了电视...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭了电视...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//控制类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AirCondition</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开了空调...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭了空调...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//智能音箱</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmartAppliancesFacade</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Light light<span class="token punctuation">;</span>    <span class="token keyword">private</span> TV tv<span class="token punctuation">;</span>    <span class="token keyword">private</span> AirCondition airCondition<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">SmartAppliancesFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        airCondition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AirCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"打开"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"关闭"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我还听不懂你说的！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//起床后一键开电器</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"起床了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tv<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        airCondition<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//睡觉一键关电器</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"睡觉了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tv<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        airCondition<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建外观对象</span>        SmartAppliancesFacade facade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmartAppliancesFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//客户端直接与外观对象进行交互</span>        facade<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"打开家电"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        facade<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"关闭家电"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>好处：</strong></p><ul><li>降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。</li><li>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。</li></ul><p><strong>缺点：</strong></p><ul><li>不符合开闭原则，修改很麻烦</li></ul><h4 id="5-5-4-使用场景"><a href="#5-5-4-使用场景" class="headerlink" title="5.5.4 使用场景"></a>5.5.4 使用场景</h4><ul><li>对分层结构系统构建时，使用外观模式定义子系统中每层的入口点可以简化子系统之间的依赖关 系。</li><li>当一个复杂系统的子系统很多时，外观模式可以为系统设计一个简单的接口供外界访问。</li><li>当客户端与多个子系统之间存在很大的联系时，引入外观模式可将它们分离，从而提高子系统的独 立性和可移植性。</li></ul><h4 id="5-5-5-源码解析"><a href="#5-5-5-源码解析" class="headerlink" title="5.5.5 源码解析"></a>5.5.5 源码解析</h4><p>使用tomcat作为web容器时，接收浏览器发送过来的请求，tomcat会将请求信息封装成 ServletRequest对象，如下图①处对象。但是大家想想ServletRequest是一个接口，它还有一个 子接口HttpServletRequest，而我们知道该request对象肯定是一个HttpServletRequest对象 的子实现类对象，到底是哪个类的对象呢？可以通过输出request对象，我们就会发现是一个名为 RequestFacade的类的对象。</p><p>RequestFacade类就使用了外观模式。先看结构图：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220623161647580.png"></p><p><strong>为什么在此处使用外观模式呢？</strong></p><p>定义 RequestFacade 类，分别实现 ServletRequest ，同时定义私有成员变量 Request ，并 且方法的实现调用 Request 的实现。然后，将 RequestFacade上转为 ServletRequest 传给 servlet 的 service 方法，这样即使在 servlet 中被下转为 RequestFacade ，也不能访问 私有成员变量对象中的方法。既用了 Request ，又能防止其中方法被不合理的访问。</p><h3 id="5-6-组合模式"><a href="#5-6-组合模式" class="headerlink" title="5.6 组合模式"></a>5.6 组合模式</h3><h4 id="5-6-1-概述"><a href="#5-6-1-概述" class="headerlink" title="5.6.1 概述"></a>5.6.1 概述</h4><p><strong>定义：</strong></p><p>又名部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对 象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p><h4 id="5-6-2-结构"><a href="#5-6-2-结构" class="headerlink" title="5.6.2 结构"></a>5.6.2 结构</h4><p>组合模式主要包含三种角色：</p><ul><li>抽象根节点（Component）：定义系统各层次对象的共有方法和属性，可以预先定义一些默认行 为和属性。</li><li>树枝节点（Composite）：定义树枝节点的行为，存储子节点，组合树枝节点和叶子节点形成一 个树形结构。</li><li>叶子节点（Leaf）：叶子节点对象，其下再无分支，是系统层次遍历的最小单位。</li></ul><h4 id="5-6-3-案例实现"><a href="#5-6-3-案例实现" class="headerlink" title="5.6.3 案例实现"></a>5.6.3 案例实现</h4><p>【例】软件菜单</p><p>我们在访问别的一些管理系统时，经常可以看到类似的菜单。一个菜单可以包含菜单项（菜单 项是指不再包含其他内容的菜单条目），也可以包含带有其他菜单项的菜单，因此使用组合模式描述菜 单就很恰当，我们的需求是针对一个菜单，打印出其包含的所有菜单以及菜单项的名称。</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220623164044079.png"></p><p>要实现该案例，我们先画出类图：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220623164315536.png"></p><p><strong>代码实现：</strong></p><p>不管是菜单还是菜单项，都应该继承自统一的接口，这里姑且将这个统一的接口称为菜单组件。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//菜单组件 不管是菜单还是菜单项，都应该继承该类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MenuComponent</span> <span class="token punctuation">{</span>        <span class="token keyword">protected</span> String name<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> level<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加菜单</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>MenuComponent menuComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//移除菜单</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>MenuComponent menuComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取指定的子菜单</span>    <span class="token keyword">public</span> MenuComponent <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取菜单名称</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里的MenuComponent定义为抽象类，因为有一些共有的属性和行为要在该类中实现，Menu和 MenuItem类就可以只覆盖自己感兴趣的方法，而不用搭理不需要或者不感兴趣的方法，举例来说， Menu类可以包含子菜单，因此需要覆盖add()、remove()、getChild()方法，但是MenuItem就不 应该有这些方法。这里给出的默认实现是抛出异常，你也可以根据自己的需要改写默认实现。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Menu</span> <span class="token keyword">extends</span> <span class="token class-name">MenuComponent</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>MenuComponent<span class="token operator">></span> menuComponentList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Menu</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> level<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">=</span> level<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        menuComponentList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>MenuComponent<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>MenuComponent menuComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        menuComponentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>menuComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>MenuComponent menuComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        menuComponentList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>menuComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> MenuComponent <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> menuComponentList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> level<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>MenuComponent menuComponent <span class="token operator">:</span> menuComponentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            menuComponent<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Menu类已经实现了除了getName方法的其他所有方法，因为Menu类具有添加菜单，移除菜单和获取子 菜单的功能。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MenuItem</span> <span class="token keyword">extends</span> <span class="token class-name">MenuComponent</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MenuItem</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">=</span> level<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> level<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MenuItem是菜单项，不能再有子菜单，所以添加菜单，移除菜单和获取子菜单的功能并不能实现。</p><h4 id="5-6-4-组合模式的分类"><a href="#5-6-4-组合模式的分类" class="headerlink" title="5.6.4 组合模式的分类"></a>5.6.4 组合模式的分类</h4><p>在使用组合模式时，根据抽象构件类的定义形式，我们可将组合模式分为透明组合模式和安全组合模式 两种形式。</p><ul><li><p>透明组合模式</p><p>透明组合模式中，抽象根节点角色中声明了所有用于管理成员对象的方法，比如在示例中 MenuComponent 声明了 add 、 remove 、 getChild 方法，这样做的好处是确保所有的构件 类都有相同的接口。透明组合模式也是组合模式的标准形式。</p><p>透明组合模式的缺点是不够安全，因为叶子对象和容器对象在本质上是有区别的，叶子对象不可能 有下一个层次的对象，即不可能包含成员对象，因此为其提供 add()、remove() 等方法是没有 意义的，这在编译阶段不会出错，但在运行阶段如果调用这些方法可能会出错（如果没有提供相应 的错误处理代码）</p></li><li><p>安全组合模式</p><p>在安全组合模式中，在抽象构件角色中没有声明任何用于管理成员对象的方法，而是在树枝节点 Menu 类中声明并实现这些方法。安全组合模式的缺点是不够透明，因为叶子构件和容器构件具 有不同的方法，且容器构件中那些用于管理成员对象的方法没有在抽象构件类中定义，因此客户端 不能完全针对抽象编程，必须有区别地对待叶子构件和容器构件。</p></li></ul><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220623202626838.png"></p><h4 id="5-6-5-优点"><a href="#5-6-5-优点" class="headerlink" title="5.6.5 优点"></a>5.6.5 优点</h4><ul><li>组合模式可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，它让客户端忽略了层次 的差异，方便对整个层次结构进行控制。</li><li>客户端可以一致地使用一个组合结构或其中单个对象，不必关心处理的是单个对象还是整个组合结 构，简化了客户端代码。</li><li>在组合模式中增加新的树枝节点和叶子节点都很方便，无须对现有类库进行任何修改，符合“开闭 原则”。</li><li>组合模式为树形结构的面向对象实现提供了一种灵活的解决方案，通过叶子节点和树枝节点的递归 组合，可以形成复杂的树形结构，但对树形结构的控制却非常简单。</li></ul><h4 id="5-6-6-使用场景"><a href="#5-6-6-使用场景" class="headerlink" title="5.6.6 使用场景"></a>5.6.6 使用场景</h4><p>组合模式正是应树形结构而生，所以组合模式的使用场景就是出现树形结构的地方。比如：文件目录显 示，多级目录呈现等树形结构数据的操作。</p><h3 id="5-7-享元模式"><a href="#5-7-享元模式" class="headerlink" title="5.7 享元模式"></a>5.7 享元模式</h3><h4 id="5-7-1-概述"><a href="#5-7-1-概述" class="headerlink" title="5.7.1 概述"></a>5.7.1 概述</h4><p><strong>定义：</strong></p><p>运用共享技术来有效地支持大量细粒度对象的复用。它通过共享已经存在的对象来大幅度减少需要创建 的对象数量、避免大量相似对象的开销，从而提高系统资源的利用率。</p><h4 id="5-7-2-结构"><a href="#5-7-2-结构" class="headerlink" title="5.7.2 结构"></a>5.7.2 结构</h4><p>享元（Flyweight ）模式中存在以下两种状态：</p><ol><li>内部状态，即不会随着环境的改变而改变的可共享部分。</li><li>外部状态，指随环境改变而改变的不可以共享的部分。享元模式的实现要领就是区分应用中的这两 种状态，并将外部状态外部化。</li></ol><p>享元模式的主要有以下角色：</p><ul><li>抽象享元角色（Flyweight）：通常是一个接口或抽象类，在抽象享元类中声明了具体享元类公 共的方法，这些方法可以向外界提供享元对象的内部数据（内部状态），同时也可以通过这些方法 来设置外部数据（外部状态）。</li><li>具体享元（Concrete Flyweight）角色 ：它实现了抽象享元类，称为享元对象；在具体享元 类中为内部状态提供了存储空间。通常我们可以结合单例模式来设计具体享元类，为每一个具体享 元类提供唯一的享元对象。</li><li>非享元（Unsharable Flyweight)角色 ：并不是所有的抽象享元类的子类都需要被共享，不 能被共享的子类可设计为非共享具体享元类；当需要一个非共享具体享元类的对象时可以直接通过 实例化创建。</li><li>享元工厂（Flyweight Factory）角色 ：负责创建和管理享元角色。当客户对象请求一个享元 对象时，享元工厂检査系统中是否存在符合要求的享元对象，如果存在则提供给客户；如果不存在 的话，则创建一个新的享元对象。</li></ul><h4 id="5-7-3-案例实现"><a href="#5-7-3-案例实现" class="headerlink" title="5.7.3 案例实现"></a>5.7.3 案例实现</h4><p>【例】俄罗斯方块</p><p>众所周知的俄罗斯方块中的一个个方块，如果在俄罗斯方块这个游戏中，每个不同的方块 都是一个实例对象，这些对象就要占用很多的内存空间，下面利用享元模式进行实现。</p><p><strong>类图：</strong></p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220623204425771.png"></p><p><strong>代码如下：</strong></p><p>俄罗斯方块有不同的形状，我们可以对这些形状向上抽取出AbstractBox，用来定义共性的属性和行 为。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractBox</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String <span class="token function">getShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方块形状："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 颜色："</span> <span class="token operator">+</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来就是定义不同的形状了，IBox类、LBox类、OBox类等。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IBox</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBox</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"I"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LBox</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBox</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"L"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OBox</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBox</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"O"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>提供了一个工厂类（BoxFactory），用来管理享元对象（也就是AbstractBox子类对象），该工厂 类对象只需要一个，所以可以使用单例模式。并给工厂类提供一个获取形状的方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoxFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> AbstractBox<span class="token operator">></span> map<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">BoxFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> AbstractBox<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractBox iBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractBox lBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractBox oBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span> iBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">,</span> lBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"O"</span><span class="token punctuation">,</span> oBox<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> BoxFactory <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SingletonHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> BoxFactory INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BoxFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> AbstractBox <span class="token function">getBox</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5-7-5-优缺点和使用场景"><a href="#5-7-5-优缺点和使用场景" class="headerlink" title="5.7.5 优缺点和使用场景"></a>5.7.5 优缺点和使用场景</h4><p><strong>1，优点</strong></p><ul><li>极大减少内存中相似或相同对象数量，节约系统资源，提供系统性能</li><li>享元模式中的外部状态相对独立，且不影响内部状态</li></ul><p><strong>2，缺点：</strong></p><p>为了使对象可以共享，需要将享元对象的部分状态外部化，分离内部状态和外部状态，使程序逻辑复杂</p><p><strong>3，使用场景：</strong></p><ul><li>一个系统有大量相同或者相似的对象，造成内存的大量耗费。</li><li>对象的大部分状态都可以外部化，可以将这些外部状态传入对象中。</li><li>在使用享元模式时需要维护一个存储享元对象的享元池，而这需要耗费一定的系统资源，因此，应 当在需要多次重复使用享元对象时才值得使用享元模式。</li></ul><h4 id="5-7-6-JDK源码解析"><a href="#5-7-6-JDK源码解析" class="headerlink" title="5.7.6 JDK源码解析"></a>5.7.6 JDK源码解析</h4><p>Integer类使用了享元模式。我们先看下面的例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer i1 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        Integer i2 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i1和i2对象是否是同一个对象？"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer i3 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        Integer i4 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i3和i4对象是否是同一个对象？"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i3 <span class="token operator">==</span> i4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>为什么第一个输出语句输出的是true，第二个输出语句输出的是false？通过反编译软件进行反编 译，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Integer i1 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer i2 Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token string">"i1\u548ci2\u5bf9\u8c61\u662f\u5426\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff1f"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span>i2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer i3 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer i4 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token keyword">new</span><span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token string">"i3\u548ci4\u5bf9\u8c61\u662f\u5426\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff1f"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i3 <span class="token operator">==</span>i4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面代码可以看到，直接给Integer类型的变量赋值基本数据类型数据的操作底层使用的是 valueOf() ，所以只需要看该方法即可</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Integer</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> IntegerCache<span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> IntegerCache<span class="token punctuation">.</span>high<span class="token punctuation">)</span>            <span class="token keyword">return</span> IntegerCache<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>IntegerCache<span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> Integer cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">static</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>            String integerCacheHighPropValue <span class="token operator">=</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>VM<span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">"java.lang.Integer.IntegerCache.high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                    i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// Maximum array size is Integer.MA</span>                    h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span> NumberFormatException nfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            high <span class="token operator">=</span> h<span class="token punctuation">;</span>            cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// range [-128, 127] must be interned (JLS7 5.1.7)</span>            <span class="token keyword">assert</span> IntegerCache<span class="token punctuation">.</span>high <span class="token operator">>=</span> <span class="token number">127</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token function">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到 Integer 默认先创建并缓存 -128 ~ 127 之间数的 Integer 对象，当调用 valueOf 时如果参数在 -128 ~ 127 之间则计算下标并从缓存中返回，否则创建一个新的 Integer 对象。</p><h2 id="6，行为型模式"><a href="#6，行为型模式" class="headerlink" title="6，行为型模式"></a>6，行为型模式</h2><p>行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单 个对象都无法单独完成的任务，它涉及算法与对象间职责的分配。</p><p>行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚 合在对象间分配行为。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象 行为模式比类行为模式具有更大的灵活性。</p><p>行为型模式分为：</p><ul><li>模板方法模式</li><li>策略模式</li><li>命令模式</li><li>职责链模式</li><li>状态模式</li><li>观察者模式</li><li>中介者模式</li><li>迭代器模式</li><li>访问者模式</li><li>备忘录模式</li><li>解释器模式</li></ul><p>以上 11 种行为型模式，除了模板方法模式和解释器模式是类行为型模式，其他的全部属于对象行为 型模式。</p><h3 id="6-1-模板方法模式"><a href="#6-1-模板方法模式" class="headerlink" title="6.1 模板方法模式"></a>6.1 模板方法模式</h3><h4 id="6-1-1-概述"><a href="#6-1-1-概述" class="headerlink" title="6.1.1 概述"></a>6.1.1 概述</h4><p>在面向对象程序设计过程中，程序员常常会遇到这种情况：设计一个系统时知道了算法所需的关键步 骤，而且确定了这些步骤的执行顺序，但某些步骤的具体实现还未知，或者说某些步骤的实现与具体的 环境相关。</p><p>例如，去银行办理业务一般要经过以下4个流程：取号、排队、办理具体业务、对银行工作人员进行评 分等，其中取号、排队和对银行工作人员进行评分的业务对每个客户是一样的，可以在父类中实现，但 是办理具体业务却因人而异，它可能是存款、取款或者转账等，可以延迟到子类中实现。</p><p><strong>定义：</strong></p><p>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情 况下重定义该算法的某些特定步骤。</p><h4 id="6-1-2-结构"><a href="#6-1-2-结构" class="headerlink" title="6.1.2 结构"></a>6.1.2 结构</h4><p>模板方法（Template Method）模式包含以下主要角色：</p><ul><li><p>抽象类（Abstract Class）：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基 本方法构成。</p><ul><li><p>模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。</p></li><li><p>基本方法：是实现算法各个步骤的方法，是模板方法的组成部分。基本方法又可以分为三 种：</p><ul><li><p>抽象方法(Abstract Method) ：一个抽象方法由抽象类声明、由其具体子类实现。</p></li><li><p>具体方法(Concrete Method) ：一个具体方法由一个抽象类或具体类声明并实现， 其子类可以进行覆盖也可以直接继承。</p></li><li><p>钩子方法(Hook Method) ：在抽象类中已经实现，包括用于判断的逻辑方法和需要 子类重写的空方法两种。</p><p>一般钩子方法是用于判断的逻辑方法，这类方法名一般为isXxx，返回值类型为 boolean类型。</p></li></ul></li></ul></li><li><p>具体子类（Concrete Class）：实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级 逻辑的组成步骤。</p></li></ul><h4 id="6-1-3-案例实现"><a href="#6-1-3-案例实现" class="headerlink" title="6.1.3 案例实现"></a>6.1.3 案例实现</h4><p>【例】炒菜</p><p>炒菜的步骤是固定的，分为倒油、热油、倒蔬菜、倒调料品、翻炒等步骤。现通过模板方法模式来用代 码模拟。类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220624185642361.png"></p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">cookProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//第一步：倒油</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pourOil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第二步：热油</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">heatOil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第三步：倒蔬菜</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pourVegetable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第四步：倒调味料</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pourSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第五步：翻炒</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pourOil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"倒油"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//第二步：热油是一样的，所以直接实现</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heatOil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"热油"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//第三步：倒蔬菜是不一样的（一个下包菜，一个是下菜心）</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">pourVegetable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第四步：倒调味料是不一样</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">pourSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第五步：翻炒是一样的，所以直接实现</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"炒啊炒啊炒到熟啊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteClass_BaoCai</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractClass</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pourVegetable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下锅的蔬菜是包菜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pourSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下锅的酱料是辣椒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteClass_CaiXin</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractClass</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pourVegetable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下锅的蔬菜是菜心"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pourSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下锅的酱料是蒜蓉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//炒手撕包菜</span>        ConcreteClass_BaoCai baoCai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteClass_BaoCai</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        baoCai<span class="token punctuation">.</span><span class="token function">cookProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//炒蒜蓉菜心</span>        ConcreteClass_CaiXin caiXin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteClass_CaiXin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caiXin<span class="token punctuation">.</span><span class="token function">cookProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：为防止恶意操作，一般模板方法都加上 final 关键词。</p></blockquote><h4 id="6-1-3-优缺点"><a href="#6-1-3-优缺点" class="headerlink" title="6.1.3 优缺点"></a>6.1.3 优缺点</h4><p><strong>优点：</strong></p><ul><li><p>提高代码复用性</p><p>将相同部分的代码放在抽象的父类中，而将不同的代码放入不同的子类中。</p></li><li><p>实现了反向控制</p><p>通过一个父类调用其子类的操作，通过对子类的具体实现扩展不同的行为，实现了反向控制 ，并 符合“开闭原则”。</p></li></ul><p><strong>缺点：</strong></p><ul><li>对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽 象。</li><li>父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构， 它提高了代码阅读的难度。</li></ul><h4 id="6-1-4-适用场景"><a href="#6-1-4-适用场景" class="headerlink" title="6.1.4 适用场景"></a>6.1.4 适用场景</h4><ul><li>算法的整体步骤很固定，但其中个别部分易变时，这时候可以使用模板方法模式，将容易变的部分 抽象出来，供子类实现。</li><li>需要通过子类来决定父类算法中某个步骤是否执行，实现子类对父类的反向控制。</li></ul><h4 id="6-1-5-JDK源码解析"><a href="#6-1-5-JDK源码解析" class="headerlink" title="6.1.5 JDK源码解析"></a>6.1.5 JDK源码解析</h4><p>InputStream类就使用了模板方法模式。在InputStream类中定义了多个 read() 方法，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">InputStream</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//抽象方法，要求子类必须重写</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>off <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">></span> b<span class="token punctuation">.</span>length <span class="token operator">-</span> off<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用了无参的read方法，该方法是每次读取一个字节数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        b<span class="token punctuation">[</span>off<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                c <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                b<span class="token punctuation">[</span>off <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ee<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从上面代码可以看到，无参的 read() 方法是抽象方法，要求子类必须实现。而 read(byte b[]) 方法调用了 read(byte b[], int off, int len) 方法，所以在此处重点看的方法是带三个参数的 方法。</p><p>在该方法中第18行、27行，可以看到调用了无参的抽象的 read() 方法。</p><p>总结如下： 在InputStream父类中已经定义好了读取一个字节数组数据的方法是每次读取一个字节， 并将其存储到数组的第一个索引位置，读取len个字节数据。具体如何读取一个字节数据呢？由子类实 现。</p><h3 id="6-2-策略模式"><a href="#6-2-策略模式" class="headerlink" title="6.2 策略模式"></a>6.2 策略模式</h3><h4 id="6-2-1-概述"><a href="#6-2-1-概述" class="headerlink" title="6.2.1 概述"></a>6.2.1 概述</h4><p>我们去旅游选择出行模式有很多种，可以骑自行车、可以坐汽车、可以坐火车、可以 坐飞机。</p><p>作为一个程序猿，开发需要选择一款开发工具，当然可以进行代码开发的工具有很多，可以选择Idea 进行开发，也可以使用eclipse进行开发，也可以使用其他的一些开发工具。</p><p><strong>定义：</strong></p><p>该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用 算法的客户。策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分 割开来，并委派给不同的对象对这些算法进行管理。</p><h4 id="6-2-2-结构"><a href="#6-2-2-结构" class="headerlink" title="6.2.2 结构"></a>6.2.2 结构</h4><p>策略模式的主要角色如下：</p><ul><li>抽象策略（Strategy）类：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有 的具体策略类所需的接口。</li><li>具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现或行 为。</li><li>环境（Context）类：持有一个策略类的引用，最终给客户端调用。</li></ul><h4 id="6-2-3-案例实现"><a href="#6-2-3-案例实现" class="headerlink" title="6.2.3 案例实现"></a>6.2.3 案例实现</h4><p>【例】促销活动</p><p>一家百货公司在定年度的促销活动。针对不同的节日（春节、中秋节、圣诞节）推出不同的促销活动， 由促销员将促销活动展示给客户。类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220624192218339.png"></p><p>代码如下：</p><p>定义百货公司所有促销活动的共同接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>定义具体策略角色（Concrete Strategy）：每个节日具体的促销活动</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//为春节准备的促销活动A</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrategyA</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买一送一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//为中秋准备的促销活动B</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrategyB</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"满200元减50元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//为圣诞准备的促销活动C</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrategyC</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"满1000元加一元换购任意200元以下商品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>定义环境角色（Context）：用于连接上下文，即把促销活动推销给客户，这里可以理解为销售员</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SalesMan</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//持有抽象策略角色的引用</span>    <span class="token keyword">private</span> Strategy strategy<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SalesMan</span><span class="token punctuation">(</span>Strategy strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//向客户展示促销活动</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">salesManShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        strategy<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-2-4-优缺点"><a href="#6-2-4-优缺点" class="headerlink" title="6.2.4 优缺点"></a>6.2.4 优缺点</h4><p><strong>1，优点：</strong></p><ul><li><p>策略类之间可以自由切换</p><p>由于策略类都实现同一个接口，所以使它们之间可以自由切换。</p></li><li><p>易于扩展</p><p>增加一个新的策略只需要添加一个具体的策略类即可，基本不需要改变原有的代码，符合“开闭原 则“</p></li><li><p>避免使用多重条件选择语句（if else），充分体现面向对象设计思想。</p></li></ul><p><strong>2，缺点：</strong></p><ul><li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。</li><li>策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。</li></ul><h4 id="6-2-5-使用场景"><a href="#6-2-5-使用场景" class="headerlink" title="6.2.5 使用场景"></a>6.2.5 使用场景</h4><ul><li>一个系统需要动态地在几种算法中选择一种时，可将每个算法封装到策略类中。</li><li>一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，可将每个条 件分支移入它们各自的策略类中以代替这些条件语句。</li><li>系统中各算法彼此完全独立，且要求对客户隐藏具体算法的实现细节时。</li><li>系统要求使用算法的客户不应该知道其操作的数据时，可使用策略模式来隐藏与算法相关的数据结 构。</li><li>多个类只区别在表现行为不同，可以使用策略模式，在运行时动态选择具体要执行的行为。</li></ul><h4 id="6-2-6-JDK源码解析"><a href="#6-2-6-JDK源码解析" class="headerlink" title="6.2.6 JDK源码解析"></a>6.2.6 JDK源码解析</h4><p>Comparator 中的策略模式。在Arrays类中有一个 sort() 方法，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Arrays</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>LegacyMergeSort<span class="token punctuation">.</span>userRequested<span class="token punctuation">)</span>                <span class="token function">legacyMergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                TimSort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>length<span class="token punctuation">,</span> c<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Arrays就是一个环境角色类，这个sort方法可以传一个新策略让Arrays根据这个策略来进行排序。 就比如下面的测试类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 实现降序排序</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span> Integer o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> o2 <span class="token operator">-</span> o1<span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[12, 5, 4, 3, 2, 2, 1]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里我们在调用Arrays的sort方法时，第二个参数传递的是Comparator接口的子实现类对象。所以 Comparator充当的是抽象策略角色，而具体的子实现类充当的是具体策略角色。环境角色类 （Arrays）应该持有抽象策略的引用来调用。那么，Arrays类的sort方法到底有没有使用 Comparator子实现类中的 compare() 方法吗？让我们继续查看TimSort类的 sort() 方法，代 码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TimSort</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">,</span> Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> c<span class="token punctuation">,</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> work<span class="token punctuation">,</span> <span class="token keyword">int</span> workBase<span class="token punctuation">,</span> <span class="token keyword">int</span> workLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">assert</span> c <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> a <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> lo <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lo <span class="token operator">&lt;=</span> hi <span class="token operator">&amp;&amp;</span> hi <span class="token operator">&lt;=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                <span class="token keyword">int</span> nRemaining <span class="token operator">=</span> hi <span class="token operator">-</span> lo<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nRemaining <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Arrays of size 0 and 1 are always sorted</span>                <span class="token comment" spellcheck="true">// If array is small, do a "mini-TimSort" with no merges</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nRemaining <span class="token operator">&lt;</span> MIN_MERGE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> initRunLen <span class="token operator">=</span> <span class="token function">countRunAndMakeAscending</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">binarySort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">,</span> lo <span class="token operator">+</span> initRunLen<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">int</span> <span class="token function">countRunAndMakeAscending</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">,</span>Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">assert</span> lo <span class="token operator">&lt;</span> hi<span class="token punctuation">;</span>        <span class="token keyword">int</span> runHi <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>runHi <span class="token operator">==</span> hi<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// Find end of run, and reverse range if descending</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>runHi<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Descending</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>runHi <span class="token operator">&lt;</span> hi <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>runHi<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>runHi <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                runHi<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">reverseRange</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> runHi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>runHi <span class="token operator">&lt;</span> hi <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>runHi<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>runHi <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>                runHi<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> runHi <span class="token operator">-</span> lo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的代码中最终会跑到 countRunAndMakeAscending() 这个方法中。我们可以看见，只用了 compare方法，所以在调用Arrays.sort方法只传具体compare重写方法的类对象就行，这也是 Comparator接口中必须要子类实现的一个方法。</p><h3 id="6-3-命令模式"><a href="#6-3-命令模式" class="headerlink" title="6.3 命令模式"></a>6.3 命令模式</h3><h4 id="6-3-1-概述"><a href="#6-3-1-概述" class="headerlink" title="6.3.1 概述"></a>6.3.1 概述</h4><p><strong>定义：</strong></p><p>将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。这样两者之间通过命令对象 进行沟通，这样方便将命令对象进行存储、传递、调用、增加与管理。</p><h4 id="6-3-2-结构"><a href="#6-3-2-结构" class="headerlink" title="6.3.2 结构"></a>6.3.2 结构</h4><p>命令模式包含以下主要角色：</p><ul><li>抽象命令类（Command）角色： 定义命令的接口，声明执行的方法。</li><li>具体命令（Concrete Command）角色：具体的命令，实现命令接口；通常会持有接收者，并调 用接收者的功能来完成命令要执行的操作。</li><li>实现者&#x2F;接收者（Receiver）角色： 接收者，真正执行命令的对象。任何类都可能成为一个接收 者，只要它能够实现命令要求实现的相应功能。</li><li>调用者&#x2F;请求者（Invoker）角色： 要求命令对象执行请求，通常会持有命令对象，可以持有很 多的命令对象。这个是客户端真正触发命令并要求命令执行相应操作的地方，也就是说相当于使用 命令对象的入口。</li></ul><h4 id="6-3-3-案例实现"><a href="#6-3-3-案例实现" class="headerlink" title="6.3.3 案例实现"></a>6.3.3 案例实现</h4><p> 那我们就需要分析命令模式的角色在该案例中由谁来充当。</p><p>服务员： 就是调用者角色，由她来发起命令。</p><p>资深大厨： 就是接收者角色，真正命令执行的对象。</p><p>订单： 命令中包含订单。</p><p>类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220625091611244.png"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只需要定义一个统一的执行方法</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//持有接受者对象</span>    <span class="token keyword">private</span> SeniorChef receiver<span class="token punctuation">;</span>    <span class="token keyword">private</span> Order order<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OrderCommand</span><span class="token punctuation">(</span>SeniorChef receiver<span class="token punctuation">,</span> Order order<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>order <span class="token operator">=</span> order<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getDiningTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"桌的订单："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">getFoodDic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>            receiver<span class="token punctuation">.</span><span class="token function">makeFood</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getFoodDic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//停顿一下 模拟做饭的过程</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getDiningTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"桌的饭弄好了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 餐桌号码</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> diningTable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用来存储餐名并记录份数</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> foodDic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDiningTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> diningTable<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDiningTable</span><span class="token punctuation">(</span><span class="token keyword">int</span> diningTable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>diningTable <span class="token operator">=</span> diningTable<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFoodDic</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        foodDic<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 资深大厨类 是命令的Receiver</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeniorChef</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeFood</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span>String foodName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">"份"</span> <span class="token operator">+</span> foodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Waitor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>Command<span class="token operator">></span> commands<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以持有很多的命令对象</span>    <span class="token keyword">public</span> <span class="token function">Waitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        commands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommand</span><span class="token punctuation">(</span>Command cmd<span class="token punctuation">)</span><span class="token punctuation">{</span>        commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 发出命令 喊 订单来了，厨师开始执行</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">orderUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"美女服务员：叮咚，大厨，新订单来了......."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> commands<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Command     cmd <span class="token operator">=</span> commands<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cmd<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建2个order</span>        Order order1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order1<span class="token punctuation">.</span><span class="token function">setDiningTable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            order1<span class="token punctuation">.</span><span class="token function">getFoodDic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"西红柿鸡蛋面"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order1<span class="token punctuation">.</span><span class="token function">getFoodDic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"小杯可乐"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Order order2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order2<span class="token punctuation">.</span><span class="token function">setDiningTable</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order2<span class="token punctuation">.</span><span class="token function">getFoodDic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"尖椒肉丝盖饭"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order2<span class="token punctuation">.</span><span class="token function">getFoodDic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"小杯雪碧"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//创建接收者</span>        SeniorChef receiver<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SeniorChef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将订单和接收者封装成命令对象</span>        OrderCommand cmd1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderCommand</span><span class="token punctuation">(</span>receiver<span class="token punctuation">,</span> order1<span class="token punctuation">)</span><span class="token punctuation">;</span>        OrderCommand cmd2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderCommand</span><span class="token punctuation">(</span>receiver<span class="token punctuation">,</span> order2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建调用者 waitor</span>        Waitor invoker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Waitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        invoker<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span>cmd1<span class="token punctuation">)</span><span class="token punctuation">;</span>        invoker<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span>cmd2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将订单带到柜台 并向厨师喊 订单来了</span>        invoker<span class="token punctuation">.</span><span class="token function">orderUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-3-4-优缺点"><a href="#6-3-4-优缺点" class="headerlink" title="6.3.4 优缺点"></a>6.3.4 优缺点</h4><p><strong>1，优点：</strong></p><ul><li>降低系统的耦合度。命令模式能将调用操作的对象与实现该操作的对象解耦。</li><li>增加或删除命令非常方便。采用命令模式增加与删除命令不会影响其他类，它满足“开闭原则”， 对扩展比较灵活。</li><li>可以实现宏命令。命令模式可以与组合模式结合，将多个命令装配成一个组合命令，即宏命令。</li><li>方便实现 Undo 和 Redo 操作。命令模式可以与后面介绍的备忘录模式结合，实现命令的撤销 与恢复。</li></ul><p><strong>2，缺点：</strong></p><ul><li>使用命令模式可能会导致某些系统有过多的具体命令类。</li><li>系统结构更加复杂。</li></ul><h4 id="6-3-5-使用场景"><a href="#6-3-5-使用场景" class="headerlink" title="6.3.5 使用场景"></a>6.3.5 使用场景</h4><ul><li>系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。</li><li>系统需要在不同的时间指定请求、将请求排队和执行请求。</li><li>系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。</li></ul><h4 id="6-3-6-JDK源码解析"><a href="#6-3-6-JDK源码解析" class="headerlink" title="6.3.6 JDK源码解析"></a>6.3.6 JDK源码解析</h4><p>Runable是一个典型命令模式，Runnable担当命令的角色，Thread充当的是调用者，start方法就 是其执行方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//命令接口(抽象命令角色)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Runnable target<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>started<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    group<span class="token punctuation">.</span><span class="token function">threadStartFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>会调用一个native方法start0(),调用系统方法，开启一个线程。而接收者是对程序员开放的，可以 自己定义接收者。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** jdk Runnable 命令模式* TurnOffThread ： 属于具体*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TurnOffThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Receiver receiver<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TurnOffThread</span><span class="token punctuation">(</span>Receiver receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        receiver<span class="token punctuation">.</span><span class="token function">turnOFF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 测试类*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Receiver receiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Receiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TurnOffThread turnOffThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TurnOffThread</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>turnOffThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-4-责任链模式"><a href="#6-4-责任链模式" class="headerlink" title="6.4 责任链模式"></a>6.4 责任链模式</h3><h4 id="6-4-1-概述"><a href="#6-4-1-概述" class="headerlink" title="6.4.1 概述"></a>6.4.1 概述</h4><p>在现实生活中，常常会出现这样的事例：一个请求有多个对象可以处理，但每个对象的处理条件或权限 不同。例如，公司员工请假，可批假的领导有部门负责人、副总经理、总经理等，但每个领导能批准的 天数不同，员工必须根据自己要请假的天数去找不同的领导签名，也就是说员工必须记住每个领导的姓 名、电话和地址等信息，这增加了难度。这样的例子还有很多，如找领导出差报销、生活中的“击鼓传 花”游戏等。</p><p><strong>定义：</strong></p><p>又名职责链模式，为了避免请求发送者与多个请求处理者耦合在一起，将所有请求的处理者通过前一对 象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处 理它为止。</p><h4 id="6-4-2-结构"><a href="#6-4-2-结构" class="headerlink" title="6.4.2 结构"></a>6.4.2 结构</h4><p>职责链模式主要包含以下角色:</p><ul><li>抽象处理者（Handler）角色：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。</li><li>具体处理者（Concrete Handler）角色：实现抽象处理者的处理方法，判断能否处理本次请 求，如果可以处理请求则处理，否则将该请求转给它的后继者。</li><li>客户类（Client）角色：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节 和请求的传递过程。</li></ul><h4 id="6-4-3-案例实现"><a href="#6-4-3-案例实现" class="headerlink" title="6.4.3 案例实现"></a>6.4.3 案例实现</h4><p>现需要开发一个请假流程控制系统。请假一天以下的假只需要小组长同意即可；请假1天到3天的假还需 要部门经理同意；请求3天到7天还需要总经理同意才行。</p><p>类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220625162828534.png"></p><p>代码如下：    </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//请假条</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeaveRequest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//请假天数</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//请假内容</span>    <span class="token keyword">public</span> <span class="token function">LeaveRequest</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">,</span> String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//处理者抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> NUM_ONE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> NUM_THREE <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> NUM_SEVEN <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//该领导处理的请假天数区间</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numStart<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numEnd<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//领导上面还有领导</span>    <span class="token keyword">private</span> Handler nextHandler<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置请假天数范围 上不封顶</span>    <span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> numStart<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>numStart <span class="token operator">=</span> numStart<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置请假天数范围</span>    <span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> numStart<span class="token punctuation">,</span> <span class="token keyword">int</span> numEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>numStart <span class="token operator">=</span> numStart<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>numEnd <span class="token operator">=</span> numEnd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置上级领导</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNextHandler</span><span class="token punctuation">(</span>Handler nextHandler<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextHandler <span class="token operator">=</span> nextHandler<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//提交请假条</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">submit</span><span class="token punctuation">(</span>LeaveRequest leave<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numStart<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果请假天数达到该领导者的处理要求</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>leave<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numStart<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleLeave</span><span class="token punctuation">(</span>leave<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果还有上级 并且请假天数超过了当前领导的处理范围</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextHandler <span class="token operator">&amp;&amp;</span> leave<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> numEnd<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>nextHandler<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>leave<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继续提交</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"流程结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//各级领导处理请假条方法</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleLeave</span><span class="token punctuation">(</span>LeaveRequest leave<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//小组长</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupLeader</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">GroupLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//小组长处理1-3天的请假</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>Handler<span class="token punctuation">.</span>NUM_ONE<span class="token punctuation">,</span> Handler<span class="token punctuation">.</span>NUM_THREE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleLeave</span><span class="token punctuation">(</span>LeaveRequest leave<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>leave<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"请假"</span> <span class="token operator">+</span> leave<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"天,"</span> <span class="token operator">+</span> leave<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小组长审批：同意。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//部门经理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//部门经理处理3-7天的请假</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>Handler<span class="token punctuation">.</span>NUM_THREE<span class="token punctuation">,</span> Handler<span class="token punctuation">.</span>NUM_SEVEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleLeave</span><span class="token punctuation">(</span>LeaveRequest leave<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>leave<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"请假"</span> <span class="token operator">+</span> leave<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"天,"</span> <span class="token operator">+</span> leave<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"部门经理审批：同意。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//总经理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneralManager</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">GeneralManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//部门经理处理7天以上的请假</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>Handler<span class="token punctuation">.</span>NUM_SEVEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleLeave</span><span class="token punctuation">(</span>LeaveRequest leave<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>leave<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"请假"</span> <span class="token operator">+</span> leave<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"天,"</span> <span class="token operator">+</span> leave<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总经理审批：同意。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//请假条来一张</span>        LeaveRequest leave <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeaveRequest</span><span class="token punctuation">(</span><span class="token string">"小花"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"身体不适"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//各位领导</span>        GroupLeader groupLeader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroupLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Manager manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GeneralManager generalManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeneralManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        groupLeader<span class="token punctuation">.</span><span class="token function">setNextHandler</span><span class="token punctuation">(</span>manager<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小组长的领导是部门经理</span>        manager<span class="token punctuation">.</span><span class="token function">setNextHandler</span><span class="token punctuation">(</span>generalManager<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//部门经理的领导是总经理</span>        <span class="token comment" spellcheck="true">//之所以在这里设置上级领导，是因为可以根据实际需求来更改设置，如果实战中上级领导人都是固定的，则可以移到领导实现类中。</span>        <span class="token comment" spellcheck="true">//提交申请</span>        groupLeader<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>leave<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-4-4-优缺点"><a href="#6-4-4-优缺点" class="headerlink" title="6.4.4 优缺点"></a>6.4.4 优缺点</h4><p><strong>1，优点：</strong></p><ul><li><p>降低了对象之间的耦合度</p><p>该模式降低了请求发送者和接收者的耦合度。</p></li><li><p>增强了系统的可扩展性</p><p>可以根据需要增加新的请求处理类，满足开闭原则。</p></li><li><p>增强了给对象指派职责的灵活性</p><p>当工作流程发生变化，可以动态地改变链内的成员或者修改它们的次序，也可动态地新增或者删除 责任。</p></li><li><p>责任链简化了对象之间的连接</p><p>一个对象只需保持一个指向其后继者的引用，不需保持其他所有处理者的引用，这避免了使用众多 的 if 或者 if···else 语句。</p></li><li><p>责任分担</p><p>每个类只需要处理自己该处理的工作，不能处理的传递给下一个对象完成，明确各类的责任范围， 符合类的单一职责原则。</p></li></ul><p><strong>2，缺点：</strong></p><ul><li>不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理， 该请求可能一直传到链的末端都得不到处理。</li><li>对比较长的职责链，请求的处理可能涉及多个处理对象，系统性能将受到一定影响。</li><li>职责链建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于职责链的错误设置而 导致系统出错，如可能会造成循环调用。</li></ul><h4 id="6-4-5-源码解析"><a href="#6-4-5-源码解析" class="headerlink" title="6.4.5 源码解析"></a>6.4.5 源码解析</h4><p>在javaWeb应用开发中，FilterChain是职责链（过滤器）模式的典型应用，以下是Filter的模拟 实现分析:</p><ul><li><p>模拟web请求Request以及web响应Response</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Request</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Response</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>模拟web过滤器Filter</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>Request req<span class="token punctuation">,</span>Response res<span class="token punctuation">,</span>FilterChain c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>模拟实现具体过滤器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> Response response<span class="token punctuation">,</span>FilterChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过滤器1 前置处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先执行所有request再倒序执行所有response</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过滤器1 后置处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> Response response<span class="token punctuation">,</span>FilterChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过滤器2 前置处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先执行所有request再倒序执行所有response</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过滤器2 后置处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>模拟实现过滤器链FilterChain</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterChain</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Filter<span class="token operator">></span> filters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Filter<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 链式调用</span>    <span class="token keyword">public</span> FilterChain <span class="token function">addFilter</span><span class="token punctuation">(</span>Filter filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>filters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> filters<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Filter filter <span class="token operator">=</span> filters<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Request req <span class="token operator">=</span> null<span class="token punctuation">;</span>        Response res <span class="token operator">=</span> null <span class="token punctuation">;</span>        FilterChain filterChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FirstFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span>        <span class="token class-name">SecondFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="6-5-状态模式"><a href="#6-5-状态模式" class="headerlink" title="6.5 状态模式"></a>6.5 状态模式</h3><h4 id="6-5-1-概述"><a href="#6-5-1-概述" class="headerlink" title="6.5.1 概述"></a>6.5.1 概述</h4><p>【例】通过按钮来控制一个电梯的状态，一个电梯有开门状态，关门状态，停止状态，运行状态。每一 种状态改变，都有可能要根据其他状态来更新处理。例如，如果电梯门现在处于运行时状态，就不能进 行开门操作，而如果电梯门是停止状态，就可以执行开门操作。</p><p>类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220625203023709.png"></p><p><strong>定义：</strong></p><p>对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变 时改变其行为。</p><h4 id="6-5-2-结构"><a href="#6-5-2-结构" class="headerlink" title="6.5.2 结构"></a>6.5.2 结构</h4><p>状态模式包含以下主要角色。</p><ul><li>环境（Context）角色：也称为上下文，它定义了客户程序需要的接口，维护一个当前状态，并 将与状态相关的操作委托给当前状态对象来处理。</li><li>抽象状态（State）角色：定义一个接口，用以封装环境对象中的特定状态所对应的行为。</li><li>具体状态（Concrete State）角色：实现抽象状态所对应的行为。</li></ul><h4 id="6-5-3-案例实现"><a href="#6-5-3-案例实现" class="headerlink" title="6.5.3 案例实现"></a>6.5.3 案例实现</h4><p>对上述电梯的案例使用状态模式进行改进。类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220626092239175.png"></p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//抽象状态类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LiftState</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个环境角色，也就是封装状态的变化引起的功能变化</span>    <span class="token keyword">protected</span> Context context<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContext</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//电梯开门动作</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//电梯关门动作</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//电梯运行动作</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//电梯停止动作</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//开启状态</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OpenningState</span> <span class="token keyword">extends</span> <span class="token class-name">LiftState</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//开启当然可以关闭了，我就想测试一下电梯门开关功能</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电梯门开启..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//状态修改</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">setLiftState</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>closeingState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getLiftState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//电梯门不能开着就跑，这里什么也不做</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//do nothing</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//开门状态已经是停止的了</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//do nothing</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行状态</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunningState</span> <span class="token keyword">extends</span> <span class="token class-name">LiftState</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//运行的时候开电梯门？你疯了！电梯不会给你开的</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//do nothing</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//电梯门关闭？这是肯定了</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//虽然可以关门，但这个动作不归我执行</span>        <span class="token comment" spellcheck="true">//do nothing</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这是在运行状态下要实现的方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电梯正在运行..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这个事绝对是合理的，光运行不停止还有谁敢做这个电梯？！估计只有上帝了</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">setLiftState</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>stoppingState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//停止状态</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StoppingState</span> <span class="token keyword">extends</span> <span class="token class-name">LiftState</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//停止状态，开门，那是要的！</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//状态修改</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">setLiftState</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>openningState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getLiftState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//虽然可以关门，但这个动作不归我执行</span>        <span class="token comment" spellcheck="true">//状态修改</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">setLiftState</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>closeingState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getLiftState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//停止状态再跑起来，正常的很</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//状态修改</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">setLiftState</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>runningState<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getLiftState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//停止状态是怎么发生的呢？当然是停止方法执行了</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电梯停止了..."</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//关闭状态</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClosingState</span> <span class="token keyword">extends</span> <span class="token class-name">LiftState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//电梯门关闭，这是关闭状态要实现的动作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电梯门关闭..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//电梯门关了再打开，逗你玩呢，那这个允许呀</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">setLiftState</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>openningState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//电梯门关了就跑，这是再正常不过了</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">setLiftState</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>runningState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//电梯门关着，我就不按楼层</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">setLiftState</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>stoppingState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//环境角色</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义出所有的电梯状态</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> OpenningState openningState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenningState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开门状态，这时候电梯只能关闭</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> ClosingState closeingState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClosingState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭状态，这时候电梯可以运行、停止和开门</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> RunningState runningState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RunningState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运行状态，这时候电梯只能停止</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> StoppingState stoppingState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StoppingState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//停止状态，这时候电梯可以开门、运行</span>    <span class="token comment" spellcheck="true">//定义一个当前电梯状态</span>    <span class="token keyword">private</span> LiftState liftState<span class="token punctuation">;</span>    <span class="token keyword">public</span> LiftState <span class="token function">getLiftState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>liftState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLiftState</span><span class="token punctuation">(</span>LiftState liftState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//当前环境改变</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>liftState <span class="token operator">=</span> liftState<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把当前的环境通知到各个实现类中</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>liftState<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>liftState<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>liftState<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>liftState<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>liftState<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Context context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setLiftState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClosingState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-5-4-优缺点"><a href="#6-5-4-优缺点" class="headerlink" title="6.5.4 优缺点"></a>6.5.4 优缺点</h4><p><strong>1，优点：</strong></p><ul><li>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态 即可改变对象的行为。</li><li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。</li></ul><p><strong>2，缺点：</strong></p><ul><li>状态模式的使用必然会增加系统类和对象的个数。</li><li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。</li><li>状态模式对”开闭原则”的支持并不太好。</li></ul><h4 id="6-5-5-使用场景"><a href="#6-5-5-使用场景" class="headerlink" title="6.5.5 使用场景"></a>6.5.5 使用场景</h4><ul><li>当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时，就可以考虑使 用状态模式。</li><li>一个操作中含有庞大的分支结构，并且这些分支决定于对象的状态时。</li></ul><h3 id="6-6-观察者模式"><a href="#6-6-观察者模式" class="headerlink" title="6.6 观察者模式"></a>6.6 观察者模式</h3><h4 id="6-6-1-概述"><a href="#6-6-1-概述" class="headerlink" title="6.6.1 概述"></a>6.6.1 概述</h4><p><strong>定义：</strong></p><p>又被称为发布-订阅（Publish&#x2F;Subscribe）模式，它定义了一种一对多的依赖关系，让多个观察者 对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自 动更新自己。</p><h4 id="6-6-2-结构"><a href="#6-6-2-结构" class="headerlink" title="6.6.2 结构"></a>6.6.2 结构</h4><p>在观察者模式中有如下角色：</p><ul><li>Subject：抽象主题（抽象被观察者），抽象主题角色把所有观察者对象保存在一个集合里，每 个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。</li><li>ConcreteSubject：具体主题（具体被观察者），该角色将有关状态存入具体观察者对象，在具 体主题的内部状态发生改变时，给所有注册过的观察者发送通知。</li><li>Observer：抽象观察者，是观察者的抽象类，它定义了一个更新接口，使得在得到主题更改通知 时更新自己。</li><li>ConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知 时更新自身的状态。</li></ul><h4 id="6-6-3-案例实现"><a href="#6-6-3-案例实现" class="headerlink" title="6.6.3 案例实现"></a>6.6.3 案例实现</h4><p>【例】微信公众号</p><p>在使用微信公众号时，大家都会有这样的体验，当你关注的公众号中有新内容更新的话，它就会推送给 关注公众号的微信用户端。我们使用观察者模式来模拟这样的场景，微信用户就是观察者，微信公众号 是被观察者，有多个的微信用户关注了程序猿这个公众号。</p><p>类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220626151245722.png"></p><p>代码如下：</p><p>定义抽象观察者类，里面定义一个更新的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>定义具体观察者类，微信用户是观察者，里面实现了更新的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeixinUser</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 微信用户名</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">WeixinUser</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>定义抽象主题类，提供了attach、detach、notify三个方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//增加订阅者</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除订阅者</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通知订阅者更新消息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>微信公众号是具体主题（具体被观察者），里面存储了订阅该公众号的微信用户，并实现了抽象主题中 的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubscriptionSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//储存订阅公众号的微信用户</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Observer<span class="token operator">></span> weixinUserlist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Observer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        weixinUserlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        weixinUserlist<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Observer observer <span class="token operator">:</span> weixinUserlist<span class="token punctuation">)</span> <span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端程序</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SubscriptionSubject mSubscriptionSubject<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SubscriptionSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建微信用户</span>        WeixinUser user1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">WeixinUser</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WeixinUser user2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">WeixinUser</span><span class="token punctuation">(</span><span class="token string">"猪悟能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WeixinUser user3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">WeixinUser</span><span class="token punctuation">(</span><span class="token string">"沙悟净"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//订阅公众号</span>        mSubscriptionSubject<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        mSubscriptionSubject<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        mSubscriptionSubject<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//公众号更新发出消息给订阅的微信用户</span>        mSubscriptionSubject<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">"传智黑马的专栏更新了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-6-4-优缺点"><a href="#6-6-4-优缺点" class="headerlink" title="6.6.4 优缺点"></a>6.6.4 优缺点</h4><p><strong>1，优点：</strong></p><ul><li>降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。</li><li>被观察者发送通知，所有注册的观察者都会收到信息【可以实现广播机制】</li></ul><p><strong>2，缺点：</strong></p><ul><li>如果观察者非常多的话，那么所有的观察者收到被观察者发送的通知会耗时</li><li>如果被观察者有循环依赖的话，那么被观察者发送通知会使观察者循环调用，会导致系统崩溃</li></ul><h4 id="6-6-5-使用场景"><a href="#6-6-5-使用场景" class="headerlink" title="6.6.5 使用场景"></a>6.6.5 使用场景</h4><ul><li>对象间存在一对多关系，一个对象的状态发生改变会影响其他对象。</li><li>当一个抽象模型有两个方面，其中一个方面依赖于另一方面时。</li></ul><h4 id="6-6-6-JDK中提供的实现"><a href="#6-6-6-JDK中提供的实现" class="headerlink" title="6.6.6 JDK中提供的实现"></a>6.6.6 JDK中提供的实现</h4><p>在 Java 中，通过 java.util.Observable 类和 java.util.Observer 接口定义了观察者模 式，只要实现它们的子类就可以编写观察者模式实例。</p><p><strong>1，Observable类</strong></p><p>Observable 类是抽象目标类（被观察者），它有一个 Vector 集合成员变量，用于保存所有要通 知的观察者对象，下面来介绍它最重要的 3 个方法。</p><ul><li>void addObserver(Observer o) 方法：用于将新的观察者对象添加到集合中。</li><li>void notifyObservers(Object arg) 方法：调用集合中的所有观察者对象的 update方 法，通知它们数据发生改变。通常越晚加入集合的观察者越先得到通知。</li><li>void setChange() 方法：用来设置一个 boolean 类型的内部标志，注明目标对象发生了变 化。当它为true时，notifyObservers() 才会通知观察者。</li></ul><p><strong>2，Observer 接口</strong></p><p>Observer 接口是抽象观察者，它监视目标对象的变化，当目标对象发生变化时，观察者得到通知， 并调用 update 方法，进行相应的工作。</p><p>【例】警察抓小偷</p><p>警察抓小偷也可以使用观察者模式来实现，警察是观察者，小偷是被观察者。代码如下：</p><p>小偷是一个被观察者，所以需要继承Observable类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thief</span> <span class="token keyword">extends</span> <span class="token class-name">Observable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Thief</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">steal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小偷：我偷东西了，有没有人来抓我！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//changed = true</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>警察是一个观察者，所以需要让其实现Observer接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Policemen</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Policemen</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Observable o<span class="token punctuation">,</span> Object arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"警察："</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Thief<span class="token punctuation">)</span> o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，我已经盯你很久了，你可以保持沉默，但你所说的将成为呈堂证供！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建小偷对象</span>        Thief t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thief</span><span class="token punctuation">(</span><span class="token string">"隔壁老王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建警察对象</span>        Policemen p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Policemen</span><span class="token punctuation">(</span><span class="token string">"小李"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//让警察盯着小偷</span>        t<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//小偷偷东西</span>        t<span class="token punctuation">.</span><span class="token function">steal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-7-中介者模式"><a href="#6-7-中介者模式" class="headerlink" title="6.7 中介者模式"></a>6.7 中介者模式</h3><h4 id="6-7-1-概述"><a href="#6-7-1-概述" class="headerlink" title="6.7.1 概述"></a>6.7.1 概述</h4><p><strong>定义：</strong></p><p>又叫调停模式，定义一个中介角色来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以 独立地改变它们之间的交互。</p><h4 id="6-7-2-结构"><a href="#6-7-2-结构" class="headerlink" title="6.7.2 结构"></a>6.7.2 结构</h4><p>中介者模式包含以下主要角色：</p><ul><li>抽象中介者（Mediator）角色：它是中介者的接口，提供了同事对象注册与转发同事对象信息的 抽象方法。</li><li>具体中介者（ConcreteMediator）角色：实现中介者接口，定义一个 List 来管理同事对 象，协调各个同事角色之间的交互关系，因此它依赖于同事角色。</li><li>抽象同事类（Colleague）角色：定义同事类的接口，保存中介者对象，提供同事对象交互的抽 象方法，实现所有相互影响的同事类的公共功能。</li><li>具体同事类（Concrete Colleague）角色：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互。</li></ul><h4 id="6-7-3-案例实现"><a href="#6-7-3-案例实现" class="headerlink" title="6.7.3 案例实现"></a>6.7.3 案例实现</h4><p>【例】租房</p><p>现在租房基本都是通过房屋中介，房主将房屋托管给房屋中介，而租房者从房屋中介获取房屋信息。房 屋中介充当租房者与房屋所有者之间的中介者。</p><p>类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220626164323416.png"></p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//抽象中介者</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//申明一个联络方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">constact</span><span class="token punctuation">(</span>String message<span class="token punctuation">,</span>Person person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//抽象同事类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> String name<span class="token punctuation">;</span>    <span class="token keyword">protected</span> Mediator mediator<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Mediator mediator<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体同事类 房屋拥有者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HouseOwner</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">HouseOwner</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Mediator mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//与中介者联系</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">constact</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        mediator<span class="token punctuation">.</span><span class="token function">constact</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房主"</span> <span class="token operator">+</span> name <span class="token operator">+</span><span class="token string">"获取到的信息："</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体同事类 承租人</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tenant</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Tenant</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Mediator mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> mediator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//与中介者联系</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">constact</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        mediator<span class="token punctuation">.</span><span class="token function">constact</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"租房者"</span> <span class="token operator">+</span> name <span class="token operator">+</span><span class="token string">"获取到的信息："</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//中介机构</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MediatorStructure</span> <span class="token keyword">extends</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//首先中介结构必须知道所有房主和租房者的信息</span>    <span class="token keyword">private</span> HouseOwner houseOwner<span class="token punctuation">;</span>    <span class="token keyword">private</span> Tenant tenant<span class="token punctuation">;</span>    <span class="token keyword">public</span> HouseOwner <span class="token function">getHouseOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> houseOwner<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHouseOwner</span><span class="token punctuation">(</span>HouseOwner houseOwner<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>houseOwner <span class="token operator">=</span> houseOwner<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Tenant <span class="token function">getTenant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> tenant<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTenant</span><span class="token punctuation">(</span>Tenant tenant<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tenant <span class="token operator">=</span> tenant<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">constact</span><span class="token punctuation">(</span>String message<span class="token punctuation">,</span> Person person<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token operator">==</span> houseOwner<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果是房主，则租房者获得信息</span>            tenant<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//反正则是房主获得信息</span>            houseOwner<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一个房主、一个租房者、一个中介机构</span>        MediatorStructure mediator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MediatorStructure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//房主和租房者只需要知道中介机构即可</span>        HouseOwner houseOwner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HouseOwner</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        Tenant tenant <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tenant</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//中介结构要知道房主和租房者</span>        mediator<span class="token punctuation">.</span><span class="token function">setHouseOwner</span><span class="token punctuation">(</span>houseOwner<span class="token punctuation">)</span><span class="token punctuation">;</span>        mediator<span class="token punctuation">.</span><span class="token function">setTenant</span><span class="token punctuation">(</span>tenant<span class="token punctuation">)</span><span class="token punctuation">;</span>        tenant<span class="token punctuation">.</span><span class="token function">constact</span><span class="token punctuation">(</span><span class="token string">"需要租三室的房子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        houseOwner<span class="token punctuation">.</span><span class="token function">constact</span><span class="token punctuation">(</span><span class="token string">"我这有三室的房子，你需要租吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-7-4-优缺点"><a href="#6-7-4-优缺点" class="headerlink" title="6.7.4 优缺点"></a>6.7.4 优缺点</h4><p><strong>1，优点：</strong></p><ul><li><p>松散耦合</p><p>中介者模式通过把多个同事对象之间的交互封装到中介者对象里面，从而使得同事对象之间松散耦 合，基本上可以做到互补依赖。这样一来，同事对象就可以独立地变化和复用，而不再像以前那样 “牵一处而动全身”了。</p></li><li><p>集中控制交互</p><p>多个同事对象的交互，被封装在中介者对象里面集中管理，使得这些交互行为发生变化的时候，只 需要修改中介者对象就可以了，当然如果是已经做好的系统，那么就扩展中介者对象，而各个同事 类不需要做修改。</p></li><li><p>一对多关联转变为一对一的关联</p><p>没有使用中介者模式的时候，同事对象之间的关系通常是一对多的，引入中介者对象以后，中介者 对象和同事对象的关系通常变成双向的一对一，这会让对象的关系更容易理解和实现。</p></li></ul><p><strong>2，缺点：</strong></p><p>当同事类太多时，中介者的职责将很大，它会变得复杂而庞大，以至于系统难以维护。</p><h4 id="6-7-5-使用场景"><a href="#6-7-5-使用场景" class="headerlink" title="6.7.5 使用场景"></a>6.7.5 使用场景</h4><ul><li>系统中对象之间存在复杂的引用关系，系统结构混乱且难以理解。</li><li>当想创建一个运行于多个类之间的对象，又不想生成新的子类时。</li></ul><h3 id="6-8-迭代器模式"><a href="#6-8-迭代器模式" class="headerlink" title="6.8 迭代器模式"></a>6.8 迭代器模式</h3><h4 id="6-8-1-概述"><a href="#6-8-1-概述" class="headerlink" title="6.8.1 概述"></a>6.8.1 概述</h4><p><strong>定义：</strong></p><p>提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</p><h4 id="6-8-2-结构"><a href="#6-8-2-结构" class="headerlink" title="6.8.2 结构"></a>6.8.2 结构</h4><p>迭代器模式主要包含以下角色：</p><ul><li>抽象聚合（Aggregate）角色：定义存储、添加、删除聚合元素以及创建迭代器对象的接口。</li><li>具体聚合（ConcreteAggregate）角色：实现抽象聚合类，返回一个具体迭代器的实例。</li><li>抽象迭代器（Iterator）角色：定义访问和遍历聚合元素的接口，通常包含 hasNext()、 next() 等方法。</li><li>具体迭代器（Concretelterator）角色：实现抽象迭代器接口中所定义的方法，完成对聚合对 象的遍历，记录遍历的当前位置。</li></ul><h4 id="6-8-3-案例实现"><a href="#6-8-3-案例实现" class="headerlink" title="6.8.3 案例实现"></a>6.8.3 案例实现</h4><p>【例】定义一个可以存储学生对象的容器对象，将遍历该容器的功能交由迭代器实现，涉及到的类如 下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220626174528267.png"></p><p>代码如下：</p><p>定义迭代器接口，声明hasNext、next方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentIterator</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>定义具体的迭代器类，重写所有的抽象方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentIteratorImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentIterator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">StudentIteratorImpl</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> position <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Student <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student currentStudent <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        position <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> currentStudent<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>定义抽象容器类，包含添加元素，删除元素，获取迭代器对象的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentAggregate</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">addStudent</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">removeStudent</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentIterator <span class="token function">getStudentIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>定义具体的容器类，重写所有的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentAggregateImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentAggregate</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 学生列表</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addStudent</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeStudent</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> StudentIterator <span class="token function">getStudentIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StudentIteratorImpl</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-8-4-优缺点"><a href="#6-8-4-优缺点" class="headerlink" title="6.8.4 优缺点"></a>6.8.4 优缺点</h4><p><strong>1，优点：</strong></p><ul><li>它支持以不同的方式遍历一个聚合对象，在同一个聚合对象上可以定义多种遍历方式。在迭代器模 式中只需要用一个不同的迭代器来替换原有迭代器即可改变遍历算法，我们也可以自己定义迭代器的子类以支持新的遍历方式。</li><li>迭代器简化了聚合类。由于引入了迭代器，在原有的聚合对象中不需要再自行提供数据遍历等方 法，这样可以简化聚合类的设计。</li><li>在迭代器模式中，由于引入了抽象层，增加新的聚合类和迭代器类都很方便，无须修改原有代码， 满足 “开闭原则” 的要求。</li></ul><p><strong>2，缺点：</strong></p><p>增加了类的个数，这在一定程度上增加了系统的复杂性。</p><h4 id="6-8-5-使用场景"><a href="#6-8-5-使用场景" class="headerlink" title="6.8.5 使用场景"></a>6.8.5 使用场景</h4><ul><li>当需要为聚合对象提供多种遍历方式时。</li><li>当需要为遍历不同的聚合结构提供一个统一的接口时。</li><li>当访问一个聚合对象的内容而无须暴露其内部细节的表示时。</li></ul><h4 id="6-8-6-JDK源码解析"><a href="#6-8-6-JDK源码解析" class="headerlink" title="6.8.6 JDK源码解析"></a>6.8.6 JDK源码解析</h4><p>迭代器模式在JAVA的很多集合类中被广泛应用，接下来看看JAVA源码中是如何使用迭代器模式的。</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//list.iterator()方法返回的肯定是 Iterator 接口的子实现类对象</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>与我们上面代码基本类似。单列集合都使用到了迭代器，我们以 ArrayList举例来说明</p><ul><li>List：抽象聚合类</li><li>ArrayList：具体的聚合类</li><li>Iterator：抽象迭代器</li><li>list.iterator()：返回的是实现了 Iterator 接口的具体迭代器对象</li></ul><p>具体的来看看 ArrayList的代码实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> RandomAccess<span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span>    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cursor<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 下一个要返回元素的索引</span>        <span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 上一个返回元素的索引</span>        <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        <span class="token function">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//判断是否还有元素</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cursor <span class="token operator">!=</span> size<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取下一个元素</span>        <span class="token keyword">public</span> E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> size<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>这部分代码还是比较简单，大致就是在 iterator 方法中返回了一个实例化的 Iterator 对象。 Itr是一个内部类，它实现了 Iterator 接口并重写了其中的抽象方法。</p><blockquote><p>注意：</p><p>当我们在使用JAVA开发的时候，想使用迭代器模式的话，只要让我们自己定义的容器类实现<code>java.util.Iterable</code>并实现其中的iterator()方法使其返回一个<code> java.util.Iterator</code> 的 实现类就可以了。</p></blockquote><h3 id="6-9-访问者模式"><a href="#6-9-访问者模式" class="headerlink" title="6.9 访问者模式"></a>6.9 访问者模式</h3><h4 id="6-9-1-概述"><a href="#6-9-1-概述" class="headerlink" title="6.9.1 概述"></a>6.9.1 概述</h4><p><strong>定义：</strong></p><p>封装一些作用于某种数据结构中的各元素的操作，它可以在不改变这个数据结构的前提下定义作用于这些元素的新的操作。</p><h4 id="6-9-2-结构"><a href="#6-9-2-结构" class="headerlink" title="6.9.2 结构"></a>6.9.2 结构</h4><p>访问者模式包含以下主要角色:</p><ul><li>抽象访问者（Visitor）角色：定义了对每一个元素 （Element） 访问的行为，它的参数就是可以访问的元素，它的方法个数理论上来讲与元素类个数（Element的实现类个数）是一样的，从 这点不难看出，访问者模式要求元素类的个数不能改变。</li><li>具体访问者（ConcreteVisitor）角色：给出对每一个元素类访问时所产生的具体行为。</li><li>抽象元素（Element）角色：定义了一个接受访问者的方法（ accept ），其意义是指，每一个元 素都要可以被访问者访问。</li><li>具体元素（ConcreteElement）角色： 提供接受访问方法的具体实现，而这个具体的实现，通 常情况下是使用访问者提供的访问该元素类的方法。</li><li>对象结构（Object Structure）角色：定义当中所提到的对象结构，对象结构是一个抽象表 述，具体点可以理解为一个具有容器性质或者复合对象特性的类，它会含有一组元素 （ Element ），并且可以迭代这些元素，供访问者访问。</li></ul><h4 id="6-9-3-案例实现"><a href="#6-9-3-案例实现" class="headerlink" title="6.9.3 案例实现"></a>6.9.3 案例实现</h4><p>【例】给宠物喂食</p><p>现在养宠物的人特别多，我们就以这个为例，当然宠物还分为狗，猫等，要给宠物喂食的话，主人可以 喂，其他人也可以喂食。</p><ul><li>访问者角色：给宠物喂食的人</li><li>具体访问者角色：主人、其他人</li><li>抽象元素角色：动物抽象类</li><li>具体元素角色：宠物狗、宠物猫</li><li>结构对象角色：主人家</li></ul><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220626183828952.png"></p><p>代码如下：</p><p>创建抽象访问者接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span>Cat cat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span>Dog dog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建不同的具体访问者角色（主人和其他人），都需要实现 Person 接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Owner</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span>Cat cat<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主人喂食猫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span>Dog dog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主人喂食狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Someone</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span>Cat cat<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"其他人喂食猫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span>Dog dog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"其他人喂食狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>定义抽象节点 – 宠物</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>定义实现 Animal 接口的 具体节点（元素）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token punctuation">{</span>        person<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好好吃，汪汪汪！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token punctuation">{</span>        person<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好好吃，喵喵喵！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>定义对象结构，此案例中就是主人的家</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Home</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Animal<span class="token operator">></span> nodeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Animal<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Animal node <span class="token operator">:</span> nodeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//添加操作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Animal animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Home home <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        home<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        home<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Owner owner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Owner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        home<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>        Someone someone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Someone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        home<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span>someone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-9-4-优缺点"><a href="#6-9-4-优缺点" class="headerlink" title="6.9.4 优缺点"></a>6.9.4 优缺点</h4><p><strong>1，优点：</strong></p><ul><li><p>扩展性好</p><p>在不修改对象结构中的元素的情况下，为对象结构中的元素添加新的功能。</p></li><li><p>复用性好</p><p>通过访问者来定义整个对象结构通用的功能，从而提高复用程度。</p></li><li><p>分离无关行为</p><p>通过访问者来分离无关的行为，把相关的行为封装在一起，构成一个访问者，这样每一个访问者的 功能都比较单一。</p></li></ul><p><strong>2，缺点：</strong></p><ul><li><p>对象结构变化很困难</p><p>在访问者模式中，每增加一个新的元素类，都要在每一个具体访问者类中增加相应的具体操作，这 违背了“开闭原则”。</p></li><li><p>违反了依赖倒置原则</p><p>访问者模式依赖了具体类，而没有依赖抽象类。</p></li></ul><h4 id="6-9-5-使用场景"><a href="#6-9-5-使用场景" class="headerlink" title="6.9.5 使用场景"></a>6.9.5 使用场景</h4><ul><li>对象结构相对稳定，但其操作算法经常变化的程序。</li><li>对象结构中的对象需要提供多种不同且不相关的操作，而且要避免让这些操作的变化影响对象的结 构。</li></ul><h4 id="6-9-6-扩展"><a href="#6-9-6-扩展" class="headerlink" title="6.9.6 扩展"></a>6.9.6 扩展</h4><p>访问者模式用到了一种双分派的技术。</p><p><strong>1，分派：</strong></p><p>变量被声明时的类型叫做变量的静态类型，有些人又把静态类型叫做明显类型；而变量所引用的对象的 真实类型又叫做变量的实际类型。比如 Map map &#x3D; new HashMap() ，map变量的静态类型是 Map ，实际类型是 HashMap 。根据对象的类型而对方法进行的选择，就是分派(Dispatch)，分派 (Dispatch)又分为两种，即静态分派和动态分派。</p><p><strong>静态分派(Static Dispatch)</strong> 发生在编译时期，分派根据静态类型信息发生。静态分派对于我们来 说并不陌生，方法重载就是静态分派。</p><p><strong>动态分派(Dynamic Dispatch)</strong> 发生在运行时期，动态分派动态地置换掉某个方法。Java通过方法 的重写支持动态分派。</p><p><strong>2，动态分派：</strong></p><p>通过方法的重写支持动态分派。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Animal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Animal a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a1<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面代码的结果大家应该直接可以说出来，这不就是多态吗！运行执行的是子类中的方法。</p><p>Java编译器在编译时期并不总是知道哪些代码会被执行，因为编译器仅仅知道对象的静态类型，而不 知道对象的真实类型；而方法的调用则是根据对象的真实类型，而不是静态类型。</p><p><strong>3，静态分派：</strong></p><p>通过方法重载支持静态分派。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Execute</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Animal a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Animal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Dog d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Cat c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Animal a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Execute exe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exe<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        exe<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>        exe<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>运行结果：</strong></p><p>都是animal</p><p>这个结果可能出乎一些人的意料了，为什么呢？</p><p><strong>重载方法的分派是根据静态类型进行的，这个分派过程在编译时期就完成了。</strong></p><p><strong>4，双分派：</strong></p><p>所谓双分派技术就是在选择一个方法的时候，不仅仅要根据消息接收者（receiver）的运行时区别， 还要根据参数的运行时区别。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Execute exe<span class="token punctuation">)</span> <span class="token punctuation">{</span>        exe<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Execute exe<span class="token punctuation">)</span> <span class="token punctuation">{</span>        exe<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Execute exe<span class="token punctuation">)</span> <span class="token punctuation">{</span>        exe<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Execute</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Animal a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"animal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Dog d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Cat c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Animal a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Execute exe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>exe<span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>exe<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>exe<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面代码中，客户端将Execute对象做为参数传递给Animal类型的变量调用的方法，这里完成第一 次分派，这里是方法重写，所以是动态分派，也就是执行实际类型中的方法，同时也 将自己this作为参 数传递进去，这里就完成了第二次分派 ，这里的Execute类中有多个重载的方法，而传递进行的是this， 就是具体的实际类型的对象。</p><p>说到这里，我们已经明白双分派是怎么回事了，但是它有什么效果呢？就是可以实现方法的动态绑定， 我们可以对上面的程序进行修改。</p><p><strong>双分派实现动态绑定的本质，就是在重载方法委派的前面加上了继承体系中覆盖的环节，由于覆盖是动 态的，所以重载就是动态的了。</strong></p><h3 id="6-10-备忘录模式"><a href="#6-10-备忘录模式" class="headerlink" title="6.10 备忘录模式"></a>6.10 备忘录模式</h3><h4 id="6-10-1-概述"><a href="#6-10-1-概述" class="headerlink" title="6.10.1 概述"></a>6.10.1 概述</h4><p>备忘录模式提供了一种状态恢复的实现机制，使得用户可以方便地回到一个特定的历史步骤，当新的状 态无效或者存在问题时，可以使用暂时存储起来的备忘录将状态复原，很多软件都提供了撤销 （Undo）操作，如 Word、记事本、Photoshop、IDEA等软件在编辑时按 Ctrl+Z 组合键时能撤销 当前操作，使文档恢复到之前的状态；还有在 浏览器 中的后退键、数据库事务管理中的回滚操作、玩 游戏时的中间结果存档功能、数据库与操作系统的备份操作、棋类游戏中的悔棋功能等都属于这类。</p><p><strong>定义：</strong></p><p>又叫快照模式，在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态， 以便以后当需要时能将该对象恢复到原先保存的状态。</p><h4 id="6-10-2-结构"><a href="#6-10-2-结构" class="headerlink" title="6.10.2 结构"></a>6.10.2 结构</h4><p>备忘录模式的主要角色如下：</p><ul><li>发起人（Originator）角色：记录当前时刻的内部状态信息，提供创建备忘录和恢复备忘录数据 的功能，实现其他业务功能，它可以访问备忘录里的所有信息。</li><li>备忘录（Memento）角色：负责存储发起人的内部状态，在需要的时候提供这些内部状态给发起 人。</li><li>管理者（Caretaker）角色：对备忘录进行管理，提供保存与获取备忘录的功能，但其不能对备 忘录的内容进行访问与修改。</li></ul><blockquote><p>备忘录有两个等效的接口：</p><ul><li><strong>窄接口</strong>：管理者(Caretaker)对象（和其他发起人对象之外的任何对象）看到的是备忘录 的窄接口(narror Interface)，这个窄接口只允许他把备忘录对象传给其他的对象。</li><li><strong>宽接口</strong>：与管理者看到的窄接口相反，发起人对象可以看到一个宽接口(wide Interface)，这个宽接口允许它读取所有的数据，以便根据这些数据恢复这个发起人对象 的内部状态。</li></ul></blockquote><h4 id="6-10-3-案例实现"><a href="#6-10-3-案例实现" class="headerlink" title="6.10.3 案例实现"></a>6.10.3 案例实现</h4><p>【例】游戏挑战BOSS</p><p>游戏中的某个场景，一游戏角色有生命力、攻击力、防御力等数据，在打Boss前和后一定会不一样 的，我们允许玩家如果感觉与Boss决斗的效果不理想可以让游戏恢复到决斗之前的状态。</p><p>要实现上述案例，有两种方式：</p><ul><li>“白箱”备忘录模式</li><li>“黑箱”备忘录模式</li></ul><h5 id="6-10-3-1-“白箱”备忘录模式"><a href="#6-10-3-1-“白箱”备忘录模式" class="headerlink" title="6.10.3.1 “白箱”备忘录模式"></a>6.10.3.1 “白箱”备忘录模式</h5><p>备忘录角色对任何对象都提供一个接口，即宽接口，备忘录角色的内部所存储的状态就对所有对象公 开。类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220627151330066.png"></p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//游戏角色类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameRole</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> vit<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生命力</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> atk<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//攻击力</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> def<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//防御力</span>    <span class="token comment" spellcheck="true">//初始化状态</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>atk <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//战斗</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>atk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//保存角色状态</span>    <span class="token keyword">public</span> RoleStateMemento <span class="token function">saveState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RoleStateMemento</span><span class="token punctuation">(</span>vit<span class="token punctuation">,</span> atk<span class="token punctuation">,</span> def<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//回复角色状态</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recoverState</span><span class="token punctuation">(</span>RoleStateMemento roleStateMemento<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> roleStateMemento<span class="token punctuation">.</span><span class="token function">getVit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>atk <span class="token operator">=</span> roleStateMemento<span class="token punctuation">.</span><span class="token function">getAtk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> roleStateMemento<span class="token punctuation">.</span><span class="token function">getDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stateDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"角色生命力："</span> <span class="token operator">+</span> vit<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"角色攻击力："</span> <span class="token operator">+</span> atk<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"角色防御力："</span> <span class="token operator">+</span> def<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> vit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVit</span><span class="token punctuation">(</span><span class="token keyword">int</span> vit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> vit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAtk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> atk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAtk</span><span class="token punctuation">(</span><span class="token keyword">int</span> atk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>atk <span class="token operator">=</span> atk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> def<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDef</span><span class="token punctuation">(</span><span class="token keyword">int</span> def<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> def<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//游戏状态存储类(备忘录类)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoleStateMemento</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> vit<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> atk<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> def<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RoleStateMemento</span><span class="token punctuation">(</span><span class="token keyword">int</span> vit<span class="token punctuation">,</span> <span class="token keyword">int</span> atk<span class="token punctuation">,</span> <span class="token keyword">int</span> def<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> vit<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>atk <span class="token operator">=</span> atk<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> def<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> vit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVit</span><span class="token punctuation">(</span><span class="token keyword">int</span> vit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> vit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAtk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> atk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAtk</span><span class="token punctuation">(</span><span class="token keyword">int</span> atk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>atk <span class="token operator">=</span> atk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> def<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDef</span><span class="token punctuation">(</span><span class="token keyword">int</span> def<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> def<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//角色状态管理者类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoleStateCaretaker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> RoleStateMemento roleStateMemento<span class="token punctuation">;</span>    <span class="token keyword">public</span> RoleStateMemento <span class="token function">getRoleStateMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> roleStateMemento<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRoleStateMemento</span><span class="token punctuation">(</span>RoleStateMemento roleStateMemento<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>roleStateMemento <span class="token operator">=</span> roleStateMemento<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------大战Boss前------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//大战Boss前</span>        GameRole gameRole <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GameRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gameRole<span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gameRole<span class="token punctuation">.</span><span class="token function">stateDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//保存进度</span>        RoleStateCaretaker roleStateCaretaker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoleStateCaretaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roleStateCaretaker<span class="token punctuation">.</span><span class="token function">setRoleStateMemento</span><span class="token punctuation">(</span>gameRole<span class="token punctuation">.</span><span class="token function">saveState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------大战Boss后------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//大战Boss时，损耗严重</span>        gameRole<span class="token punctuation">.</span><span class="token function">fight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gameRole<span class="token punctuation">.</span><span class="token function">stateDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------恢复之前状态------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//恢复之前状态</span>        gameRole<span class="token punctuation">.</span><span class="token function">recoverState</span><span class="token punctuation">(</span>roleStateCaretaker<span class="token punctuation">.</span><span class="token function">getRoleStateMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gameRole<span class="token punctuation">.</span><span class="token function">stateDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>分析：白箱备忘录模式是破坏封装性的。但是通过程序员自律，同样可以在一定程度上实现模式 的大部分用意。</p></blockquote><h5 id="6-10-3-2-“黑箱”备忘录模式"><a href="#6-10-3-2-“黑箱”备忘录模式" class="headerlink" title="6.10.3.2 “黑箱”备忘录模式"></a>6.10.3.2 “黑箱”备忘录模式</h5><p>备忘录角色对发起人对象提供一个宽接口，而为其他对象提供一个窄接口。在Java语言中，实现双重 接口的办法就是将<strong>备忘录</strong>类设计成<strong>发起人类</strong>的内部成员类。</p><p>将<code>RoleStateMemento</code>设为<code>GameRole</code>的内部类，从而将<code>RoleStateMemento</code>对象封装在<code>GameRole</code>里面；在外面提供一个标识接口<code>Memento</code>给<code>RoleStateCaretaker</code>及其他对象使用。 这样<code>GameRole</code>类看到的是 <code>RoleStateMemento</code>所有的接口，而<code>RoleStateCaretaker</code>及其他对 象看到的仅仅是标识接口<code>Memento</code>所暴露出来的接口，从而维护了封装型。类图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220627155037897.png"></p><p>代码如下：</p><p>窄接口<code>Memento</code>，这是一个标识接口，因此没有定义出任何的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Memento</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>定义发起人类<code>GameRole</code>，并在内部定义备忘录内部类<code>RoleStateMemento</code>(该内部类设置为私有 的）</p><pre class=" language-java"><code class="language-java"><span class="token operator">/</span>游戏角色类<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameRole</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> vit<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生命力</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> atk<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//攻击力</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> def<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//防御力</span>        <span class="token comment" spellcheck="true">//初始化状态</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>atk <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//战斗</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>atk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//保存角色状态</span>    <span class="token keyword">public</span> Memento <span class="token function">saveState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RoleStateMemento</span><span class="token punctuation">(</span>vit<span class="token punctuation">,</span> atk<span class="token punctuation">,</span> def<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//回复角色状态</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recoverState</span><span class="token punctuation">(</span>Memento memento<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RoleStateMemento roleStateMemento <span class="token operator">=</span> <span class="token punctuation">(</span>RoleStateMemento<span class="token punctuation">)</span> memento<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> roleStateMemento<span class="token punctuation">.</span><span class="token function">getVit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>atk <span class="token operator">=</span> roleStateMemento<span class="token punctuation">.</span><span class="token function">getAtk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> roleStateMemento<span class="token punctuation">.</span><span class="token function">getDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stateDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"角色生命力："</span> <span class="token operator">+</span> vit<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"角色攻击力："</span> <span class="token operator">+</span> atk<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"角色防御力："</span> <span class="token operator">+</span> def<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> vit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVit</span><span class="token punctuation">(</span><span class="token keyword">int</span> vit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> vit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAtk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> atk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAtk</span><span class="token punctuation">(</span><span class="token keyword">int</span> atk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>atk <span class="token operator">=</span> atk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> def<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDef</span><span class="token punctuation">(</span><span class="token keyword">int</span> def<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> def<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">RoleStateMemento</span> <span class="token keyword">implements</span> <span class="token class-name">Memento</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> vit<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> atk<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> def<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">RoleStateMemento</span><span class="token punctuation">(</span><span class="token keyword">int</span> vit<span class="token punctuation">,</span> <span class="token keyword">int</span> atk<span class="token punctuation">,</span> <span class="token keyword">int</span> def<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> vit<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>atk <span class="token operator">=</span> atk<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> def<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> vit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVit</span><span class="token punctuation">(</span><span class="token keyword">int</span> vit<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> vit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAtk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> atk<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAtk</span><span class="token punctuation">(</span><span class="token keyword">int</span> atk<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>atk <span class="token operator">=</span> atk<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> def<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDef</span><span class="token punctuation">(</span><span class="token keyword">int</span> def<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> def<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>负责人角色类 RoleStateCaretaker 能够得到的备忘录对象是以 Memento 为接口的，由于这个接 口仅仅是一个标识接口，因此负责人角色不可能改变这个备忘录对象的内容</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//角色状态管理者类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoleStateCaretaker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Memento memento<span class="token punctuation">;</span>    <span class="token keyword">public</span> Memento <span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> memento<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMemento</span><span class="token punctuation">(</span>Memento memento<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>memento <span class="token operator">=</span> memento<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------大战Boss前------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//大战Boss前</span>        GameRole gameRole <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GameRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gameRole<span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gameRole<span class="token punctuation">.</span><span class="token function">stateDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//保存进度</span>        RoleStateCaretaker roleStateCaretaker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoleStateCaretaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roleStateCaretaker<span class="token punctuation">.</span><span class="token function">setMemento</span><span class="token punctuation">(</span>gameRole<span class="token punctuation">.</span><span class="token function">saveState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------大战Boss后------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//大战Boss时，损耗严重</span>        gameRole<span class="token punctuation">.</span><span class="token function">fight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gameRole<span class="token punctuation">.</span><span class="token function">stateDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------恢复之前状态------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//恢复之前状态</span>        gameRole<span class="token punctuation">.</span><span class="token function">recoverState</span><span class="token punctuation">(</span>roleStateCaretaker<span class="token punctuation">.</span><span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gameRole<span class="token punctuation">.</span><span class="token function">stateDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-10-4-优缺点"><a href="#6-10-4-优缺点" class="headerlink" title="6.10.4 优缺点"></a>6.10.4 优缺点</h4><p><strong>1，优点：</strong></p><ul><li>提供了一种可以恢复状态的机制。当用户需要时能够比较方便地将数据恢复到某个历史的状态。</li><li>实现了内部状态的封装。除了创建它的发起人之外，其他对象都不能够访问这些状态信息。</li><li>简化了发起人类。发起人不需要管理和保存其内部状态的各个备份，所有状态信息都保存在备忘录 中，并由管理者进行管理，这符合单一职责原则。</li></ul><p><strong>2，缺点：</strong></p><ul><li>资源消耗大。如果要保存的内部状态信息过多或者特别频繁，将会占用比较大的内存资源。</li></ul><h4 id="6-10-5-使用场景"><a href="#6-10-5-使用场景" class="headerlink" title="6.10.5 使用场景"></a>6.10.5 使用场景</h4><ul><li>需要保存与恢复数据的场景，如玩游戏时的中间结果的存档功能。</li><li>需要提供一个可回滚操作的场景，如 Word、记事本、Photoshop，idea等软件在编辑时按 Ctrl+Z 组合键，还有数据库中事务操作。</li></ul><h3 id="6-11-解释器模式"><a href="#6-11-解释器模式" class="headerlink" title="6.11 解释器模式"></a>6.11 解释器模式</h3><h4 id="6-11-1-概述"><a href="#6-11-1-概述" class="headerlink" title="6.11.1 概述"></a>6.11.1 概述</h4><p>设计一个软件用来进行加减计算。我们第一想法就是使用工具类，提供对应的加法和减法的工 具方法。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//用于两个整数相加</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//用于两个整数相加</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//用于n个整数相加</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span>Integer <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面的形式比较单一、有限，如果形式变化非常多，这就不符合要求，因为加法和减法运算，两个运算 符与数值可以有无限种组合方式。比如 1+2+3+4+5、1+2+3-4等等。</p><p>显然，现在需要一种翻译识别机器，能够解析由数字以及 + - 符号构成的合法的运算序列。如果把运 算符和数字都看作节点的话，能够逐个节点的进行读取解析运算，这就是解释器模式的思维。</p><p><strong>定义：</strong></p><blockquote><p>给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的 句子。</p></blockquote><p>在解释器模式中，我们需要将待解决的问题，提取出规则，抽象为一种“语言”。比如加减法运算，规则 为：由数值和+-符号组成的合法序列，“1+3-2” 就是这种语言的句子。</p><p>解释器就是要解析出来语句的含义。但是如何描述规则呢？</p><p><strong>文法（语法）规则：</strong></p><pre class=" language-bash"><code class="language-bash">expression ::<span class="token operator">=</span> value <span class="token operator">|</span> plus <span class="token operator">|</span> minusplus ::<span class="token operator">=</span> expression ‘+’ expressionminus ::<span class="token operator">=</span> expression ‘-’ expressionvalue ::<span class="token operator">=</span> integer</code></pre><blockquote><p>注意： 这里的符号“::&#x3D;”表示“定义为”的意思，竖线 | 表示或，左右的其中一个，引号内为字 符本身，引号外为语法。</p></blockquote><p>上面规则描述为 ：</p><p>表达式可以是一个值，也可以是plus或者minus运算，而plus和minus又是由表达式结合运算符构 成，值的类型为整型数。</p><p><strong>抽象语法树：</strong></p><p>在计算机科学中，抽象语法树（AbstractSyntaxTree，AST），或简称语法树（Syntax tree）， 是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示 源代码中的一种结构。</p><p>用树形来表示符合文法规则的句子。</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220627163106843.png"></p><h4 id="6-11-2-结构"><a href="#6-11-2-结构" class="headerlink" title="6.11.2 结构"></a>6.11.2 结构</h4><ul><li>抽象表达式（Abstract Expression）角色：定义解释器的接口，约定解释器的解释操作，主 要包含解释方法 interpret()。</li><li>终结符表达式（Terminal Expression）角色：是抽象表达式的子类，用来实现文法中与终结 符相关的操作，文法中的每一个终结符都有一个具体终结表达式与之相对应。</li><li>非终结符表达式（Nonterminal Expression）角色：也是抽象表达式的子类，用来实现文法 中与非终结符相关的操作，文法中的每条规则都对应于一个非终结符表达式。</li><li>环境（Context）角色：通常包含各个解释器需要的数据或是公共的功能，一般用来传递被所有 解释器共享的数据，后面的解释器可以从这里获取这些值。</li><li>客户端（Client）：主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语 法树，然后调用解释器的解释方法，当然也可以通过环境角色间接访问解释器的解释方法。</li></ul><h4 id="6-11-3-案例实现"><a href="#6-11-3-案例实现" class="headerlink" title="6.11.3 案例实现"></a>6.11.3 案例实现</h4><p>【例】设计实现加减法的软件</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220627163610071.png"></p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//抽象角色AbstractExpression</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractExpression</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//终结符表达式角色</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Value</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractExpression</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Value</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//非终结符表达式角色 加法表达式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Plus</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractExpression</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AbstractExpression left<span class="token punctuation">;</span>    <span class="token keyword">private</span> AbstractExpression right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Plus</span><span class="token punctuation">(</span>AbstractExpression left<span class="token punctuation">,</span> AbstractExpression right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> left<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">+</span> right<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"("</span> <span class="token operator">+</span> left<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" + "</span> <span class="token operator">+</span> right<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//非终结符表达式角色 减法表达式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Minus</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractExpression</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AbstractExpression left<span class="token punctuation">;</span>    <span class="token keyword">private</span> AbstractExpression right<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Minus</span><span class="token punctuation">(</span>AbstractExpression left<span class="token punctuation">,</span> AbstractExpression right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> left<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">-</span> right<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"("</span> <span class="token operator">+</span> left<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> right<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//终结符表达式角色 变量表达式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Variable</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractExpression</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Variable</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span>Context ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//环境类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Variable<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Variable<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>Variable var<span class="token punctuation">,</span> Integer value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>var<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span>Variable var<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Context context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Variable a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Variable</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Variable b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Variable</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Variable c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Variable</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Variable d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Variable</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Variable e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Variable</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Value v = new Value(1);</span>        context<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractExpression expression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Minus</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Plus</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Plus</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Plus</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>expression <span class="token operator">+</span> <span class="token string">"= "</span> <span class="token operator">+</span> expression<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-11-4-优缺点"><a href="#6-11-4-优缺点" class="headerlink" title="6.11.4 优缺点"></a>6.11.4 优缺点</h4><p><strong>1，优点：</strong></p><ul><li><p>易于改变和扩展文法。</p><p>由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法。 每一条文法规则都可以表示为一个类，因此可以方便地实现一个简单的语言。</p></li><li><p>实现文法较为容易。</p><p>在抽象语法树中每一个表达式节点类的实现方式都是相似的，这些类的代码编写都不会特别复杂。</p></li><li><p>增加新的解释表达式较为方便。</p><p>如果用户需要增加新的解释表达式只需要对应增加一个新的终结符表达式或非终结符表达式类，原 有表达式类代码无须修改，符合 “开闭原则”。</p></li></ul><p><strong>2，缺点：</strong></p><ul><li><p>对于复杂文法难以维护。</p><p>在解释器模式中，每一条规则至少需要定义一个类，因此如果一个语言包含太多文法规则，类的个 数将会急剧增加，导致系统难以管理和维护。</p></li><li><p>执行效率较低。</p><p>由于在解释器模式中使用了大量的循环和递归调用，因此在解释较为复杂的句子时其速度很慢，而 且代码的调试过程也比较麻烦。</p></li></ul><h4 id="6-11-5-使用场景"><a href="#6-11-5-使用场景" class="headerlink" title="6.11.5 使用场景"></a>6.11.5 使用场景</h4><ul><li>当语言的文法较为简单，且执行效率不是关键问题时。</li><li>当问题重复出现，且可以用一种简单的语言来进行表达时。</li><li>当一个语言需要解释执行，并且语言中的句子可以表示为一个抽象语法树的时候。</li></ul><h2 id="7，自定义Spring框架"><a href="#7，自定义Spring框架" class="headerlink" title="7，自定义Spring框架"></a>7，自定义Spring框架</h2><h3 id="7-1-spring使用回顾"><a href="#7-1-spring使用回顾" class="headerlink" title="7.1 spring使用回顾"></a>7.1 spring使用回顾</h3><p>自定义<code>spring</code>框架前，先回顾一下<code>spring</code>框架的使用，从而分析<code>spring</code>的核心，并对核心功能进行模拟。</p><ul><li>数据访问层。定义<code>UserDao</code>接口及其子实现类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"userDaoImpl ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>业务逻辑层。定义<code>UserService</code>接口及其子实现类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"userServiceImpl ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义UserController类，使用main方法模拟controller层</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建spring容器对象</span>        ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从IOC容器中获取UserService对象</span>        UserService userService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用UserService对象的add方法</span>        userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>编写配置文件。在类路径下编写一个名为ApplicationContext.xml的配置文件</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/springcontext.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.service.impl.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>通过上面代码及结果可以看出：</p><ul><li><p><code>userService</code>对象是从<code>applicationContext</code>容器对象获取到的，也就是<code>userService</code>对象 交由spring进行管理。</p></li><li><p>上面结果可以看到调用了<code>UserDao</code>对象中的add方法，也就是说<code>UserDao</code>子实现类对象也交由<code>spring</code>管理了。</p></li><li><p><code>UserService</code>中的<code>userDao</code>变量我们并没有进行赋值，但是可以正常使用，说明<code>spring</code>已经将 <code>UserDao</code>对象赋值给了<code>userDao</code>变量。</p></li></ul><p>上面三点体现了Spring框架的IOC（Inversion of Control）和DI（Dependency Injection, DI）</p><h3 id="7-2-spring核心功能结构"><a href="#7-2-spring核心功能结构" class="headerlink" title="7.2 spring核心功能结构"></a>7.2 spring核心功能结构</h3><p>Spring大约有20个模块，由1300多个不同的文件构成。这些模块可以分为:</p><p>核心容器、AOP和设备支持、数据访问与集成、Web组件、通信报文和集成测试等，下面是 Spring 框架的总体架构图：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220627181214191.png"></p><p>核心容器由 beans、core、context 和 expression（Spring Expression Language， SpEL）4个模块组成。</p><ul><li><p>spring-beans和spring-core模块是Spring框架的核心模块，包含了控制反转（Inversion of Control，IOC）和依赖注入（Dependency Injection，DI）。BeanFactory使用控制 反转对应用程序的配置和依赖性规范与实际的应用程序代码进行了分离。BeanFactory属于延时 加载，也就是说在实例化容器对象后并不会自动实例化Bean，只有当Bean被使用时， BeanFactory才会对该 Bean 进行实例化与依赖关系的装配。</p></li><li><p>spring-context模块构架于核心模块之上，扩展了BeanFactory，为它添加了Bean生命周期 控制、框架事件体系及资源加载透明化等功能。此外，该模块还提供了许多企业级支持，如邮件访 问、远程访问、任务调度等，ApplicationContext 是该模块的核心接口，它的超类是 BeanFactory。与BeanFactory不同，ApplicationContext实例化后会自动对所有的单实 例Bean进行实例化与依赖关系的装配，使之处于待用状态。</p></li><li><p>spring-context-support模块是对Spring IoC容器及IoC子容器的扩展支持。</p></li><li><p>spring-context-indexer模块是Spring的类管理组件和Classpath扫描组件。</p></li><li><p>spring-expression 模块是统一表达式语言（EL）的扩展模块，可以查询、管理运行中的对 象，同时也可以方便地调用对象方法，以及操作数组、集合等。它的语法类似于传统EL，但提供 了额外的功能，最出色的要数函数调用和简单字符串的模板函数。EL的特性是基于Spring产品的 需求而设计的，可以非常方便地同Spring IoC进行交互。</p></li></ul><h4 id="7-2-1-bean概述"><a href="#7-2-1-bean概述" class="headerlink" title="7.2.1 bean概述"></a>7.2.1 bean概述</h4><p><code>Spring</code>就是面向<code>Bean</code>的编程（BOP,Bean Oriented Programming），<code>Bean</code>在<code>Spring</code>中 处于核心地位。<code>Bean</code>对于<code>Spring</code>的意义就像<code>Object</code>对于<code>OOP的</code>意义一样，<code>Spring</code>中没有<code>Bean</code>也就没有<code>Spring</code>存在的意义。<code>Spring IoC</code>容器通过配置文件或者注解的方式来管理<code>bean</code>对象之间的依赖 关系。</p><p>spring中bean用于对一个类进行封装。如下面的配置：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.itheima.service.impl.UserServiceImpl"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"userDao"</span> ref<span class="token operator">=</span><span class="token string">"userDao"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.itheima.dao.impl.UserDaoImpl"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><p>为什么<code>Bean</code>如此重要呢？</p><ul><li>spring 将bean对象交由一个叫IOC容器进行管理。</li><li>bean对象之间的依赖关系在配置文件中体现，并由spring完成。</li></ul><h3 id="7-3-Spring-IOC相关接口分析"><a href="#7-3-Spring-IOC相关接口分析" class="headerlink" title="7.3 Spring IOC相关接口分析"></a>7.3 Spring IOC相关接口分析</h3><h4 id="7-3-1-BeanFactory解析"><a href="#7-3-1-BeanFactory解析" class="headerlink" title="7.3.1 BeanFactory解析"></a>7.3.1 BeanFactory解析</h4><p>Spring中Bean的创建是典型的工厂模式，这一系列的Bean工厂，即IoC容器，为开发者管理对象之间 的依赖关系提供了很多便利和基础服务，在Spring中有许多IoC容器的实现供用户选择，其相互关系 如下图所示。</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220627183514102.png"></p><p>其中，BeanFactory作为最顶层的一个接口，定义了IoC容器的基本功能规范，BeanFactory有三个 重要的子接口：ListableBeanFactory、HierarchicalBeanFactory和 AutowireCapableBeanFactory。但是从类图中我们可以发现最终的默认实现类是 DefaultListableBeanFactory，它实现了所有的接口。</p><p>那么为何要定义这么多层次的接口呢？</p><p>每个接口都有它的使用场合，主要是为了区分在Spring内部操作过程中对象的传递和转化，对对象的 数据访问所做的限制。例如，</p><ul><li>ListableBeanFactory接口表示这些Bean可列表化。</li><li>HierarchicalBeanFactory表示这些Bean 是有继承关系的，也就是每个 Bean 可能有父 Bean</li><li>AutowireCapableBeanFactory 接口定义Bean的自动装配规则。</li></ul><p>这三个接口共同定义了Bean的集合、Bean之间的关系及Bean行为。最基本的IoC容器接口是 BeanFactory，来看一下它的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>        String FACTORY_BEAN_PREFIX <span class="token operator">=</span> <span class="token string">"&amp;"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据bean的名称获取IOC容器中的的bean对象</span>    Object <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据bean的名称获取IOC容器中的的bean对象，并指定获取到的bean对象的类型，这样我们使用时就不需要进行类型强转了</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>    Object <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> ObjectProvider<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getBeanProvider</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> ObjectProvider<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getBeanProvider</span><span class="token punctuation">(</span>ResolvableType requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断容器中是否包含指定名称的bean对象</span>    <span class="token keyword">boolean</span> <span class="token function">containsBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据bean的名称判断是否是单例</span>    <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isPrototype</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isTypeMatch</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> ResolvableType typeToMatch<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isTypeMatch</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> typeToMatch<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getType</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAliases</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在BeanFactory里只对IoC容器的基本行为做了定义，根本不关心你的Bean是如何定义及怎样加载 的。正如我们只关心能从工厂里得到什么产品，不关心工厂是怎么生产这些产品的。</p><p>BeanFactory有一个很重要的子接口，就是ApplicationContext接口，该接口主要来规范容器中 的bean对象是非延时加载，即在创建容器对象的时候就对象bean进行初始化，并存储到一个容器中。</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220627184504478.png"></p><p>要知道工厂是如何产生对象的，我们需要看具体的IoC容器实现，Spring提供了许多IoC容器实现，比 如：</p><ul><li>ClasspathXmlApplicationContext : 根据类路径加载xml配置文件，并创建IOC容器对 象。</li><li>FileSystemXmlApplicationContext ：根据系统路径加载xml配置文件，并创建IOC容器对 象。</li><li>AnnotationConfigApplicationContext ：加载注解类配置，并创建IOC容器。</li></ul><h4 id="7-3-2-BeanDefinition解析"><a href="#7-3-2-BeanDefinition解析" class="headerlink" title="7.3.2 BeanDefinition解析"></a>7.3.2 BeanDefinition解析</h4><p>Spring IoC容器管理我们定义的各种Bean对象及其相互关系，而Bean对象在Spring实现中是以 BeanDefinition来描述的，如下面配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>bean标签还有很多属性：    scope、init-method、destory-method等。</code></pre><p>其继承体系如下图所示。</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220627184938952.png"></p><h4 id="7-3-3-BeanDefinitionReader解析"><a href="#7-3-3-BeanDefinitionReader解析" class="headerlink" title="7.3.3 BeanDefinitionReader解析"></a>7.3.3 BeanDefinitionReader解析</h4><p>Bean的解析过程非常复杂，功能被分得很细，因为这里需要被扩展的地方很多，必须保证足够的灵活 性，以应对可能的变化。Bean的解析主要就是对Spring配置文件的解析。这个解析过程主要通过 BeanDefinitionReader来完成，看看Spring中BeanDefinitionReader的类结构图，如下图所示。</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220627185220055.png"></p><p>看看BeanDefinitionReader接口定义的功能来理解它具体的作用：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanDefinitionReader</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取BeanDefinitionRegistry注册器对象</span>    BeanDefinitionRegistry <span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    ResourceLoader <span class="token function">getResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    ClassLoader <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BeanNameGenerator <span class="token function">getBeanNameGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        下面的loadBeanDefinitions都是加载bean定义，从指定的资源中    */</span>    <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>Resource resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>Resource<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> resources<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>String location<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> locations<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="7-3-4-BeanDefinitionRegistry解析"><a href="#7-3-4-BeanDefinitionRegistry解析" class="headerlink" title="7.3.4 BeanDefinitionRegistry解析"></a>7.3.4 BeanDefinitionRegistry解析</h4><p>BeanDefinitionReader用来解析bean定义，并封装BeanDefinition对象，而我们定义的配置文 件中定义了很多bean标签，所以就有一个问题，解析的BeanDefinition对象存储到哪儿？答案就是 BeanDefinition的注册中心，而该注册中心顶层接口就是BeanDefinitionRegistry。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanDefinitionRegistry</span> <span class="token keyword">extends</span> <span class="token class-name">AliasRegistry</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//往注册表中注册bean</span>    <span class="token keyword">void</span> <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> BeanDefinition beanDefinition<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从注册表中删除指定名称的bean</span>    <span class="token keyword">void</span> <span class="token function">removeBeanDefinition</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取注册表中指定名称的bean</span>    BeanDefinition <span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断注册表中是否已经注册了指定名称的bean</span>    <span class="token keyword">boolean</span> <span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取注册表中所有的bean的名称</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isBeanNameInUse</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>继承结构图如下：</p><p><img src="/2022/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220627203227407.png"></p><p>从上面类图可以看到BeanDefinitionRegistry接口的子实现类主要有以下几个：</p><ul><li><p>DefaultListableBeanFactory</p><p>在该类中定义了如下代码，就是用来注册bean</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanDefinition<span class="token operator">></span> beanDefinitionMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>SimpleBeanDefinitionRegistry</p><p>在该类中定义了如下代码，就是用来注册bean</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanDefinition<span class="token operator">></span> beanDefinitionMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="7-3-5-创建容器"><a href="#7-3-5-创建容器" class="headerlink" title="7.3.5 创建容器"></a>7.3.5 创建容器</h4><p><code>ClassPathXmlApplicationContext</code>t对<code>Bean</code>配置资源的载入是从<code>refresh（）</code>方法开始的。</p><p>refresh（）方法是一个模板方法，规定了 IoC 容器的启动流程，有些逻辑要交给其子类实现。它对 Bean 配置资源进行载入，ClassPathXmlApplicationContext通过调用其父类 AbstractApplicationContext的refresh（）方法启动整个IoC容器对Bean定义的载入过程。</p><h3 id="7-4-自定义SpringIOC"><a href="#7-4-自定义SpringIOC" class="headerlink" title="7.4 自定义SpringIOC"></a>7.4 自定义SpringIOC</h3><p>现要对下面的配置文件进行解析，并自定义Spring框架的IOC对涉及到的对象进行管理。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span>    <span class="token operator">&lt;</span>beans<span class="token operator">></span>        <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.itheima.service.impl.UserServiceImpl"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"userDao"</span> ref<span class="token operator">=</span><span class="token string">"userDao"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.itheima.dao.impl.UserDaoImpl"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><h4 id="7-4-1-定义bean相关的pojo类"><a href="#7-4-1-定义bean相关的pojo类" class="headerlink" title="7.4.1 定义bean相关的pojo类"></a>7.4.1 定义bean相关的pojo类</h4><h5 id="7-4-1-1-PropertyValue类"><a href="#7-4-1-1-PropertyValue类" class="headerlink" title="7.4.1.1 PropertyValue类"></a>7.4.1.1 PropertyValue类</h5><p>用于封装bean的属性，体现到上面的配置文件就是封装bean标签的子标签property标签数据。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertyValue</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String ref<span class="token punctuation">;</span>    <span class="token keyword">private</span> String value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PropertyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">PropertyValue</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String ref<span class="token punctuation">,</span>String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ref <span class="token operator">=</span> ref<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ref<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRef</span><span class="token punctuation">(</span>String ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ref <span class="token operator">=</span> ref<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="7-4-1-2-MutablePropertyValues类"><a href="#7-4-1-2-MutablePropertyValues类" class="headerlink" title="7.4.1.2 MutablePropertyValues类"></a>7.4.1.2 MutablePropertyValues类</h5><p>一个bean标签可以有多个property子标签，所以再定义一个MutablePropertyValues类，用来存 储并管理多个PropertyValue对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MutablePropertyValues</span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span>PropertyValue<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>PropertyValue<span class="token operator">></span> propertyValueList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MutablePropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>propertyValueList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>PropertyValue<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">MutablePropertyValues</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>PropertyValue<span class="token operator">></span> propertyValueList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>propertyValueList <span class="token operator">=</span> <span class="token punctuation">(</span>propertyValueList <span class="token operator">!=</span> null <span class="token operator">?</span> propertyValueList <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>PropertyValue<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> PropertyValue<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propertyValueList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PropertyValue</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> PropertyValue <span class="token function">getPropertyValue</span><span class="token punctuation">(</span>String propertyName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>PropertyValue pv <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propertyValueList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pv<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> pv<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>PropertyValue<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> propertyValueList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propertyValueList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> MutablePropertyValues <span class="token function">addPropertyValue</span><span class="token punctuation">(</span>PropertyValue pv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propertyValueList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            PropertyValue currentPv <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propertyValueList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPv<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pv<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>propertyValueList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PropertyValue</span><span class="token punctuation">(</span>pv<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pv<span class="token punctuation">.</span><span class="token function">getRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pv<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>propertyValueList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>String propertyName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getPropertyValue</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="7-4-1-3-BeanDefinition类"><a href="#7-4-1-3-BeanDefinition类" class="headerlink" title="7.4.1.3 BeanDefinition类"></a>7.4.1.3 BeanDefinition类</h5><p>BeanDefinition类用来封装bean信息的，主要包含id（即bean对象的名称）、class（需要交由 spring管理的类的全类名）及子标签property数据。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanDefinition</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String className<span class="token punctuation">;</span>        <span class="token keyword">private</span> MutablePropertyValues propertyValues<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">BeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        propertyValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutablePropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> className<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setClassName</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> className<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPropertyValues</span><span class="token punctuation">(</span>MutablePropertyValues propertyValues<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>propertyValues <span class="token operator">=</span> propertyValues<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> MutablePropertyValues <span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> propertyValues<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="7-4-2-定义注册表相关类"><a href="#7-4-2-定义注册表相关类" class="headerlink" title="7.4.2 定义注册表相关类"></a>7.4.2 定义注册表相关类</h4><h5 id="7-4-2-1-BeanDefinitionRegistry接口"><a href="#7-4-2-1-BeanDefinitionRegistry接口" class="headerlink" title="7.4.2.1 BeanDefinitionRegistry接口"></a>7.4.2.1 BeanDefinitionRegistry接口</h5><p>BeanDefinitionRegistry接口定义了注册表的相关操作，定义如下功能：</p><ul><li>注册BeanDefinition对象到注册表中</li><li>从注册表中删除指定名称的BeanDefinition对象</li><li>根据名称从注册表中获取BeanDefinition对象</li><li>判断注册表中是否包含指定名称的BeanDefinition对象</li><li>获取注册表中BeanDefinition对象的个数</li><li>获取注册表中所有的BeanDefinition的名称</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanDefinitionRegistry</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注册BeanDefinition对象到注册表中</span>    <span class="token keyword">void</span> <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> BeanDefinitionbeanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从注册表中删除指定名称的BeanDefinition对象</span>    <span class="token keyword">void</span> <span class="token function">removeBeanDefinition</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据名称从注册表中获取BeanDefinition对象</span>    BeanDefinition <span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="7-4-2-2-SimpleBeanDefinitionRegistry类"><a href="#7-4-2-2-SimpleBeanDefinitionRegistry类" class="headerlink" title="7.4.2.2 SimpleBeanDefinitionRegistry类"></a>7.4.2.2 SimpleBeanDefinitionRegistry类</h5><p>该类实现了BeanDefinitionRegistry接口，定义了Map集合作为注册表容器。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleBeanDefinitionRegistry</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanDefinition<span class="token operator">></span> beanDefinitionMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanDefinition<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> BeanDefinition beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeBeanDefinition</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        beanDefinitionMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> BeanDefinition <span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanDefinitionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanDefinitionMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanDefinitionMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanDefinitionMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="7-4-3-定义解析器相关类"><a href="#7-4-3-定义解析器相关类" class="headerlink" title="7.4.3 定义解析器相关类"></a>7.4.3 定义解析器相关类</h4><h5 id="7-4-3-1-BeanDefinitionReader接口"><a href="#7-4-3-1-BeanDefinitionReader接口" class="headerlink" title="7.4.3.1 BeanDefinitionReader接口"></a>7.4.3.1 BeanDefinitionReader接口</h5><p>BeanDefinitionReader是用来解析配置文件并在注册表中注册bean的信息。定义了两个规范：</p><ul><li>获取注册表的功能，让外界可以通过该对象获取注册表对象。</li><li>加载配置文件，并注册bean数据。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanDefinitionReader</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取注册表对象</span>    BeanDefinitionRegistry <span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//加载配置文件并在注册表中进行注册</span>    <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>String configLocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="7-4-3-2-XmlBeanDefinitionReader类"><a href="#7-4-3-2-XmlBeanDefinitionReader类" class="headerlink" title="7.4.3.2 XmlBeanDefinitionReader类"></a>7.4.3.2 XmlBeanDefinitionReader类</h5><p>XmlBeanDefinitionReader类是专门用来解析xml配置文件的。该类实现 BeanDefinitionReader接口并实现接口中的两个功能。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlBeanDefinitionReader</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionReader</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> BeanDefinitionRegistry registry<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">XmlBeanDefinitionReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>registry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> BeanDefinitionRegistry <span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> registry<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>String configLocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        InputStream is <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>configLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>        SAXReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Document document <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        Element rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解析bean标签</span>        <span class="token function">parseBean</span><span class="token punctuation">(</span>rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseBean</span><span class="token punctuation">(</span>Element rootElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Element<span class="token operator">></span> elements <span class="token operator">=</span> rootElement<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Element element <span class="token operator">:</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String id <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String className <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanDefinition beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDefinition<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDefinition<span class="token punctuation">.</span><span class="token function">setClassName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Element<span class="token operator">></span> list <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token string">"property"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MutablePropertyValues mutablePropertyValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutablePropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Element element1 <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String name <span class="token operator">=</span> element1<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String ref <span class="token operator">=</span> element1<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"ref"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String value <span class="token operator">=</span> element1<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            PropertyValue propertyValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertyValue</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>ref<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            mutablePropertyValues<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span>propertyValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            beanDefinition<span class="token punctuation">.</span><span class="token function">setPropertyValues</span><span class="token punctuation">(</span>mutablePropertyValues<span class="token punctuation">)</span><span class="token punctuation">;</span>            registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="7-4-4-IOC容器相关"><a href="#7-4-4-IOC容器相关" class="headerlink" title="7.4.4 IOC容器相关"></a>7.4.4 IOC容器相关</h4><h5 id="7-4-4-1-BeanFactory接口"><a href="#7-4-4-1-BeanFactory接口" class="headerlink" title="7.4.4.1 BeanFactory接口"></a>7.4.4.1 BeanFactory接口</h5><p>在该接口中定义IOC容器的统一规范即获取bean对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//根据bean对象的名称获取bean对象</span>    Object <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据bean对象的名称获取bean对象，并进行类型转换</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="7-4-4-2-ApplicationContext接口"><a href="#7-4-4-2-ApplicationContext接口" class="headerlink" title="7.4.4.2 ApplicationContext接口"></a>7.4.4.2 ApplicationContext接口</h5><p>该接口的所以的子实现类对bean对象的创建都是非延时的，所以在该接口中定义 refresh() 方法， 该方法主要完成以下两个功能：</p><ul><li>加载配置文件。</li><li>根据注册表中的BeanDefinition对象封装的数据进行bean对象的创建。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//进行配置文件加载并进行对象创建</span>    <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalStateException<span class="token punctuation">,</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="7-4-4-3-AbstractApplicationContext类"><a href="#7-4-4-3-AbstractApplicationContext类" class="headerlink" title="7.4.4.3 AbstractApplicationContext类"></a>7.4.4.3 AbstractApplicationContext类</h5><ul><li>作为ApplicationContext接口的子类，所以该类也是非延时加载，所以需要在该类中定义一个 Map集合，作为bean对象存储的容器。</li><li>声明BeanDefinitionReader类型的变量，用来进行xml配置文件的解析，符合单一职责原则。 BeanDefinitionReader类型的对象创建交由子类实现，因为只有子类明确到底创建 BeanDefinitionReader哪儿个子实现类对象。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractApplicationContext</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContext</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> BeanDefinitionReader beanDefinitionReader<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用来存储bean对象的容器 key存储的是bean的id值，value存储的是bean对象</span>    <span class="token keyword">protected</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> singletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//存储配置文件的路径</span>    <span class="token keyword">protected</span> String configLocation<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalStateException<span class="token punctuation">,</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//加载BeanDefinition</span>        beanDefinitionReader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化bean</span>        <span class="token function">finishBeanInitialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//bean的初始化</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">finishBeanInitialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        BeanDefinitionRegistry registry <span class="token operator">=</span> beanDefinitionReader<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> beanNames <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BeanDefinition beanDefinition <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：该类finishBeanInitialization()方法中调用getBean()方法使用到了模板方法模 式。</p></blockquote><h5 id="7-4-4-4-ClassPathXmlApplicationContext类"><a href="#7-4-4-4-ClassPathXmlApplicationContext类" class="headerlink" title="7.4.4.4 ClassPathXmlApplicationContext类"></a>7.4.4.4 ClassPathXmlApplicationContext类</h5><p>该类主要是加载类路径下的配置文件，并进行bean对象的创建，主要完成以下功能：</p><ul><li>在构造方法中，创建BeanDefinitionReader对象。</li><li>在构造方法中，调用refresh()方法，用于进行配置文件加载、创建bean对象并存储到容器中。</li><li>重写父接口中的getBean()方法，并实现依赖注入操作。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassPathXmlApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractApplicationContext</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>String configLocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>configLocation <span class="token operator">=</span> configLocation<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构建XmlBeanDefinitionReader对象</span>        beanDefinitionReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//根据bean的id属性值获取bean对象</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//return singletonObjects.get(name);</span>        Object obj <span class="token operator">=</span> singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> obj<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BeanDefinitionRegistry registry <span class="token operator">=</span> beanDefinitionReader<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanDefinition beanDefinition <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>beanDefinition <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String className <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object beanObj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MutablePropertyValues propertyValues <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>PropertyValue propertyValue <span class="token operator">:</span> propertyValues<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String propertyName <span class="token operator">=</span> propertyValue<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String value <span class="token operator">=</span> propertyValue<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String ref <span class="token operator">=</span> propertyValue<span class="token punctuation">.</span><span class="token function">getRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ref <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object bean <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>                String methodName <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">getSetterMethodNameByFieldName</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>                Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>beanObj<span class="token punctuation">,</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String methodName <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">getSetterMethodNameByFieldName</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>                Method method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>beanObj<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        singletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>beanObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> beanObj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Object bean <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> clazz<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="7-4-5-自定义Spring-IOC总结"><a href="#7-4-5-自定义Spring-IOC总结" class="headerlink" title="7.4.5 自定义Spring IOC总结"></a>7.4.5 自定义Spring IOC总结</h4><h5 id="7-4-5-1-使用到的设计模式"><a href="#7-4-5-1-使用到的设计模式" class="headerlink" title="7.4.5.1 使用到的设计模式"></a>7.4.5.1 使用到的设计模式</h5><ul><li>工厂模式。这个使用工厂模式 + 配置文件的方式。</li><li>单例模式。Spring IOC管理的bean对象都是单例的，此处的单例不是通过构造器进行单例的控 制的，而是spring框架对每一个bean只创建了一个对象。</li><li>模板方法模式。AbstractApplicationContext类中的finishBeanInitialization()方 法调用了子类的getBean()方法，因为getBean()的实现和环境息息相关。</li><li>迭代器模式。对于MutablePropertyValues类定义使用到了迭代器模式，因为此类存储并管理 PropertyValue对象，也属于一个容器，所以给该容器提供一个遍历方式。</li></ul><p>spring框架其实使用到了很多设计模式，如AOP使用到了代理模式，选择JDK代理或者CGLIB代理使用 到了策略模式，还有适配器模式，装饰者模式，观察者模式等。</p><h5 id="7-4-5-2-符合大部分设计原则"><a href="#7-4-5-2-符合大部分设计原则" class="headerlink" title="7.4.5.2 符合大部分设计原则"></a>7.4.5.2 符合大部分设计原则</h5><h5 id="7-4-5-3-整个设计和Spring的设计还是有一定的出入"><a href="#7-4-5-3-整个设计和Spring的设计还是有一定的出入" class="headerlink" title="7.4.5.3 整个设计和Spring的设计还是有一定的出入"></a>7.4.5.3 整个设计和Spring的设计还是有一定的出入</h5><p>spring框架底层是很复杂的，进行了很深入的封装，并对外提供了很好的扩展性。而我们自定义 SpringIOC有以下几个目的：</p><ul><li>了解Spring底层对对象的大体管理机制。</li><li>了解设计模式在具体的开发中的使用。</li><li>以后学习spring源码，通过该案例的实现，可以降低spring学习的入门成本。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言入门</title>
      <link href="/2022/06/02/Go%E5%85%A5%E9%97%A8/"/>
      <url>/2022/06/02/Go%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Go语言入门"><a href="#Go语言入门" class="headerlink" title="Go语言入门"></a>Go语言入门</h2><h3 id="1-1、什么是Go语言"><a href="#1-1、什么是Go语言" class="headerlink" title="1.1、什么是Go语言"></a>1.1、什么是Go语言</h3><ul><li><strong>1.高性能、高并发</strong></li><li><strong>2.语法简单、学习曲线平缓</strong></li><li><strong>3.丰富的标准库</strong></li><li><strong>4.完善的工具链</strong></li><li><strong>5.静态链接</strong></li><li><strong>6.快读编译</strong></li><li><strong>7.跨平台</strong></li><li><strong>8.垃圾回收</strong></li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span><span class="token punctuation">(</span>    <span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span>http<span class="token punctuation">.</span><span class="token function">FileServer</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="2-入门"><a href="#2-入门" class="headerlink" title="2.入门"></a>2.入门</h3><h3 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a>helloworld</h3><p>go语言的helloWorld如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main  <span class="token comment" spellcheck="true">// 必须打main包</span> <span class="token keyword">import</span> <span class="token string">"fmt"</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"helloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>main函数必须在main目录下，包名则必须和上级目录名一致(main)；一个项目必须有且只有一个main目录(或main包)</p><p>go程序既可以直接运行，亦可以先编译，再运行</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>三种声明方式</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token string">"fmt"</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span>  <span class="token operator">=</span> <span class="token number">10</span>     <span class="token comment" spellcheck="true">// var 变量名 类型 = 值</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1.2</span>         <span class="token comment" spellcheck="true">// var 变量名 = 值</span>     name <span class="token operator">:=</span> <span class="token string">"szc"</span>         <span class="token comment" spellcheck="true">// 变量名 := 值，自动推导类型</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i = "</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">", j = "</span> <span class="token punctuation">,</span> j <span class="token punctuation">,</span> <span class="token string">", name = "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>一次声明多个变量，变量名和值一一对应</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> a<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token number">7</span>a<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token number">4</span></code></pre><p>函数外声明全局变量</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>    n1 <span class="token operator">=</span> <span class="token number">1</span>    n2 <span class="token operator">=</span> <span class="token number">2</span>    n3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">var</span> n4 <span class="token operator">=</span> <span class="token string">"n4"</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n1 = "</span><span class="token punctuation">,</span> n1<span class="token punctuation">,</span> <span class="token string">", n2 = "</span><span class="token punctuation">,</span> n2<span class="token punctuation">,</span> <span class="token string">"n3 = "</span><span class="token punctuation">,</span> n3<span class="token punctuation">,</span> <span class="token string">", n4 = "</span><span class="token punctuation">,</span> n4<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>变量声明后必须使用，而且不能隐式改变类型(int转float)</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量必须赋初值，而且不可更改</p><pre class=" language-go"><code class="language-go">    <span class="token keyword">const</span> tax <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">const</span> name_ <span class="token operator">=</span> <span class="token string">"szc"</span>    <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">//    const b_ = getVal()     // 编译期值不确定</span><span class="token comment" spellcheck="true">//    num := 1</span><span class="token comment" spellcheck="true">//    const b_ = num / 2      // 编译期值不确定</span><span class="token comment" spellcheck="true">//    const tax_0 int     // 必须赋初值</span><span class="token comment" spellcheck="true">//    tax = 2     // 不可修改</span></code></pre><p>常量只能修饰布尔、数值、字符串类型</p><p>也可以这么声明常量，可以在函数里面声明</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    a <span class="token operator">=</span> <span class="token boolean">iota</span>  <span class="token comment" spellcheck="true">//0</span>    b <span class="token operator">=</span> <span class="token boolean">iota</span>  <span class="token comment" spellcheck="true">//1</span>    c <span class="token operator">=</span> <span class="token boolean">iota</span>  <span class="token comment" spellcheck="true">//2</span>    d<span class="token punctuation">,</span>e <span class="token operator">=</span> <span class="token boolean">iota</span><span class="token punctuation">,</span><span class="token boolean">iota</span>  <span class="token comment" spellcheck="true">//3 3</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0 1 2 3 3 依次加1</span></code></pre><p>上面b和c可以不写&#x3D; iota，但是a必须写</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><h4 id="标识符概念"><a href="#标识符概念" class="headerlink" title="标识符概念"></a>标识符概念</h4><ol><li>Golang对各种变量、方法、函数等命名时使用的字符序列称为标识符</li><li>凡是自己可以起名字的地方都叫标识符</li></ol><h4 id="标识符的命名规则"><a href="#标识符的命名规则" class="headerlink" title="标识符的命名规则"></a>标识符的命名规则</h4><ol><li>由26个英文字母大小写, 0-9, _组成</li><li>数字不可以开头</li><li>Golan中严格区分大小写</li><li>标识符不能包含空格</li><li>下划线”_”本身在Go中是一个特殊的标识符,称为空标识符。可以代表任何其它的标识符,但是它对应的值会被忽略(比如:忽略某个返回值)。所以仅能被作为占位符使用,不能作为标识符使用</li><li>不能以系统保留关键字作为标识符,比如 break，if 等等</li></ol><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p>列出25个Go语言的关键字或保留字：<br><img src="/2022/06/02/Go%E5%85%A5%E9%97%A8/image-20221030214325616.png"></p><p>除了以上介绍的这些关键字，Go 语言还有 36 个预定义标识符，其中包含了基本类型的名称和一些基本的内置函数，见下表：<br><img src="/2022/06/02/Go%E5%85%A5%E9%97%A8/image-20221030214453213.png"></p><h4 id="标识符的命名规范"><a href="#标识符的命名规范" class="headerlink" title="标识符的命名规范"></a>标识符的命名规范</h4><ol><li>包名：保持 package的名字和目录保持一致，包名统一使用单数形式，尽量采取有意义的包名，简短，有意义，不要和标准库冲突</li><li>变量名、函数名、常量名：采用驼峰法</li><li>如果变量名、函数名、常量名<strong>首字母大写,则可以被其他的包访问</strong>；如果<strong>首字母小写则只能在本包中使用</strong>(注：可以简单的理解成,首字母大写是公有的,首字母是私有的)，在 golan没有public, private等关键字</li><li>文件命名：一律采用小写，不用驼峰式，尽量见名思义，看见文件名就可以知道这个文件下的大概内容。<br>其中测试文件以_test.go结尾，除测试文件外，命名不出现</li></ol><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p><img src="/2022/06/02/Go%E5%85%A5%E9%97%A8/code\Git\BLOG\hexoblog\source_posts\go入门\image-20221030214554282.png"></p><ul><li>数值型中的int32又称为rune，可保存一个unicode码点。int和uint的大小和操作系统位数一样，32位OS(系统)则为4字节，64位OS则为8字节。浮点数默认64位，整数默认int</li><li>float32 精确度为小数点后6位，float64为14位</li></ul><h4 id="值类型与引用类型"><a href="#值类型与引用类型" class="headerlink" title="值类型与引用类型"></a>值类型与引用类型</h4><p>值类型：基本数据类型、数组、结构体。变量直接存储值，通常存储于栈中，函数传参时使用值传递</p><p>引用类型：指针、切片、映射、管道、接口等。变量存储的是值的地址，通常存储于堆中，会发生GC，函数传参时使用引用传递。</p><h4 id="函数参数的两种传递方式"><a href="#函数参数的两种传递方式" class="headerlink" title="函数参数的两种传递方式"></a><strong>函数参数的两种传递方式</strong></h4><ol><li>值传递</li><li>引用传递</li></ol><p>不管是值传递还是引用传递，传递给函数的都是变量的副本，不同的是，值传递的是值的拷贝，引用传递的是地址的拷贝，一般来说，地址拷贝效率高，因为数据量小，而值拷贝决定拷贝的数据大小，数据越大，效率越低</p><h4 id="查看变量类型"><a href="#查看变量类型" class="headerlink" title="查看变量类型"></a>查看变量类型</h4><p>查看变量类型：</p><pre class=" language-go"><code class="language-go">a<span class="token punctuation">,</span> sex<span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"male"</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a的类型:%T，sex的类型:%T\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> sex<span class="token punctuation">)</span></code></pre><p>查看变量占用内存大小时，先导入unsafe和fmt包</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"unsafe"</span><span class="token punctuation">)</span></code></pre><p>再调用unsafe.Sizeof函数就行</p><pre class=" language-go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a占用内存大小：%d, sex占用内存大小：%d"</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="字符与字符串"><a href="#字符与字符串" class="headerlink" title="字符与字符串"></a>字符与字符串</h4><p>输出字符时，需要格式化输出，否则会输出的它的ascii值</p><pre class=" language-go"><code class="language-go">c1 <span class="token operator">:=</span> <span class="token string">'s'</span>c2 <span class="token operator">:=</span> <span class="token string">'0'</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"c1 = "</span><span class="token punctuation">,</span> c1<span class="token punctuation">,</span> <span class="token string">", c2 = "</span><span class="token punctuation">,</span> c2<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c1 = %c, c2 = %c\n"</span><span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span></code></pre><p>输出汉字和对应unicode码值</p><pre class=" language-go"><code class="language-go">c3 <span class="token operator">:=</span> <span class="token string">'宋'</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c3 = %c, 对应unicode码值: %d\n"</span><span class="token punctuation">,</span> c3<span class="token punctuation">,</span> c3<span class="token punctuation">)</span></code></pre><p>跨行字符串，用&#96;包住</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">`拜仁慕尼黑来自德甲。它在今年欧冠八分之一淘汰赛上首回合客场3:0完胜切尔西。`</span></code></pre><p>多行拼接字符串，要在+后面换行，而不是字符串后面</p><pre class=" language-go"><code class="language-go">s1 <span class="token operator">:=</span> <span class="token string">"abc"</span> <span class="token operator">+</span> <span class="token string">" def"</span> <span class="token operator">+</span> <span class="token string">"hij"</span></code></pre><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>不同数据类型之间必须显式类型转换</p><pre class=" language-go"><code class="language-go">a1 <span class="token operator">:=</span> <span class="token number">1.2</span>a2 <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a2 = "</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span></code></pre><p>如果范围大转换成范围小的，可能会发生精度损失，以下是例子：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> i1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token keyword">var</span> i2 <span class="token builtin">int8</span><span class="token keyword">var</span> i3 <span class="token builtin">int8</span> i2 <span class="token operator">=</span> <span class="token function">int8</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">127</span> <span class="token comment" spellcheck="true">// 运行时溢出，得不到想要结果</span>i3 <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">128</span> <span class="token comment" spellcheck="true">// 直接溢出，编译错误</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i2 = "</span><span class="token punctuation">,</span> i2<span class="token punctuation">)</span></code></pre><p>基本数据类型转string:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> s0 <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s type:%T, s = %v\n"</span><span class="token punctuation">,</span> s0<span class="token punctuation">,</span> s0<span class="token punctuation">)</span>s0 <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%t"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s type:%T, s = %v\n"</span><span class="token punctuation">,</span> s0<span class="token punctuation">,</span> s0<span class="token punctuation">)</span></code></pre><p>%v 默认格式输出，%t 布尔值输出</p><p>也可以用strconv包中的函数进行转换。用之前先导入strconv包</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"strconv"</span><span class="token punctuation">)</span></code></pre><p>然后调用函数进行转换</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">12345</span>    str <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//int 转string</span>s0 <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10表示十进制</span>   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s type:%T, s = %v\n"</span><span class="token punctuation">,</span> s0<span class="token punctuation">,</span> s0<span class="token punctuation">)</span>   s0 <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatFloat</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'f'表示浮点数类型、10表示精度10位，64表示float64</span>   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s type:%T, s = %v\n"</span><span class="token punctuation">,</span> s0<span class="token punctuation">,</span> s0<span class="token punctuation">)</span>   s0 <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatBool</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s type:%T, s = %v\n"</span><span class="token punctuation">,</span> s0<span class="token punctuation">,</span> s0<span class="token punctuation">)</span></code></pre><p>string转基本类型:</p><p>也是用strconv包中的Parse方法，但Parse方法会返回两个值：转换的值，以及转换错误</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> b2<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseBool</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// go中可以有多个返回值，_表示接收但忽略</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b2 type:%T, b2 = %v\n"</span><span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span class="token keyword">var</span> i0<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span><span class="token string">"1233"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 后两个参数分别表示进制和转换成int的位数</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i0 type:%T, i0 = %v\n"</span><span class="token punctuation">,</span> i0<span class="token punctuation">,</span> i0<span class="token punctuation">)</span> <span class="token keyword">var</span> f0<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span><span class="token string">"21.291"</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//后面的参数表示转换成float的位数</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"f0 type:%T, f0 = %v\n"</span><span class="token punctuation">,</span> f0<span class="token punctuation">,</span> f0<span class="token punctuation">)</span></code></pre><p>如果待转换的string不合法，就会转换成对应类型的默认值(0)</p><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><ol><li><p>基本数据类型，变量存的就是值,也叫值类型</p></li><li><p>获取变量的地址，用&amp;，比如:var num int,获取num的地址: &amp;num</p></li><li><p>指针类型，指针变量存的是一个地址，这个地址指向的空间存的才是值 如:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> ptr <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>num   <span class="token comment" spellcheck="true">// ptr是指针变量  ptr的类型为 *int   值为&amp;num</span></code></pre></li><li><p>获取指针类型所指向的值，使用:，比如: var ptr int，使用ptr获取p指向的值</p></li></ol><p>和C里面的指针类似</p><pre class=" language-go"><code class="language-go">i <span class="token operator">:=</span> <span class="token number">1</span>ptr0 <span class="token operator">:=</span> <span class="token operator">&amp;</span>i fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x, %d, %x"</span><span class="token punctuation">,</span> ptr0<span class="token punctuation">,</span> <span class="token operator">*</span>ptr0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ptr0<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//*ptr0表示取出ptr0指向地址对应的值</span></code></pre><p>%x表示十六进制</p><p>同样，通过指针改变变量的值也是一样</p><pre class=" language-go"><code class="language-go"><span class="token punctuation">(</span><span class="token operator">*</span>ptr0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>ptr0<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span></code></pre><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><p>下表列出了所有Go语言的算术运算符。假定 A 值为 10，B 值为 20</p><p><img src="/2022/06/02/Go%E5%85%A5%E9%97%A8/image-20221030214325616.png"></p><p><strong>注：</strong></p><ol><li>&#x2F; 运算符需要保留小数位时需要有浮点型参与运算</li><li>% 结果计算公式为： <strong>a % b &#x3D; a - a &#x2F; b * b</strong></li><li>Golang的自增自诚只能当做一个独立语言使用时,不能这样使 b :&#x3D; a++或者b :&#x3D; a–</li><li>Golang的++ 和 – 只能写在变量的g后面,不能写在变量的前面,即:只有a++，a–没有++a，–a</li><li>Golang的设计者去掉c&#x2F;java中的自增自诚的容易混淆的写法,让 Galang更加简洁,统一 (强制性的)</li></ol><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>下表列出了所有Go语言的关系运算符。假定 A 值为 10，B 值为 20。</p><p><img src="/2022/06/02/Go%E5%85%A5%E9%97%A8/image-20221127220930746.png"></p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>下表列出了所有Go语言的逻辑运算符。假定 A 值为 True，B 值为 False。</p><p><img src="/2022/06/02/Go%E5%85%A5%E9%97%A8/image-20221127224059726.png"></p><ol><li>&amp;&amp;也叫短路与：如果第一个亲件为 False,则第二个条件不会判断,最终结果为 false</li><li>||叫短路或：如果第一个亲件为true,则第二个条件不会判断,最终结果为true</li></ol><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>位运算符对整数在内存中的二进制位进行操作。假定 A 为60，B 为13</p><p>演示示例:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">60</span>     <span class="token comment" spellcheck="true">//二进制是：111100  </span>   <span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">13</span>     <span class="token comment" spellcheck="true">//二进制是：001101</span>   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%b\n%d\n"</span><span class="token punctuation">,</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">,</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//二进制是：1100,对应的十进制是12。说明&amp;进行的是上下对应位的与操作</span>   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%b\n%d\n"</span><span class="token punctuation">,</span>a<span class="token operator">|</span>b<span class="token punctuation">,</span>a<span class="token operator">|</span>b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//二进制是：111101,对应的十进制是61。说明&amp;进行的是上下对应位的或操作</span>   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%b\n%d\n"</span><span class="token punctuation">,</span>a<span class="token operator">^</span>b<span class="token punctuation">,</span>a<span class="token operator">^</span>b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//二进制是：110001,对应的十进制是49。^位运算符是上下对应位不同时，值为1</span><span class="token punctuation">}</span></code></pre><p>左移右移运算符示例（实现计算器存储单位）：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">const</span> <span class="token punctuation">(</span>       KB <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token boolean">iota</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//iota是 const 结构里面，定义常量行数的索引器，每个 const 里面，iota 都从 0 开始</span>    MB                             <span class="token comment" spellcheck="true">//下面是一个省略调用，继承了上面的表达式</span>    GB    TB    PB<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"1MB = %vKB\n"</span><span class="token punctuation">,</span>MB<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"1GB = %vKB\n"</span><span class="token punctuation">,</span>GB<span class="token punctuation">)</span>   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"1TB = %vKB\n"</span><span class="token punctuation">,</span>TB<span class="token punctuation">)</span>   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"1PB = %vKB\n"</span><span class="token punctuation">,</span>PB<span class="token punctuation">)</span><span class="token punctuation">}</span>运行结果：1MB <span class="token operator">=</span> 1024KB1GB <span class="token operator">=</span> <span class="token number">1.</span>048576e<span class="token operator">+</span>06KB1TB <span class="token operator">=</span> <span class="token number">1.</span>073741824e<span class="token operator">+</span>09KB1PB <span class="token operator">=</span> <span class="token number">1.</span>099511627776e<span class="token operator">+</span>12KB</code></pre><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>下表列出了所有Go语言的赋值运算符。假定 A 为21</p><p><img src="/2022/06/02/Go%E5%85%A5%E9%97%A8/code\Git\BLOG\hexoblog\source_posts\go入门\image-20221127224545660.png"></p><ol><li>赋值运算符的运算顺序为：从右往左</li><li>运算符的左边只能是变量，右边可以是变量、表达式、常量</li></ol><h4 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h4><p><img src="/2022/06/02/Go%E5%85%A5%E9%97%A8/code\Git\BLOG\hexoblog\source_posts\go入门\image-20221127224654129.png"></p><p>内存地址和指针的示例：打印变量类型用%T</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">4</span>   <span class="token keyword">var</span> b <span class="token builtin">int32</span>   <span class="token keyword">var</span> c <span class="token builtin">float32</span>   <span class="token keyword">var</span> ptr <span class="token operator">*</span><span class="token builtin">int</span>   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a 变量类型为 = %T\n"</span><span class="token punctuation">,</span> a <span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//输出变量类型%T</span>   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b 变量类型为 = %T\n"</span><span class="token punctuation">,</span> b <span class="token punctuation">)</span>   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c 变量类型为 = %T\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span>   ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>a       fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a 的内存地址为 = %p"</span><span class="token punctuation">,</span>ptr<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//go里面的内存块地址通常都是用十六进制表示的，因此输出：0x10414020a</span>   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"*ptr 为 %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//这是个指向a的内存地址的指针，因此输出：4</span><span class="token punctuation">}</span></code></pre><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><p>有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右。下表列出了所有运算符以及它们的优先级，由上至下代表优先级由高到低：</p><pre class=" language-go"><code class="language-go">优先级     运算符 <span class="token number">7</span>      <span class="token operator">^</span> <span class="token operator">!</span> <span class="token number">6</span>      <span class="token operator">*</span> <span class="token operator">/</span> <span class="token operator">%</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">>></span> <span class="token operator">&amp;</span> <span class="token operator">&amp;^</span> <span class="token number">5</span>      <span class="token operator">+</span> <span class="token operator">-</span> <span class="token operator">|</span> <span class="token operator">^</span> <span class="token number">4</span>      <span class="token operator">==</span> <span class="token operator">!=</span> <span class="token operator">&lt;</span> <span class="token operator">&lt;=</span> <span class="token operator">>=</span> <span class="token operator">></span> <span class="token number">3</span>      <span class="token operator">&lt;-</span> <span class="token number">2</span>      <span class="token operator">&amp;&amp;</span> <span class="token number">1</span>      <span class="token operator">||</span></code></pre><ol><li>只有单目运算符、赋值运算符是从右向左运算的。其余都是从左向右</li><li>可以通过使用括号来临时提升某个表达式的整体运算优先级.</li></ol><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><ul><li>包的本质是创建不同的文件夹，来存放程序文件</li><li>包名通常和文件夹名保持一致</li><li>文件中变量、函数名首字母大写，则为public，小写则为包私有</li><li>在import包时，路径从$GOPATH的src下开始，不用带src，编译器会从src下开始引入</li><li>然后就可以引用model包下首字母大写的变量或函数了</li><li>如果包名过长，可以给包起别名。一旦起别名，原来的名就不能再使用了</li><li>在同一个包下不能有相同的函数名和变量名</li></ul><pre class=" language-go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 包名.函数/变量</span></code></pre><p>model包下的test_model.go内容如下所示，文件不用引用。引用目录就行</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> model   <span class="token comment" spellcheck="true">//打包</span> <span class="token keyword">var</span> Name <span class="token operator">=</span> <span class="token string">"Jason"</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">23</span></code></pre><p><strong>编译go项目：</strong></p><ol><li>进入到项目的$GOPATH目录下</li><li>运行 go build -o bin&#x2F;name.exe 路径 &#x2F;&#x2F; -o 为给生成的可执行文件指定位置和命名， 路径为src下开始到main包 例： &#x2F;go_code&#x2F;helloword&#x2F;main</li></ol><h4 id="读取控制台数据"><a href="#读取控制台数据" class="headerlink" title="读取控制台数据"></a>读取控制台数据</h4><p>调用fmt.Scan等方法即可</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> j <span class="token builtin">string</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>j<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Scanln读取一行</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"j = "</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span></code></pre><p>或者指定输入格式</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> j <span class="token builtin">string</span><span class="token keyword">var</span> m <span class="token builtin">float32</span><span class="token keyword">var</span> n <span class="token builtin">bool</span> fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%d%f%s%t"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>j<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i = "</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">"j = "</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token string">"m = "</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token string">"n = "</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span></code></pre><p>输入时按空格或回车区分即可</p><h4 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h4><h5 id="if-else-流程控制"><a href="#if-else-流程控制" class="headerlink" title="if-else 流程控制"></a>if-else 流程控制</h5><p>基本语法</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> 表达式<span class="token number">1</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 表达式可以写()，官方不推荐写</span><span class="token comment" spellcheck="true">//代码块</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> 表达式<span class="token number">2</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// else if 可省略，不能换行写</span><span class="token comment" spellcheck="true">//代码块</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// else 可省略，不能换行写</span><span class="token comment" spellcheck="true">//代码块</span><span class="token punctuation">}</span></code></pre><h5 id="switch分支结构"><a href="#switch分支结构" class="headerlink" title="switch分支结构"></a>switch分支结构</h5><p>基本语法</p><pre class=" language-go"><code class="language-go"><span class="token keyword">switch</span> 表达式 <span class="token punctuation">{</span><span class="token keyword">case</span> 表达式<span class="token number">1</span>，表达式<span class="token number">2</span>，…… ：<span class="token comment" spellcheck="true">// 语句块1</span><span class="token keyword">case</span> 表达式<span class="token number">3</span>，表达式<span class="token number">4</span>，…… ：<span class="token comment" spellcheck="true">// 语句块2</span><span class="token comment" spellcheck="true">// 多个case，结构同上</span><span class="token keyword">default</span> ：<span class="token comment" spellcheck="true">// 语句块3</span><span class="token punctuation">}</span></code></pre><h5 id="switch-的执行的流程："><a href="#switch-的执行的流程：" class="headerlink" title="switch 的执行的流程："></a><strong>switch 的执行的流程</strong>：</h5><ol><li>先执行表达式，得到值，然后和 case 的表达式进行比较，如果相等，就匹配到，然后执行对应的 case 的语句块，然后<strong>退出</strong> switch 控制。</li><li>如果 switch的表达式的值没有和任何的 case 的表达式匹配成功，则执行 default的语句块。</li><li>多个表达式使用<strong>逗号</strong>间隔</li></ol><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>基本语法</p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> 循环变量初始化 ；循环条件 ；循环变量迭代 <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//循环操作</span><span class="token punctuation">}</span></code></pre><p><strong>注：Go中没有while，do…while循环，Go语言支持goto跳转，但不支持使用</strong></p><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><p>break用于终止某个语句块的执行，用于中断当前for或跳出switch语句</p><p>break 出现在多层嵌套循环中可以使用标签（label）表明要终止哪个循环</p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> j<span class="token operator">==</span><span class="token number">2</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span>  <span class="token comment" spellcheck="true">// break  默认会跳出最近的for循环</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"j="</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre class=" language-go"><code class="language-go">j<span class="token operator">=</span> <span class="token number">0</span>j<span class="token operator">=</span> <span class="token number">1</span>j<span class="token operator">=</span> <span class="token number">0</span>j<span class="token operator">=</span> <span class="token number">1</span>j<span class="token operator">=</span> <span class="token number">0</span>j<span class="token operator">=</span> <span class="token number">1</span>j<span class="token operator">=</span> <span class="token number">0</span>j<span class="token operator">=</span> <span class="token number">1</span></code></pre><p>使用标签</p><pre class=" language-go"><code class="language-go">label1<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> j<span class="token operator">==</span><span class="token number">2</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span>  label1    <span class="token comment" spellcheck="true">// 一旦触发直接终止i的循环</span>            <span class="token punctuation">}</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"j="</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre class=" language-go"><code class="language-go">j<span class="token operator">=</span> <span class="token number">0</span>j<span class="token operator">=</span> <span class="token number">1</span></code></pre><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><p>continue用于结束本次循环，在多层嵌套时可用标签跳转，用法同上（break是终止循环，continue是跳过本次循环）</p><h4 id="for-range遍历"><a href="#for-range遍历" class="headerlink" title="for-range遍历"></a>for-range遍历</h4><p>这是一种同时获取索引和值或键值的遍历方式</p><pre class=" language-go"><code class="language-go">str <span class="token operator">:=</span> <span class="token string">"拜仁慕尼黑来自德甲"</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> str <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d --- %c "</span><span class="token punctuation">,</span>index<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出：0 — 拜 3 — 仁 6 — 慕 9 — 尼 12 — 黑 15 — 来 18 — 自 21 — 德 24 — 甲</p><h3 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h3><p>导入math&#x2F;random和time包</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"math/rand"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span></code></pre><p>设置种子，生成随机数</p><pre class=" language-go"><code class="language-go">rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//time.Now().UnixNano() 返回当前系统的纳秒数</span>n <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n="</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h4 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h4><p>函数定义:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> 函数名 <span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> （返回值列表） <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//返回值只有一个时可以不写（）</span><span class="token comment" spellcheck="true">//函数体</span><span class="token keyword">return</span> 返回值列表<span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">generateRandom</span><span class="token punctuation">(</span>time <span class="token builtin">int64</span><span class="token punctuation">,</span> _range <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>    <span class="token keyword">return</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>_range<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>调用如下：</p><pre class=" language-go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">generateRandom</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>调用函数，如果函数有多个返回值时，在接收时，希望忽略某个返回值，则使用 _ 符号表示占位忽略</p><p>Go函数支持可变参数(可变参数要放在形参列表的最后一位)</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>args<span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//支持0-多个参数</span>    <span class="token comment" spellcheck="true">//......</span><span class="token punctuation">}</span></code></pre><h4 id="init函数"><a href="#init函数" class="headerlink" title="init函数"></a>init函数</h4><p>每一个源文件中都有一个init函数，最大的作用是用来初始化源文件，该函数会在main函数执行前被调用</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"init variable_advanced.."</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>源文件执行流程：全局变量定义 -&gt; init -&gt; main，如果此文件还引入了别的文件，就先执行被引用文件的变量定义和init</p><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>匿名函数，没有名字的函数，如下</p><pre class=" language-go"><code class="language-go">res <span class="token operator">:=</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> n1 <span class="token operator">*</span> n2<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res = "</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>后面的(2, 8)表示调用并传参</p><p>也可以把匿名函数赋给一个变量</p><pre class=" language-go"><code class="language-go">a <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n2<span class="token punctuation">,</span> n1<span class="token punctuation">}</span> n1 <span class="token operator">:=</span> <span class="token number">10</span>n2 <span class="token operator">:=</span> <span class="token number">29</span>n1<span class="token punctuation">,</span> n2 <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span></code></pre><p>然后就可以对a进行多次调用了</p><p>也可以把匿名函数定义成全局变量</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>    fun1 <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> n1 <span class="token operator">*</span> n2    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>一个函数和其相关的引用环境组合的整体叫做闭包，例如</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> n <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>        n <span class="token operator">=</span> n <span class="token operator">+</span> x        <span class="token keyword">return</span> n    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>AddUpper()返回的匿名函数，引用了匿名函数外的n，所以AddUpper内部形成了闭包。AddUpper的调用如下：</p><pre class=" language-go"><code class="language-go">f <span class="token operator">:=</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 11</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 14</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 17</span></code></pre><p>由于形成了匿名函数+外部引用的形式，所以每次调用AddUpper()时，n都会继承上一次调用的值。</p><p>就当n是AddUpper()的属性，一个对象只会初始化一次。</p><pre class=" language-go"><code class="language-go">f <span class="token operator">:=</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 11</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 14</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 17</span> g <span class="token operator">:=</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 14</span></code></pre><h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><p>defer用来表示一条语句在函数结束后再执行（主要用于释放资源），defer语句会把语句和相应数值的拷贝进行压栈，先入后出。以如下代码为例，这是一个defer + 闭包的例子，makeSuffix的入参为suffix，而返回值是一个函数，此函数入参类型为string，返回值类型也是string。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">makeSuffix</span><span class="token punctuation">(</span>suffix <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"suffix = "</span><span class="token punctuation">,</span> suffix<span class="token punctuation">,</span> <span class="token string">", n = "</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span>    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"makeSuffix.."</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>file_name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> suffix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> file_name <span class="token operator">+</span> suffix        <span class="token punctuation">}</span>                <span class="token keyword">return</span> file_name    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    f <span class="token operator">:=</span> <span class="token function">makeSuffix</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token string">"szc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token string">"szc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>可见虽然匿名函数执行了两次，但闭包函数makeSuffix里的语句只执行了一次，而且defer语句先定义的后输出，且都在函数体执行完之后。</p><h4 id="字符串常用函数"><a href="#字符串常用函数" class="headerlink" title="字符串常用函数"></a>字符串常用函数</h4><ol><li>统计字符串的长度,按字节 len(str)</li><li>字符串遍历，同时处理有中文的问题 r :&#x3D; []rune(str)</li><li>字符串转整数： n , err :&#x3D; strconv.Atoi(“12”)</li><li>整数转字符串: str &#x3D; strconv.Itoa(12345)</li><li>字符串转[]byte: var bytes&#x3D; []byte(“hello go”)</li><li>[]byte转字符串: str &#x3D; string([]byte{97,98,99})</li><li>10进制转2,8,16进制: str &#x3D; strconv.FormatInt(123,2) &#x2F;&#x2F; 2-&gt;8,16S</li><li>查找子串是否在指定的字符串中: strings.Contains(“seafood”, “foo”) &#x2F;&#x2F;true</li><li>统计一个字符串有几个指定的子串:strings.Count(“ceheese”, “e”) &#x2F;&#x2F;4</li><li>不区分大小写的字符串比较(&#x3D;&#x3D; 是区分字母大小写的): fmt.PrintIn(strings.EqualFold(“abc”, “Abc”) &#x2F;&#x2F; true</li><li>返回子串在字符串第一次出现的index值，如果没有返回-1 : strings.Index(“NLT_abc”,”abc”) &#x2F;&#x2F;4</li><li>返回子串在字符串最后一次出现的index，如没有返回-1 : strings.LastIndex(“go golang” , “go”)</li><li>将指定的子串替换成 另外一个子串: strings.Replace(“go go hello” , “go”, “go语言”, n) n 可以指定你希望替换几个,如果n &#x3D; -1表示全部替换</li><li>按照指定的某个字符，为分割标识，将一个字符串拆分成字符串数组:strings.Split(“hello,wrold,ok” , “,”)</li><li>将字符串的字母进行大小写的转换: strings.ToLower(“Go”) &#x2F;&#x2F; go strings.ToUpper(“Go”) &#x2F;&#x2F;GO</li><li>将字符串左右两边的空格去掉 : strings.TrimSpace(“ tn a lone gopher ntrn “)</li><li>将字符串左右两边指定的字符去掉: strings.Trim(“! hello! “, “ !”) &#x2F;&#x2F; [“hello”]&#x2F;&#x2F;将左右两边!和””去掉</li><li>将字符串左边指定的字符去掉: strings.TrimLeft(“! hello! “,” !”) &#x2F;&#x2F; [“hello”]&#x2F;&#x2F;将左边!和”“去掉</li><li>将字符串右边指定的字符去掉: strings.TrimRight(“! hello! “,” !”) &#x2F;&#x2F; [“hello”]&#x2F;&#x2F;将右边!和””去掉</li><li>判断字符串是否以指定的字符串开头: strings.HasPrefix(“<a href="ftp://192.168.10.1" ">ftp://192.168.10.1"</a> ,”ftp”) &#x2F;&#x2F; true</li><li>判断字符串是否以指定的字符串结束: strings.HasSuffix(“‘NLT_abc.jpg”,”abc”) &#x2F;&#x2F;false</li></ol><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><ol><li>len : 用来求长度，比如string、array、slice、map、channel</li><li>new : 用来分配内存，主要用来分配值类型，比如int、float32、struct…返回的是指针</li><li>make:用来分配内存，主要用来分配引用类型，比如chan、map、slice。</li></ol><p>值类型的用new，返回的是一个指针</p><pre class=" language-go"><code class="language-go">p <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"*p = "</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token string">", p = "</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">29</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"*p = "</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span></code></pre><p>引用类型的用make</p><h3 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h3><p>panic、 defer、recover 用于异常处理</p><p>defer、recover捕获异常，相当于try-catch</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 捕获异常</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出异常</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    n1 <span class="token operator">:=</span> <span class="token number">1</span>    n2 <span class="token operator">:=</span> <span class="token number">0</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res:"</span><span class="token punctuation">,</span> n1 <span class="token operator">/</span> n2<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>当我们需要自定义错误时，使用errors.New(“错误说明”)。遇到错误终止程序，使用panic()函数（输出错误信息，并退出程序），示例如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testError</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"szc"</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"Something wrong with "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"..."</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 定义新的错误信息</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    err <span class="token operator">:=</span> <span class="token function">testError</span><span class="token punctuation">(</span><span class="token string">"sss"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 终止程序</span>    <span class="token punctuation">}</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>要先导入errors包</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"errors"</span><span class="token punctuation">)</span></code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>定义和使用如下所示</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> hens <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">float64</span>total <span class="token operator">:=</span> <span class="token number">0.0</span>rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>hens<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    hens<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">Float64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">5</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" 个数是"</span><span class="token punctuation">,</span> hens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        total <span class="token operator">+=</span> hens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"均值为"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>total <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>hens<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>数组初始化：元素值默认为0，也可以用下面的方式初始化</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> nums <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span> <span class="token keyword">var</span> nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span> <span class="token keyword">var</span> nums3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 自行判断长度，中括号里...一个不能少</span> <span class="token keyword">var</span> num4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 指定索引和值</span></code></pre><p>由于函数调用时数组形参的值传递，我们可以使用数组指针来实现数组内容在函数里的实际改变，如下所示</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">modify</span><span class="token punctuation">(</span>array <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> hens <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">float64</span>    total <span class="token operator">:=</span> <span class="token number">0.0</span>        rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>hens<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        hens<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">Float64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">5</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" 个数是"</span><span class="token punctuation">,</span> hens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                total <span class="token operator">+=</span> hens<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"均值为"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>total <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>hens<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token function">modify</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hens<span class="token punctuation">)</span>     total <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>hens<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" 个数是"</span><span class="token punctuation">,</span> hens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        total <span class="token operator">+=</span> hens<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"均值为"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>total <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>hens<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="切片-slice"><a href="#切片-slice" class="headerlink" title="切片(slice)"></a>切片(slice)</h2><p>切片就是动态数组，是数组的一个引用，遍历，访问切片元素，获取切片长度和数组一样。</p><p>切片内存结构相当于一个结构体，由三部分构成：引用数组部分的首地址(ptr*)、切片长度(len)和切片容量(cap)</p><p>由于是引用，所以改变切片的值，也会改变原数组的对应值</p><p>切片定义的基本语法： var 变量名 [] 类型 &#x2F;&#x2F; 例如： var a [] int</p><p>引用切片的三种方式：</p><ol><li>定义一个切片，用切片去引用一个已经创建好的数组</li><li>通过make来创建切片 ： var 切片名 [] type &#x3D;make([],len,[cap]) &#x2F;&#x2F;cap可选，要求cap&gt;&#x3D; len &#x2F;&#x2F; slice0 :&#x3D; make([]int, 4, 10)</li><li>定义一个切片，直接指定具体数组，使用原理类似nake的方式</li></ol><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//1.</span>array0 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>slice <span class="token operator">:=</span> array0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 切片  array0[1: 4] 表示slice引用array0数组起始下标为1，最后下标为4(不包含4)</span>   slice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>array0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 7</span><span class="token comment" spellcheck="true">//3.</span>slice2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span></code></pre><p>make方法创建切片时，会在底层创建一个数组，只是这个数组是我们不可见的</p><p>slice可以通过append的方式来进行动态追加，append时底层会构建一个新的数组，把所有要装进去的元素装进去，然后返回。</p><pre class=" language-go"><code class="language-go">slice0 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice0<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// slice0后面的参数都是要追加的元素</span>slice0 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice0<span class="token punctuation">,</span> slice<span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 把slice1的值追加到slice0后面</span></code></pre><p>切片的拷贝可以通过copy函数实现</p><pre class=" language-go"><code class="language-go">slice1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 长度为10</span><span class="token function">copy</span><span class="token punctuation">(</span>slice1<span class="token punctuation">,</span> slice<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 参数列表：dest、src</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice1<span class="token punctuation">)</span>slice1<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>slice1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 原切片不变</span></code></pre><p>copy时，dest切片的长度并不重要</p><p>切片操作字符串：</p><pre class=" language-go"><code class="language-go">str <span class="token operator">:=</span> <span class="token string">"hello@world!"</span>slece <span class="token operator">:=</span> str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slece="</span><span class="token punctuation">,</span>slece<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// string 是不可变的，不能通过str[0] ='z' 方式来修改字符串</span><span class="token comment" spellcheck="true">// 修改字符串，可以将 string -> []byte  或者 []rune  -> 修改  ->重写转成string</span>upstr<span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 可以处理数字和英文还有符号，不能处理中文。原因：一个汉字占3个字节</span>upstr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'-'</span>str <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>upstr<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"str="</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 处理中文 转成 []rune 即可</span>chstr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>chstr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'一'</span>chstr <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>chstr<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"chstr="</span><span class="token punctuation">,</span>chstr<span class="token punctuation">)</span></code></pre><p><strong>练习</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"排序前 array="</span><span class="token punctuation">,</span>array<span class="token punctuation">)</span>    <span class="token function">BubbleSort</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"冒泡排序后 array="</span><span class="token punctuation">,</span>array<span class="token punctuation">)</span>    in <span class="token operator">:=</span> <span class="token number">5</span>    findResult <span class="token operator">:=</span> <span class="token function">BinaryFind</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"二分查找 in="</span><span class="token punctuation">,</span>in<span class="token punctuation">,</span><span class="token string">" 数组array="</span><span class="token punctuation">,</span>array<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"二分查找结果下标为： index="</span><span class="token punctuation">,</span>findResult<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// BubbleSort 冒泡排序</span><span class="token keyword">func</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span> j <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>                temp <span class="token operator">:=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>                arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span>temp            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// BinaryFind 对有序数组进行二分查找</span><span class="token keyword">func</span> <span class="token function">BinaryFind</span><span class="token punctuation">(</span>in <span class="token builtin">int</span><span class="token punctuation">,</span>arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span>leftIndex <span class="token builtin">int</span><span class="token punctuation">,</span>rightIndex <span class="token builtin">int</span> <span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    middle <span class="token operator">:=</span> <span class="token punctuation">(</span>leftIndex<span class="token operator">+</span>rightIndex<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>    <span class="token keyword">if</span> leftIndex <span class="token operator">></span> rightIndex <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> arr<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">></span> in <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//查找范围  leftIndex  -  middle-1</span>        <span class="token keyword">return</span> <span class="token function">BinaryFind</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span>arr<span class="token punctuation">,</span>leftIndex<span class="token punctuation">,</span>middle<span class="token number">-1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> arr<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&lt;</span> in <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//查找范围  middle+1   - rightIndex</span>        <span class="token keyword">return</span> <span class="token function">BinaryFind</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span>arr<span class="token punctuation">,</span>middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>rightIndex<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//找到了</span>        <span class="token keyword">return</span> middle    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span></code></pre><h2 id="映射-map"><a href="#映射-map" class="headerlink" title="映射(map)"></a>映射(map)</h2><p>基本语法：var 变量名 map[keytype] valuetype</p><p>key的类型可以为：bool，数字，string，指针，channel，接口，结构体，数组 （slice喝function不可以）</p><p>map声明后无法直接使用，要先make申请内存，再使用</p><pre class=" language-go"><code class="language-go">    m1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// map[键类型] 值类型</span>     m1<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Jason"</span> <span class="token comment" spellcheck="true">// 键值对赋值</span>    m1<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"23"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//按键取值</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m1<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// songzeceng</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m1<span class="token punctuation">[</span><span class="token string">"gender"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 空字符串</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m1<span class="token punctuation">[</span><span class="token string">"gender"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">//删除某值</span><span class="token function">delete</span><span class="token punctuation">(</span>m1<span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 如果不存在age键，则也不会报错</span><span class="token comment" spellcheck="true">//如果需要清空映射，直接分配新的内存就行</span></code></pre><p>map的使用：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//1.先声明再make</span>    <span class="token keyword">var</span> a <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>    a <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2.直接make</span>    b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//3.声明时赋值</span>c <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>    <span class="token string">"key1"</span><span class="token punctuation">:</span><span class="token string">"宋江"</span><span class="token punctuation">,</span>    <span class="token string">"key2"</span><span class="token punctuation">:</span><span class="token string">"无用"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// ,不能省略</span><span class="token punctuation">}</span></code></pre><p>遍历映射，使用for-range</p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m1 <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">"--"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>map切片可以动态变化map的个数</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> slice_map <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token builtin">string</span>slice_map <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> slice_map <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice_map<span class="token punctuation">,</span> m1<span class="token punctuation">,</span> m2<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice_map<span class="token punctuation">)</span></code></pre><p>注：</p><ol><li>map的key是无序的</li><li>map在函数传参时是引用传递</li><li>map达到容量后，再添加元素，会自动扩容</li></ol><p><strong>判断key是否存在</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dict <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">"key1"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>    value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> dict<span class="token punctuation">[</span><span class="token string">"key1"</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> ok <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"key1 不存在"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dict <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">"key1"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> dict<span class="token punctuation">[</span><span class="token string">"key1"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"key1 不存在"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>new 和make的区别：</strong></p><ol><li>new和make都可以用来初始化内存</li><li>new多用于基本数据类型的初始化（bool，string，int…）返回的是指针</li><li>make用于初始化slice、map、channel，返回的是对应类型</li></ol><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>结构体是go面向对象的实现方式，没有this指针、没有方法覆写、没有extends关键字等</p><p>其声明和使用如下所示</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name <span class="token builtin">string</span>    Age <span class="token builtin">int</span>    Hometown <span class="token builtin">string</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    person0 <span class="token operator">:=</span> Person<span class="token punctuation">{</span><span class="token string">"Jason"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">}</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>person0<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>结构体是值类型，因此函数传参是值传递，而且拷贝也是浅拷贝</p><pre class=" language-go"><code class="language-go">person1 <span class="token operator">:=</span> person0person1<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>person0<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// person0的age依旧是23</span></code></pre><p>结构体指针声明和使用如下:</p><p>结构体指针访问字段的标准方式为：(*结构体指针).字段名 go底层做了优化 支持 ： 结构体指针.字段名 的访问方式</p><pre class=" language-go"><code class="language-go">person2 <span class="token operator">:=</span> <span class="token function">new</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指针声明方式1</span><span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Jason"</span><span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span><span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">24</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 没有赋值的字段默认为0值</span> person3 <span class="token operator">:=</span> <span class="token operator">&amp;</span>Person<span class="token punctuation">{</span><span class="token string">"Mike"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"London"</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 指针声明方式2</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>person3<span class="token punctuation">)</span></code></pre><p>如果结构体有切片、映射等属性，也要先分配内存再使用</p><p>结构体地址为首字段地址，且内部字段在内存中的地址连续分配。举例如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Point <span class="token keyword">struct</span> <span class="token punctuation">{</span>    x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">type</span> Rect <span class="token keyword">struct</span> <span class="token punctuation">{</span>    leftUp<span class="token punctuation">,</span> rightDown Point<span class="token punctuation">}</span></code></pre><p>则以下代码</p><pre class=" language-go"><code class="language-go">rect0 <span class="token operator">:=</span> Rect <span class="token punctuation">{</span>Point<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Point<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%p "</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect0<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rect0<span class="token punctuation">.</span>leftUp<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect0<span class="token punctuation">.</span>leftUp<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect0<span class="token punctuation">.</span>rightDown<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect0<span class="token punctuation">.</span>rightDown<span class="token punctuation">.</span>y<span class="token punctuation">)</span></code></pre><p>的输出如下</p><pre class=" language-go"><code class="language-go"><span class="token number">0xc00000e460</span> <span class="token number">0xc00000e460</span> <span class="token number">0xc00000e468</span> <span class="token number">0xc00000e470</span> <span class="token number">0xc00000e478</span></code></pre><p>当然，结构体内变量值不一定连续分配，看以下示例</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Rect_ <span class="token keyword">struct</span> <span class="token punctuation">{</span>    leftUp<span class="token punctuation">,</span> rightDown <span class="token operator">*</span>Point<span class="token punctuation">}</span></code></pre><p>则以下代码</p><pre class=" language-go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%p\t%p\n"</span><span class="token punctuation">,</span> rect1<span class="token punctuation">.</span>leftUp<span class="token punctuation">,</span> rect1<span class="token punctuation">.</span>rightDown<span class="token punctuation">)</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rect1<span class="token punctuation">.</span>leftUp<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect1<span class="token punctuation">.</span>leftUp<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect1<span class="token punctuation">.</span>rightDown<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect1<span class="token punctuation">.</span>rightDown<span class="token punctuation">.</span>y<span class="token punctuation">)</span></code></pre><p>结构体和其他类型进行转换时需要有完全相同的字段（名字、个数和类型）</p><p>给结构体取别名，相当于定义新的数据类型，两者的变量赋值时，必须强转。</p><p>给结构体属性取标签，可以方便转json时转换大小写</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"encoding/json"</span><span class="token punctuation">)</span> <span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name <span class="token builtin">string</span> <span class="token string">`json:"name"`</span> <span class="token comment" spellcheck="true">// 标签</span>    Age <span class="token builtin">int</span> <span class="token string">`json:"age"`</span>    Hometown <span class="token builtin">string</span> <span class="token string">`json:"homeTown"`</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    person0 <span class="token operator">:=</span> Person<span class="token punctuation">{</span><span class="token string">"szc"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"Washington"</span><span class="token punctuation">}</span>     jsonStr<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>person0<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出如下</p><pre class=" language-go"><code class="language-go"><span class="token punctuation">{</span>“name”<span class="token punctuation">:</span>”szc”<span class="token punctuation">,</span>”age”<span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">,</span>”homeTown”<span class="token punctuation">:</span>”Washington”<span class="token punctuation">}</span></code></pre><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>go中方法是作用在指定的数据类型上的（即：和指定的数据类型绑定），因此自定义类型，都可以有方法，而不仅仅是struct</p><p>go方法的声明（定义）</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token function">methodName</span> <span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">(</span>返回值列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    方法体    <span class="token keyword">return</span> 返回值<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// t type 表示这个方法和type这个类型进行绑定 t为type的一个实例</span></code></pre><p>go中的方法定义如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name <span class="token builtin">string</span> <span class="token string">`json:"name"`</span> <span class="token comment" spellcheck="true">// 标签</span>    Age <span class="token builtin">int</span> <span class="token string">`json:"age"`</span>    Hometown <span class="token builtin">string</span> <span class="token string">`json:"homeTown"`</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p Person<span class="token punctuation">)</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token string">"\tage:"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>Age<span class="token punctuation">,</span> <span class="token string">"\thometown:"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>Hometown<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>调用方法如下</p><pre class=" language-go"><code class="language-go">person0 <span class="token operator">:=</span> Person<span class="token punctuation">{</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"California"</span><span class="token punctuation">}</span> person2 <span class="token operator">:=</span> <span class="token function">new</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Jason"</span><span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span><span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">24</span> person0<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出如下</p><pre class=" language-go"><code class="language-go">name<span class="token punctuation">:</span> Bob age<span class="token punctuation">:</span> <span class="token number">23</span> hometown<span class="token punctuation">:</span> Californianame<span class="token punctuation">:</span> Jason age<span class="token punctuation">:</span> <span class="token number">24</span> hometown<span class="token punctuation">:</span></code></pre><p>绑定方法时的p是实际调用者的副本，方法调用时会发生值拷贝。所以当结构体有引用型成员变量时，在方法里发生的修改会同步到方法外面</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name <span class="token builtin">string</span>    Age <span class="token builtin">int</span>     Hometown <span class="token builtin">string</span>     score <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p Person<span class="token punctuation">)</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    p<span class="token punctuation">.</span>Age <span class="token operator">+=</span> <span class="token number">1</span>    p<span class="token punctuation">.</span>score<span class="token punctuation">[</span><span class="token string">"China"</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    m0 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    m0<span class="token punctuation">[</span><span class="token string">"China"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">80</span>    person0 <span class="token operator">:=</span> Person<span class="token punctuation">{</span><span class="token string">"szc"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"Henan Anyang"</span><span class="token punctuation">,</span> m0<span class="token punctuation">}</span>     person2 <span class="token operator">:=</span> <span class="token function">new</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Jason"</span>    <span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span><span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">24</span>    m2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    m2<span class="token punctuation">[</span><span class="token string">"Math"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">90</span>    <span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span><span class="token punctuation">.</span>score <span class="token operator">=</span> m2     person0<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>person0<span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>会得到以下输出，age没有变，但映射属性却发生了改变</p><pre class=" language-go"><code class="language-go"><span class="token punctuation">{</span>szc <span class="token number">23</span> Henan Anyang <span class="token keyword">map</span><span class="token punctuation">[</span>China<span class="token punctuation">:</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">{</span>Jason <span class="token number">24</span> <span class="token keyword">map</span><span class="token punctuation">[</span>China<span class="token punctuation">:</span><span class="token number">1</span> Math<span class="token punctuation">:</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>对应的map变量的值也会发生变化</p><pre class=" language-go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m0<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">,</span> m2<span class="token punctuation">)</span></code></pre><p>输出如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">map</span><span class="token punctuation">[</span>China<span class="token punctuation">:</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span>China<span class="token punctuation">:</span><span class="token number">1</span> Math<span class="token punctuation">:</span><span class="token number">90</span><span class="token punctuation">]</span></code></pre><p>不过，为了能使方法里的修改更高效地同步到外面，声明方法时一般会绑定结构体指针，如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">test_1</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span><span class="token string">"China"</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">n</span>    <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>Age <span class="token operator">-=</span> n     <span class="token keyword">return</span> <span class="token string">"succeed"</span><span class="token punctuation">}</span></code></pre><p>调用时，还是可以直接使用变量名调用方法，而不必取址</p><pre class=" language-go"><code class="language-go"><span class="token punctuation">(</span><span class="token operator">&amp;</span>person0<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test_1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>person0<span class="token punctuation">)</span>person0<span class="token punctuation">.</span><span class="token function">test_1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>person0<span class="token punctuation">)</span></code></pre><p>输出如下</p><pre class=" language-go"><code class="language-go"><span class="token punctuation">{</span>Jason <span class="token number">18</span> Washington <span class="token keyword">map</span><span class="token punctuation">[</span>China<span class="token punctuation">:</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">{</span>Jason <span class="token number">13</span> Washington <span class="token keyword">map</span><span class="token punctuation">[</span>China<span class="token punctuation">:</span><span class="token number">91</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>所以，方法里对结构体变量的成员进行的修改能不能同步到外面，关键要看方法绑定时绑定的是不是指针，而不是调用时用什么调用的。</p><p>以上的方法定义也适用于系统自带类型，定义方法如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> integer <span class="token builtin">int</span> <span class="token comment" spellcheck="true">// 要先定义别名</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>i <span class="token operator">*</span>integer<span class="token punctuation">)</span> <span class="token function">test</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">*</span>i <span class="token operator">+=</span> <span class="token function">integer</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// int和integer虽然只是别名关系，但依旧不是同一个类型</span><span class="token punctuation">}</span></code></pre><p>调用过程如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> num integernum <span class="token operator">=</span> <span class="token number">8</span>num<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre><p>会得到输出14</p><p>如果要实现类似java里的toString，我们可以对指定数据类型绑定String()方法，返回string</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p Person<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"name:%v\tage:%v\thometown:%v\tscore:%v"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Age<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Hometown<span class="token punctuation">,</span> p<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>然后使用fmt输出Person变量</p><pre class=" language-go"><code class="language-go">m0 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>m0<span class="token punctuation">[</span><span class="token string">"China"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">80</span>person0 <span class="token operator">:=</span> Person<span class="token punctuation">{</span><span class="token string">"Mike"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"Manchester"</span><span class="token punctuation">,</span> m0<span class="token punctuation">}</span> person2 <span class="token operator">:=</span> <span class="token function">new</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Jason"</span><span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span><span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">24</span>m2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>m2<span class="token punctuation">[</span><span class="token string">"Math"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">90</span><span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span><span class="token punctuation">.</span>score <span class="token operator">=</span> m2 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>person0<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span></code></pre><pre class=" language-go"><code class="language-go">name<span class="token punctuation">:</span>Mike age<span class="token punctuation">:</span><span class="token number">23</span> hometown<span class="token punctuation">:</span>Manchester score<span class="token punctuation">:</span><span class="token keyword">map</span><span class="token punctuation">[</span>China<span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">]</span>name<span class="token punctuation">:</span>Jason age<span class="token punctuation">:</span><span class="token number">24</span> hometown<span class="token punctuation">:</span> score<span class="token punctuation">:</span><span class="token keyword">map</span><span class="token punctuation">[</span>Math<span class="token punctuation">:</span><span class="token number">90</span><span class="token punctuation">]</span></code></pre><p>如果方法实现了String()这个方法，那么fmt.Println默认会调用这个变量的String()方法进行输出</p><p>如果String()方法绑定的是结构体指针，那么输出时要传入地址，否则会按照原来的方式输出</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"name:%v\tage:%v\thometown:%v\tscore:%v"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Age<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Hometown<span class="token punctuation">,</span> p<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    m0 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    m0<span class="token punctuation">[</span><span class="token string">"China"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">80</span>    person0 <span class="token operator">:=</span> Person<span class="token punctuation">{</span><span class="token string">"Mike"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"Manchester"</span><span class="token punctuation">,</span> m0<span class="token punctuation">}</span>     person1 <span class="token operator">:=</span> person0    person1<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>        person2 <span class="token operator">:=</span> <span class="token function">new</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Jason"</span>    <span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span><span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">24</span>    m2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    m2<span class="token punctuation">[</span><span class="token string">"Math"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">90</span>    <span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span><span class="token punctuation">.</span>score <span class="token operator">=</span> m2     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>person0<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>person0<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>person2<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>会得下面的输出</p><pre class=" language-go"><code class="language-go">name<span class="token punctuation">:</span>Mike age<span class="token punctuation">:</span><span class="token number">23</span> hometown<span class="token punctuation">:</span>Manchester score<span class="token punctuation">:</span><span class="token keyword">map</span><span class="token punctuation">[</span>China<span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Mike <span class="token number">23</span> Manchester <span class="token keyword">map</span><span class="token punctuation">[</span>China<span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">}</span>name<span class="token punctuation">:</span>Jason age<span class="token punctuation">:</span><span class="token number">24</span> hometown<span class="token punctuation">:</span> score<span class="token punctuation">:</span><span class="token keyword">map</span><span class="token punctuation">[</span>Math<span class="token punctuation">:</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Jason <span class="token number">24</span> <span class="token keyword">map</span><span class="token punctuation">[</span>Math<span class="token punctuation">:</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p><strong>方法和函数的区别:</strong></p><ol><li>调用方式不一样 函数： 函数名(实参列表) 方法： 变量名.方法名(实参列表)</li><li>对于普通函数，接收者为值类型时，不能将指针类型的数据直接传递，反之亦然</li><li>对于方法（如struct的方法），接收者为值类型时，可以直接用指针类型的变量调用方法，反之亦然</li></ol><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>当我们的结构体首字母小写时，我们可以采取对外暴露一个函数，返回结构体变量指针，来进行结构体变量的构造与访问</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> model <span class="token keyword">type</span> student <span class="token keyword">struct</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 结构体名首字母小写，则仅能包内访问</span>    Name <span class="token builtin">string</span>    Age <span class="token builtin">int</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">CreateStudent</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>student <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 暴露函数名首字母大写的函数，重当构造方法</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>student <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后在main包里进行如下调用</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"go_code/project01/model"</span> <span class="token comment" spellcheck="true">// 导入model包</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    student0 <span class="token operator">:=</span> model<span class="token punctuation">.</span><span class="token function">CreateStudent</span><span class="token punctuation">(</span><span class="token string">"Jason"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用公有方法，获得指针对象</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>student0<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>会得到以下输出</p><pre class=" language-go"><code class="language-go"><span class="token punctuation">{</span>Jason <span class="token number">23</span><span class="token punctuation">}</span></code></pre><p>访问包私有属性也是同样的方法，暴露公有的方法，返回私有的属性</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> model <span class="token keyword">type</span> student <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">CreateStudent</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>student <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>student <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>student <span class="token operator">*</span>student<span class="token punctuation">)</span> <span class="token function">GetAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> student<span class="token punctuation">.</span>age<span class="token punctuation">}</span></code></pre><p>外部进行如下调用</p><pre class=" language-go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>student0<span class="token punctuation">.</span><span class="token function">GetAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出为23</p><p>这就是go语言里的工厂模式</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承可以通过嵌套匿名结构体来实现，如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> model <span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name <span class="token builtin">string</span>    Age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">type</span> Graduate <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Student <span class="token comment" spellcheck="true">// 匿名结构体</span>    Major <span class="token builtin">string</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>student <span class="token operator">*</span>Student<span class="token punctuation">)</span> <span class="token function">GetAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> student<span class="token punctuation">.</span>Age<span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>graduate <span class="token operator">*</span>Graduate<span class="token punctuation">)</span> <span class="token function">GetMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> graduate<span class="token punctuation">.</span>Major<span class="token punctuation">}</span></code></pre><p>外部调用如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"go_code/project01/model"</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    graduate0 <span class="token operator">:=</span> <span class="token operator">&amp;</span>model<span class="token punctuation">.</span>Graduate<span class="token punctuation">{</span><span class="token punctuation">}</span>    graduate0<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"szc"</span>     graduate0<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">23</span>    graduate0<span class="token punctuation">.</span>Major <span class="token operator">=</span> <span class="token string">"software"</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>graduate0<span class="token punctuation">.</span><span class="token function">GetAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>graduate0<span class="token punctuation">.</span><span class="token function">GetMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>结构体可以使用嵌套匿名结构体的所有的字段和方法，即：首字母大小写的字段和方法都可以</p><p>graduate0.Name是graduate0.Student.Name的简写，但由于Student在Graduate里是匿名结构体，所以可以省略。</p><p>如果结构体和匿名结构体有相同的方法和字段时，编译器采用<strong>就近访问原则</strong>，如果要访问匿名结构体中的字段或方法，就要显式调用</p><p>如果结构体嵌入了两个或者两个以上的匿名结构体。两个匿名结构体有相同的字段或者方法，在访问时需要明确指定匿名结构体的名字</p><p>结构体内部嵌入有名结构体，访问有名结构体的属性需要带上名字访问，两者的关系为<strong>组合</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"go_code/project01/model"</span><span class="token punctuation">)</span> <span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">{</span>    n <span class="token builtin">int</span><span class="token punctuation">}</span> <span class="token keyword">type</span> B <span class="token keyword">struct</span> <span class="token punctuation">{</span>    A    n <span class="token builtin">int</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>A<span class="token punctuation">)</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"A..."</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>B<span class="token punctuation">)</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"B..."</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> b B    b<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">10</span>    b<span class="token punctuation">.</span>A<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">21</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>n<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>A<span class="token punctuation">.</span>n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 显式调用</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>     b<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span>A<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>当结构体嵌入了多个匿名结构体，并且这些匿名结构体拥有同名字段或方法时，访问时就必须显式调用了。</p><p>如果把匿名结构体改成有名结构体，那么这个有名结构体就相当于外层结构体的属性，访问其属性或方法就必须显式调用。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"go_code/project01/model"</span><span class="token punctuation">)</span> <span class="token keyword">type</span> C <span class="token keyword">struct</span> <span class="token punctuation">{</span>    n <span class="token builtin">int</span><span class="token punctuation">}</span> <span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">{</span>    n <span class="token builtin">int</span><span class="token punctuation">}</span> <span class="token keyword">type</span> B <span class="token keyword">struct</span> <span class="token punctuation">{</span>    A <span class="token comment" spellcheck="true">// 匿名结构体，父类</span>    n <span class="token builtin">int</span>    c C <span class="token comment" spellcheck="true">// 有名结构体，成员变量</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>A<span class="token punctuation">)</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"A..."</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>B<span class="token punctuation">)</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"B..."</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>C<span class="token punctuation">)</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"C..."</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> b B    b<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">10</span>    b<span class="token punctuation">.</span>A<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">21</span>    b<span class="token punctuation">.</span>c<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">31</span> <span class="token comment" spellcheck="true">// 显式访问成员变量的属性</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>n<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>A<span class="token punctuation">.</span>n<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>c<span class="token punctuation">.</span>n<span class="token punctuation">)</span>     b<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span>A<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 显式调用成员变量的方法</span><span class="token punctuation">}</span></code></pre><p>当结构体嵌入了多个匿名结构体，并且这些匿名结构体拥有同名字段或方法时，访问时就必须显式调用了。</p><p>如果把匿名结构体改成有名结构体，那么这个有名结构体就相当于外层结构体的属性，访问其属性或方法就必须显式调用。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"go_code/project01/model"</span><span class="token punctuation">)</span> <span class="token keyword">type</span> C <span class="token keyword">struct</span> <span class="token punctuation">{</span>    n <span class="token builtin">int</span><span class="token punctuation">}</span> <span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">{</span>    n <span class="token builtin">int</span><span class="token punctuation">}</span> <span class="token keyword">type</span> B <span class="token keyword">struct</span> <span class="token punctuation">{</span>    A <span class="token comment" spellcheck="true">// 匿名结构体，父类</span>    n <span class="token builtin">int</span>    c C <span class="token comment" spellcheck="true">// 有名结构体，成员变量</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>A<span class="token punctuation">)</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"A..."</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>B<span class="token punctuation">)</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"B..."</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>C<span class="token punctuation">)</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"C..."</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> b B    b<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">10</span>    b<span class="token punctuation">.</span>A<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">21</span>    b<span class="token punctuation">.</span>c<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">31</span> <span class="token comment" spellcheck="true">// 显式访问成员变量的属性</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>n<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>A<span class="token punctuation">.</span>n<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>c<span class="token punctuation">.</span>n<span class="token punctuation">)</span>     b<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span>A<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 显式调用成员变量的方法</span><span class="token punctuation">}</span></code></pre><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>interface类型可以定义一组方法，不需要实现。并且interface不能包含任何变量</p><p>基本语法：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> 接口名 <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token function">method1</span><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> 返回值列表<span class="token function">method2</span><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> 返回值列表<span class="token punctuation">}</span></code></pre><p>go中的接口定义如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> ICalculate <span class="token keyword">interface</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// type 接口名 interface</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>实现接口含义为：实现了这个接口的所有方法</p><p>然后定义两个结构体，来实现ICalculate</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> B <span class="token keyword">struct</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">type</span> D <span class="token keyword">struct</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>b B<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"B..add"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>b B<span class="token punctuation">)</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"B..sub"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>d D<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"D..add"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>d D<span class="token punctuation">)</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"D..sub"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>再定义一个结构体，为其绑定一个方法，传入接口对象</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> E <span class="token keyword">struct</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>E<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>ic ICalculate<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 接口是引用类型，所以这里传递的是变量的引用</span>    ic<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>E<span class="token punctuation">)</span> <span class="token function">sub</span><span class="token punctuation">(</span>ic ICalculate<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ic<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>最后，调用E中的方法</p><pre class=" language-go"><code class="language-go">b0 <span class="token operator">:=</span> B<span class="token punctuation">{</span><span class="token punctuation">}</span>d0 <span class="token operator">:=</span> D<span class="token punctuation">{</span><span class="token punctuation">}</span>e0 <span class="token operator">:=</span> E<span class="token punctuation">{</span><span class="token punctuation">}</span> e0<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b0<span class="token punctuation">)</span>e0<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d0<span class="token punctuation">)</span>e0<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>b0<span class="token punctuation">)</span>e0<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>d0<span class="token punctuation">)</span></code></pre><p>会得到如下输出</p><pre class=" language-go"><code class="language-go">B<span class="token punctuation">.</span><span class="token punctuation">.</span>addD<span class="token punctuation">.</span><span class="token punctuation">.</span>addB<span class="token punctuation">.</span><span class="token punctuation">.</span>subD<span class="token punctuation">.</span><span class="token punctuation">.</span>sub</code></pre><p>go中接口变量可以指向接口实现结构体的变量，如下所示</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> ic ICalculateic <span class="token operator">=</span> b0ic<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>不止结构体，自定义类型都可以实现接口</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> integer0 <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token punctuation">(</span>i integer0<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"integer..add"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>调用方法也是一样的</p><pre class=" language-go"><code class="language-go">i0 <span class="token operator">:=</span> <span class="token function">integer0</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>ic <span class="token operator">=</span> i0ic<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>使用接口数组，是实现多态的一种方式</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> cals <span class="token punctuation">[</span><span class="token punctuation">]</span>ICalculatecals <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>cals<span class="token punctuation">,</span> b0<span class="token punctuation">)</span>cals <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>cals<span class="token punctuation">,</span> d0<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cals<span class="token punctuation">)</span></code></pre><p><strong>接口应用实例：结构体切片排序，要实现sort包下Interface接口中Len()、Less()、Swap()三个接口</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Student 1、声明结构体</span><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name <span class="token builtin">string</span>    Sex <span class="token builtin">string</span>    Score <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// StuSlice 2、声明一个结构体切片</span><span class="token keyword">type</span> StuSlice <span class="token punctuation">[</span><span class="token punctuation">]</span>Student<span class="token comment" spellcheck="true">// 3、实现Len()、Less()、Swap()三个接口</span><span class="token keyword">func</span> <span class="token punctuation">(</span>stu StuSlice<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>stu StuSlice<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 按照学生成绩排序 从大到小排序，从小到大用 &lt;</span>    <span class="token keyword">return</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Score <span class="token operator">></span> stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Score<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>stu StuSlice<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j <span class="token builtin">int</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//temp := stu[i]</span>    <span class="token comment" spellcheck="true">//stu[i] = stu[j]</span>    <span class="token comment" spellcheck="true">//stu[j] =temp</span>    <span class="token comment" spellcheck="true">// 上面三行等价于</span>    stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span> stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">,</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> stuSlice StuSlice    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        stu <span class="token operator">:=</span> Student<span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"学生%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">,</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        stuSlice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>stuSlice<span class="token punctuation">,</span> stu<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"排序前数据：%v \n"</span><span class="token punctuation">,</span>stuSlice<span class="token punctuation">)</span>    sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>stuSlice<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"排序后数据：%v \n"</span><span class="token punctuation">,</span>stuSlice<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出如下</p><pre class=" language-go"><code class="language-go">排序前数据：<span class="token punctuation">[</span><span class="token punctuation">{</span>学生<span class="token number">0</span> 男 <span class="token number">81</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>学生<span class="token number">1</span> 男 <span class="token number">87</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>学生<span class="token number">2</span> 男 <span class="token number">47</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>学生<span class="token number">3</span> 男 <span class="token number">59</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>学生<span class="token number">4</span> 男 <span class="token number">81</span><span class="token punctuation">}</span><span class="token punctuation">]</span>排序后数据：<span class="token punctuation">[</span><span class="token punctuation">{</span>学生<span class="token number">1</span> 男 <span class="token number">87</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>学生<span class="token number">0</span> 男 <span class="token number">81</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>学生<span class="token number">4</span> 男 <span class="token number">81</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>学生<span class="token number">3</span> 男 <span class="token number">59</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>学生<span class="token number">2</span> 男 <span class="token number">47</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p><strong>接口注意事项：</strong></p><ol><li>接口本身不能实例化，但是可以指向实现了该接口的自定义类型的变量</li><li>只要是自定义类型都可以实现接口，而不仅仅是结构体类型</li><li>一个接口（例如A）可以继承多个别的接口（B、C）,这时如果要实现A接口，也必须实现B、C全部接口方法</li><li>interface类型默认是一个指针（引用类型），如果没有对interface初始化就使用会输出 nil</li><li>空接口里没有任何方法，所以任何类型都实现了空接口</li><li>接口体现了多态的特性</li></ol><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>由于接口是一般类型，不知道具体类型，如果要转成具体类型就需要使用类型断言</p><p>如果类型不匹配会报错</p><pre class=" language-go"><code class="language-go">  b1<span class="token punctuation">,</span> succeed <span class="token operator">:=</span> cals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 使用方法：待断言变量.(断言类型) </span>  <span class="token keyword">if</span> succeed <span class="token punctuation">{</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"convert success"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"convert fail"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>c1<span class="token punctuation">,</span> succeed <span class="token operator">=</span> cals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span>  <span class="token keyword">if</span> succeed <span class="token punctuation">{</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"convert success"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"convert fail"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>也可以使用switch语句</p><pre class=" language-go"><code class="language-go"><span class="token keyword">switch</span> cals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> B<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"type b"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> D<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"type d"</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"type unkown"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="打开与关闭"><a href="#打开与关闭" class="headerlink" title="打开与关闭"></a>打开与关闭</h3><p>文件在go中是一个结构体，它的定义和相关函数在os包中，所以要先导包</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"os"</span><span class="token punctuation">)</span></code></pre><p>打开文件和关闭文件的方法如下：</p><pre class=" language-go"><code class="language-go">file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"D:/output.txt"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"open file error = "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"file = "</span><span class="token punctuation">,</span> <span class="token operator">*</span>file<span class="token punctuation">)</span>err <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"close file error = "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>其中file的输出如下，可以看到file结构体里存放着一个指针</p><pre class=" language-go"><code class="language-go">file <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0xc000110780</span><span class="token punctuation">}</span></code></pre><p>如果指定文件不存在，那么打开文件时会返回如下的错误</p><pre class=" language-go"><code class="language-go">open file <span class="token builtin">error</span> <span class="token operator">=</span> open D<span class="token punctuation">:</span><span class="token operator">/</span>output00<span class="token punctuation">.</span>txt<span class="token punctuation">:</span> The system cannot find the file specified<span class="token punctuation">.</span></code></pre><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>文件读取方法如下所示</p><pre class=" language-go"><code class="language-go">reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 默认缓冲4096</span> <span class="token keyword">for</span> <span class="token punctuation">{</span>    str<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 一次读取一行</span>    <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// reader会把分隔符\n读进去，所以不用Println</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 读到文件尾会返回一个EOF异常</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"文件读取完毕"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"read error: "</span> <span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>要先导包</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"os"</span>    <span class="token string">"bufio"</span>    <span class="token string">"io"</span><span class="token punctuation">)</span></code></pre><p>如果文件不大，就可以使用io&#x2F;ioutil包下的ReadFile函数一次性读取</p><pre class=" language-go"><code class="language-go">bytes<span class="token punctuation">,</span> err1 <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"D:/output.txt"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"open file error = "</span><span class="token punctuation">,</span> err1<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>导包如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"io/ioutil"</span><span class="token punctuation">)</span></code></pre><h3 id="创建与写入"><a href="#创建与写入" class="headerlink" title="创建与写入"></a>创建与写入</h3><p>创建文件并写入内容的方法如下</p><pre class=" language-go"><code class="language-go">    file_path <span class="token operator">:=</span> <span class="token string">"D:/out_go.txt"</span><span class="token comment" spellcheck="true">// os.OpenFile(name string, flag int, perm FileMode)  参数1：文件路径，参数2：打开模式，参数3：权限控制（windows无效） </span>    file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_WRONLY <span class="token operator">|</span> os<span class="token punctuation">.</span>O_CREATE<span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 最后的777在windows下没有用</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Open file error: "</span> <span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>     <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     writer <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        writer<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">"New content"</span> <span class="token operator">+</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 写入一行数据</span>    <span class="token punctuation">}</span>     writer<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 把缓存数据刷入文件中</span></code></pre><p>打开模式：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    O_RDONLY <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_RDONLY <span class="token comment" spellcheck="true">// 只读模式打开文件</span>    O_WRONLY <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_WRONLY <span class="token comment" spellcheck="true">// 只写模式打开文件</span>    O_RDWR   <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_RDWR   <span class="token comment" spellcheck="true">// 读写模式打开文件</span>    O_APPEND <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_APPEND <span class="token comment" spellcheck="true">// 写操作时将数据附加到文件尾部</span>    O_CREATE <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_CREAT  <span class="token comment" spellcheck="true">// 如果不存在将创建一个新文件</span>    O_EXCL   <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_EXCL   <span class="token comment" spellcheck="true">// 和O_CREATE配合使用，文件必须不存在</span>    O_SYNC   <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_SYNC   <span class="token comment" spellcheck="true">// 打开文件用于同步I/O</span>    O_TRUNC  <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_TRUNC  <span class="token comment" spellcheck="true">// 如果可能，打开时清空文件</span><span class="token punctuation">)</span></code></pre><p>如果打开已存在的文件，覆写新内容，就要把模式换成os.O_TRUNC</p><pre class=" language-go"><code class="language-go">file_path <span class="token operator">:=</span> <span class="token string">"D:/out_go.txt"</span>file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_WRONLY <span class="token operator">|</span> os<span class="token punctuation">.</span>O_TRUNC<span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Open file error: "</span> <span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span> <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> writer <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    writer<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">"New content "</span> <span class="token operator">+</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ....\n"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> writer<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>判断文件或文件夹是否存在使用os.Stat()返回错误值进行判断:</p><ol><li>如果返回错误为nil说明文件或文件夹存在</li><li>如果返回的错误类型使用os.IsNotExist()判断为true，说明不存在</li><li>如果返回的错误为其它类，则不确定是否存在</li></ol><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>命令行参数保存在os.Args里，是一个字符串切片</p><p>先导入os包</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"os"</span><span class="token punctuation">)</span></code></pre><p>然后用for-range遍历os.Args即可</p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> index<span class="token punctuation">,</span> arg <span class="token operator">:=</span> <span class="token keyword">range</span> os<span class="token punctuation">.</span>Args <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"个参数是"</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>会得到如下输出</p><pre class=" language-go"><code class="language-go">PS D<span class="token punctuation">:</span>\develop\Microsoft VS Code\workspace\src\go_code\project01\main<span class="token operator">></span> <span class="token keyword">go</span> run <span class="token punctuation">.</span>\cmd_args<span class="token punctuation">.</span><span class="token keyword">go</span> <span class="token number">123</span> json第 <span class="token number">1</span> 个参数是 D<span class="token punctuation">:</span>\deveop\temp\<span class="token keyword">go</span><span class="token operator">-</span>build629970270\b001\exe\cmd_args<span class="token punctuation">.</span>exe第 <span class="token number">2</span> 个参数是 <span class="token number">123</span>第 <span class="token number">3</span> 个参数是 json</code></pre><p>也可以用<strong>flag包进行参数解析</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> s0 <span class="token builtin">string</span><span class="token keyword">var</span> s1 <span class="token builtin">string</span><span class="token keyword">var</span> i0 <span class="token builtin">int</span> flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s0<span class="token punctuation">,</span> <span class="token string">"u"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"字符串参数1"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 接收字符串参数，参数列表：参数接收地址，参数名，默认值， 参数说明</span>flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"字符串参数2"</span><span class="token punctuation">)</span>flag<span class="token punctuation">.</span><span class="token function">IntVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i0<span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"整型参数1"</span><span class="token punctuation">)</span> flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 开始解析必须调用</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"s0 = "</span><span class="token punctuation">,</span> s0<span class="token punctuation">,</span> <span class="token string">", s1 = "</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> <span class="token string">", i0 = "</span><span class="token punctuation">,</span> i0<span class="token punctuation">)</span></code></pre><p>导包如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"flag"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span></code></pre><p>测试输出如下</p><pre class=" language-go"><code class="language-go">PS D<span class="token punctuation">:</span>\develop\Microsoft VS Code\workspace\src\go_code\project01\main<span class="token operator">></span> <span class="token keyword">go</span> run <span class="token punctuation">.</span>\cmd_args<span class="token punctuation">.</span><span class="token keyword">go</span> <span class="token operator">-</span>u s <span class="token operator">-</span>p c <span class="token operator">-</span>i <span class="token number">98</span>s0 <span class="token operator">=</span> s <span class="token punctuation">,</span> s1 <span class="token operator">=</span> c <span class="token punctuation">,</span> i0 <span class="token operator">=</span> <span class="token number">98</span></code></pre><h2 id="序列化反序列化"><a href="#序列化反序列化" class="headerlink" title="序列化反序列化"></a>序列化反序列化</h2><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>把结构体序列化成json的方法</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    p0 <span class="token operator">:=</span> Person_ser<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"szc"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span><span class="token punctuation">}</span>     json_bytes<span class="token punctuation">,</span> error_ <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p0<span class="token punctuation">)</span>    <span class="token keyword">if</span> error_ <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Json error:"</span><span class="token punctuation">,</span> error_<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>json_bytes<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// {"Name":"szc","Age":23}</span><span class="token punctuation">}</span></code></pre><p>导包</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"encoding/json"</span><span class="token punctuation">)</span></code></pre><p>一定要记得结构体的属性如果要序列化成json，就必须首字母大写；包私有的属性不能被json包序列化成json</p><p>如果要把首字母大写的属性名序列化首字母小写的json键，就需要使用tag</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Person_ser <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name <span class="token builtin">string</span> <span class="token string">`json:"name"`</span> <span class="token comment" spellcheck="true">// 标签</span>    Age <span class="token builtin">int</span> <span class="token string">`json:"age"`</span><span class="token punctuation">}</span></code></pre><p>json.Marshal函数也可以对映射进行序列化</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> a <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 键是空接口，表示能接收任意类型</span>a <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"szc"</span>a<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">23</span> bytes<span class="token punctuation">,</span> error_ <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token keyword">if</span> error_ <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Json error:"</span><span class="token punctuation">,</span> error_<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {"age":23,"name":"szc"}</span></code></pre><p>对切片序列化也是可以的</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> slice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>slice <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    a <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>     a<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"szc"</span> <span class="token operator">+</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    a<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">23</span>     slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span> bytes<span class="token punctuation">,</span> error_ <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>slice<span class="token punctuation">)</span><span class="token keyword">if</span> error_ <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Json error:"</span><span class="token punctuation">,</span> error_<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [{"age":23,"name":"szc0"},{"age":23,"name":"szc1"},{"age":23,"name":"szc2"},{"age":23,"name":"szc3"},{"age":23,"name":"szc4"}]</span></code></pre><p>甚至对普通数据类型也能序列化，只是只有值，没有键</p><pre class=" language-go"><code class="language-go">i <span class="token operator">:=</span> <span class="token number">1</span> bytes<span class="token punctuation">,</span> error_ <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token keyword">if</span> error_ <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Json error:"</span><span class="token punctuation">,</span> error_<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1</span></code></pre><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>反序列化时，要调用Unmarshal函数，传入待解析字符串的bytes，以及接收结果的对象指针</p><pre class=" language-go"><code class="language-go">str <span class="token operator">:=</span> <span class="token string">"{\"Name\":\"szc\",\"Age\":23}"</span><span class="token keyword">var</span> p0 Person_ser err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p0<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Json error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p0<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {szc 23}</span></code></pre><p>同样可以解析成映射、切片</p><pre class=" language-go"><code class="language-go">str <span class="token operator">:=</span> <span class="token string">"{\"Name\":\"szc\",\"Age\":23}"</span><span class="token keyword">var</span> m0 <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m0<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Json error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span> slice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"[{\"age\":23,\"name\":\"szc0\"},{\"age\":23,\"name\":\"szc1\"},{\"age\":23,\"name\":\"szc2\"}]"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>slice<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Json error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m0<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// map[Age:23 Name:szc]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [map[age:23 name:szc0] map[age:23 name:szc1] map[age:23 name:szc2]]</span></code></pre><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>单元测试**(testing**)用来检测代码错误、逻辑错误和性能高低</p><p>首先有待测试文件<strong>first.go</strong>，内有函数addUpper()</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">func</span> <span class="token function">addUpper</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    ret <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        ret <span class="token operator">+=</span> i    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">}</span></code></pre><p>然后添加<strong>first_test.go</strong>文件，导入testing包，编写**TestAddUpper()**函数</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"testing"</span> <span class="token comment" spellcheck="true">// 引入testing框架</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token function">TestAddUpper</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res <span class="token operator">:=</span> <span class="token function">addUpper</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用目标函数</span>    <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token number">45</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"AddUpper(10)执行错误, 期望值%d, 实际值%d\n"</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 打出错误日志</span>    <span class="token punctuation">}</span>     t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"AddUpper(10)执行正确"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 打出正常日志</span><span class="token punctuation">}</span></code></pre><p>然后在命令行执行<strong>go test -v</strong>，就会看到结果</p><pre class=" language-go"><code class="language-go">PS D<span class="token punctuation">:</span>\develop\Microsoft VS Code\workspace\src\go_code\project01\main<span class="token operator">></span> <span class="token keyword">go</span> test <span class="token operator">-</span>vinit variable_advanced<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">==</span><span class="token operator">=</span> RUN TestAddUpperTestAddUpper<span class="token punctuation">:</span> first_test<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>执行正确— PASS<span class="token punctuation">:</span> <span class="token function">TestAddUpper</span> <span class="token punctuation">(</span><span class="token number">0.</span>00s<span class="token punctuation">)</span>PASSok go_code<span class="token operator">/</span>project01<span class="token operator">/</span>main <span class="token number">0.</span>323s</code></pre><p><strong>go test -v命令会执行这个目录内所有的测试用例</strong>，例如再在这个目录下添加测试文件map_test.go文件和TestSub()函数</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token string">"testing"</span> <span class="token keyword">func</span> <span class="token function">TestSub</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ret <span class="token operator">:=</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ret <span class="token operator">!=</span> <span class="token number">6</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"sub 执行错误, 预期值%d, 实际值%d\n"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span>    <span class="token punctuation">}</span>     t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"sub执行正确"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>待检测函数sub如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">sub</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n1 <span class="token operator">-</span> n2<span class="token punctuation">}</span></code></pre><p>运行测试用例</p><pre class=" language-go"><code class="language-go">PS D<span class="token punctuation">:</span>\develop\Microsoft VS Code\workspace\src\go_code\project01\main<span class="token operator">></span> <span class="token keyword">go</span> test <span class="token operator">-</span>vinit variable_advanced<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">==</span><span class="token operator">=</span> RUN TestAddUpperTestAddUpper<span class="token punctuation">:</span> first_test<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>执行正确— PASS<span class="token punctuation">:</span> <span class="token function">TestAddUpper</span> <span class="token punctuation">(</span><span class="token number">0.</span>00s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">=</span> RUN TestSubTestSub<span class="token punctuation">:</span> map_test<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span> sub执行正确— PASS<span class="token punctuation">:</span> <span class="token function">TestSub</span> <span class="token punctuation">(</span><span class="token number">0.</span>00s<span class="token punctuation">)</span>PASSok go_code<span class="token operator">/</span>project01<span class="token operator">/</span>main <span class="token number">0.</span>322s</code></pre><p>会发现测试累计用时比测试那两个函数用时的和要大，因为加载testing框架也要消耗时间</p><p>如果要测试单个文件，则要执行命令go test -v xx_test.go xx.go</p><pre class=" language-go"><code class="language-go">PS D<span class="token punctuation">:</span>\develop\Microsoft VS Code\workspace\src\go_code\project01\main<span class="token operator">></span> <span class="token keyword">go</span> test <span class="token operator">-</span>v <span class="token punctuation">.</span>\map_test<span class="token punctuation">.</span><span class="token keyword">go</span> <span class="token punctuation">.</span>\<span class="token keyword">map</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token operator">==</span><span class="token operator">=</span> RUN TestSubTestSub<span class="token punctuation">:</span> map_test<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span> sub执行正确— PASS<span class="token punctuation">:</span> <span class="token function">TestSub</span> <span class="token punctuation">(</span><span class="token number">0.</span>00s<span class="token punctuation">)</span>PASSok command<span class="token operator">-</span>line<span class="token operator">-</span>arguments <span class="token number">0.382</span></code></pre><p>如果测试单个函数的话，使用-test.run TestXxxx选项即可</p><pre class=" language-go"><code class="language-go">λ <span class="token keyword">go</span> test <span class="token operator">-</span>v <span class="token operator">-</span>test<span class="token punctuation">.</span>run TestAddUpperinit variable_advanced<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">==</span><span class="token operator">=</span> RUN TestAddUpperTestAddUpper<span class="token punctuation">:</span> first_test<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>执行正确— PASS<span class="token punctuation">:</span> <span class="token function">TestAddUpper</span> <span class="token punctuation">(</span><span class="token number">0.</span>00s<span class="token punctuation">)</span>PASSok go_code<span class="token operator">/</span>project01<span class="token operator">/</span>main <span class="token number">0.</span>410s</code></pre><p>如果要在测试前统一进行一些操作，可以覆写TestMain函数</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestMain</span><span class="token punctuation">(</span>m <span class="token operator">*</span>testing<span class="token punctuation">.</span>M<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"testing start"</span><span class="token punctuation">)</span>     m<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 执行测试</span><span class="token punctuation">}</span></code></pre><p>如果要在测试时执行另一个测试函数，可以执行t.Run()函数</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestAddSale</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sale <span class="token operator">:=</span> <span class="token operator">&amp;</span>Sale<span class="token punctuation">{</span>Widget_id<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> Qty<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span> Street<span class="token punctuation">:</span> <span class="token string">"Huanghe South Road"</span><span class="token punctuation">,</span> City<span class="token punctuation">:</span> <span class="token string">"Anyang Henan"</span><span class="token punctuation">,</span> State<span class="token punctuation">:</span> <span class="token string">"China"</span><span class="token punctuation">,</span> Zip<span class="token punctuation">:</span> <span class="token number">455000</span><span class="token punctuation">,</span> Sale_date<span class="token punctuation">:</span> <span class="token string">"2020-03-24"</span><span class="token punctuation">}</span>    sale<span class="token punctuation">.</span><span class="token function">AddSale</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"fun"</span><span class="token punctuation">,</span> fun_test<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">fun_test</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"fun_test"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>测试输出如下</p><pre class=" language-go"><code class="language-go">PS D<span class="token punctuation">:</span>\develop\Go\workspace\src\go_code\go_web\src\main<span class="token operator">></span> <span class="token keyword">go</span> testtesting startfun_testPASSok go_code<span class="token operator">/</span>go_web<span class="token operator">/</span>src<span class="token operator">/</span>main <span class="token number">0.</span>987s</code></pre><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><h3 id="协程goroutine"><a href="#协程goroutine" class="headerlink" title="协程goroutine"></a>协程goroutine</h3><p>协程从主线程开启是轻量级线程，是逻辑态的，特点:</p><ul><li>有独立的栈空间</li><li>共享程序堆空间</li><li>调度由用户控制</li></ul><p>go中开启协程执行函数的方法如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">test_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"test_r test......."</span><span class="token punctuation">,</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 休眠2秒</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">go</span> <span class="token function">test_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 开启一个协程</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main test......."</span><span class="token punctuation">,</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>导入strconv和time包</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"strconv"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span></code></pre><p>输出如下:</p><pre class=" language-go"><code class="language-go">PS D<span class="token punctuation">:</span>\develop\Microsoft VS Code\workspace\src\go_code\project01\main<span class="token operator">></span> <span class="token keyword">go</span> run <span class="token punctuation">.</span>\go_routine<span class="token punctuation">.</span><span class="token keyword">go</span>main test……<span class="token punctuation">.</span> <span class="token number">1</span>test_r test……<span class="token punctuation">.</span> <span class="token number">1</span>main test……<span class="token punctuation">.</span> <span class="token number">2</span>main test……<span class="token punctuation">.</span> <span class="token number">3</span>test_r test……<span class="token punctuation">.</span> <span class="token number">2</span>main test……<span class="token punctuation">.</span> <span class="token number">4</span>test_r test……<span class="token punctuation">.</span> <span class="token number">3</span>main test……<span class="token punctuation">.</span> <span class="token number">5</span>main test……<span class="token punctuation">.</span> <span class="token number">6</span>test_r test……<span class="token punctuation">.</span> <span class="token number">4</span>main test……<span class="token punctuation">.</span> <span class="token number">7</span>main test……<span class="token punctuation">.</span> <span class="token number">8</span>test_r test……<span class="token punctuation">.</span> <span class="token number">5</span>main test……<span class="token punctuation">.</span> <span class="token number">9</span>main test……<span class="token punctuation">.</span> <span class="token number">10</span>test_r test……<span class="token punctuation">.</span> <span class="token number">6</span></code></pre><p>主线程退出，不管协程的任务有没有执行完，协程也会立即退出</p><p>等待协程执行完再往下执行时使用WaitGroup</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"sync"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Show</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">defer</span> wp<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//执行完任务协程-1</span><span class="token punctuation">}</span><span class="token keyword">var</span> wp sync<span class="token punctuation">.</span>WaitGroup  <span class="token comment" spellcheck="true">//使用WaitGroup 等待各个协程执行完</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token function">Show</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 开启10个 go协程执行任务</span>        wp<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//协程+1</span>    <span class="token punctuation">}</span>    wp<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//阻塞 直到协程组内协程数为0时往下执行</span><span class="token punctuation">}</span></code></pre><p>获取并设置使用cpu数量</p><pre class=" language-go"><code class="language-go">num <span class="token operator">:=</span> runtime<span class="token punctuation">.</span><span class="token function">NumCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取cpu核数</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"CPU count:"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置最大并发数</span></code></pre><p>事先导入runtime包</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"runtime"</span><span class="token punctuation">)</span></code></pre><p>输出如下</p><pre class=" language-go"><code class="language-go">CPU count<span class="token punctuation">:</span> <span class="token number">12</span></code></pre><h3 id="MPG模式"><a href="#MPG模式" class="headerlink" title="MPG模式"></a>MPG模式</h3><p>MPG模式：</p><p>M：操作系统主线程（物理线程）</p><p>P：协程执行所需的上下文</p><p>G：协程</p><p>假设主线程M1的G1协程阻塞，如果协程队列里有别的协程，那么就会新启一个M2主线程，把协程队列里的其他协程挂在到M2上执行，这就是MPG模式</p><h3 id="全局互斥锁"><a href="#全局互斥锁" class="headerlink" title="全局互斥锁"></a>全局互斥锁</h3><p>当涉及多个协程对同一个引用类型的对象进行读写操作时，就需要全局锁来帮助同步。</p><p>先导包</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"math"</span>    <span class="token string">"fmt"</span>    <span class="token string">"strconv"</span>    <span class="token string">"time"</span>    <span class="token string">"runtime"</span>    <span class="token string">"sync"</span> <span class="token comment" spellcheck="true">//　同步包</span><span class="token punctuation">)</span></code></pre><p>然后声明锁变量</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>    result <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>　<span class="token comment" spellcheck="true">// 素数切片</span>    lock sync<span class="token punctuation">.</span>Mutex <span class="token comment" spellcheck="true">// 全局锁</span><span class="token punctuation">)</span></code></pre><p>编写is_prime函数，在append素数切片时，进行锁的请求和释放</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">exits</span><span class="token punctuation">(</span>slice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> slice <span class="token punctuation">{</span>        <span class="token keyword">if</span> value <span class="token operator">==</span> n <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">is_prime</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    is_prime <span class="token operator">:=</span> <span class="token boolean">true</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            is_prime <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span> is_prime <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">exits</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 请求锁</span>        result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 释放锁</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主线程开启2000个协程，进行素数判断，等待10秒后，读取素数切片内容。</p><p>由于读取的是全局变量，所以读的时候也要加锁和释放锁</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    num <span class="token operator">:=</span> runtime<span class="token punctuation">.</span><span class="token function">NumCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 开启将近2000个协程，判断素数</span>        <span class="token keyword">go</span> <span class="token function">is_prime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>     time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 主线程等待10秒</span>     lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 遍历的时候依旧要利用锁进行同步控制</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>最后的输出如下</p><pre class=" language-go"><code class="language-go"><span class="token number">2</span><span class="token number">3</span><span class="token number">5</span><span class="token number">7</span><span class="token number">11</span><span class="token number">13</span><span class="token number">17</span><span class="token number">19</span><span class="token number">23</span>…<span class="token number">1987</span><span class="token number">1993</span><span class="token number">1997</span><span class="token number">1999</span></code></pre><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>管道(channel)为引用类型，必须先初始化才能使用；本质是一个队列，有类型，而且线程安全，</p><p>管道的定义： var 变量名 chan 数据类型</p><p>以下为实例：一个写协程，一个读协程，主线程等待两者完成后退出</p><p>先构造两个协程，一个存储数据，一个表示是否读写完成</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>    write_chan <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 数据管道，整型管道，容量50(不可扩容)</span>    exit_chan <span class="token keyword">chan</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 状态管道，布尔型管道，容量1(不可扩容)</span><span class="token punctuation">)</span></code></pre><p>然后，构造读写函数。写函数往数据管道里写入50个数据，并关闭数据管道；读函数负责从数据管道里读取数据，如果读完，则往状态管道里置入true，表示读取完成</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">write_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        write_chan<span class="token operator">&lt;-</span> i <span class="token comment" spellcheck="true">// 往管道里写数据</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"write data: "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>     <span class="token function">close</span><span class="token punctuation">(</span>write_chan<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 关闭管道不影响读，只影响写</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">read_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>write_chan <span class="token comment" spellcheck="true">// 从管道里读数据，返回具体数据和成功与否。如果管道为空，就会阻塞</span>        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果管道为空，则ok为false</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"read data: "</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span>     exit_chan<span class="token operator">&lt;-</span> <span class="token boolean">true</span>    <span class="token function">close</span><span class="token punctuation">(</span>exit_chan<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//主线程负责开启两个协程，并监视状态管道</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">go</span> <span class="token function">write_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">read_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>exit_chan        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>最后输出如下</p><pre class=" language-go"><code class="language-go">write data<span class="token punctuation">:</span> <span class="token number">0</span>write data<span class="token punctuation">:</span> <span class="token number">1</span>write data<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span></code></pre><ul><li>往管道里写数据时，如果超出了管道容量，就会阻塞；但是读写频率不一致，则不会发生阻塞问题</li><li>不使用协程时，从空管道里读数据会发生死锁错误；</li><li>普通for-range遍历没有关闭的管道时，也发生死锁错误。</li><li>使用select可以解决从管道取数据的阻塞问题</li></ul><ul><li>管道默认是双向的（可读可写），也可以声明为只读或者只写管道</li><li>goroutine中使用recover，解决协程中出现panic，导致程序崩溃的问题</li></ul><p>channel版的寻找素数。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//原始数据管道、素数结果管道和协程状态管道</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    int_chan <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">80000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 待判断的数为2-80001</span>    prime_chan <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 素数管道</span>    over_chan <span class="token keyword">chan</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 状态管道</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//写入数据</span><span class="token keyword">func</span> <span class="token function">put_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">80002</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        int_chan<span class="token operator">&lt;-</span> i    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>int_chan<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//用来判断数据是否是素数</span><span class="token keyword">func</span> <span class="token function">check_prime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        is_prime <span class="token operator">:=</span> <span class="token boolean">true</span>        num<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span> int_chan        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>         <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                is_prime <span class="token operator">=</span> <span class="token boolean">false</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token keyword">if</span> is_prime <span class="token punctuation">{</span>            prime_chan<span class="token operator">&lt;-</span> num        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"One routine has exit for the lack of data.."</span><span class="token punctuation">)</span>     over_chan<span class="token operator">&lt;-</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//由于有多个管道处理素数判断，所以这里最后不关闭over_chan和prime_chan</span><span class="token comment" spellcheck="true">//匿名函数，判断是否所有判断素数的协程都已完成</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        over_num <span class="token operator">:=</span> <span class="token number">0</span>        <span class="token keyword">for</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> over_num <span class="token operator">==</span> <span class="token number">4</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>                status<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>over_chan            <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>                <span class="token keyword">if</span> status <span class="token punctuation">{</span>                over_num <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token function">close</span><span class="token punctuation">(</span>prime_chan<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 此时所有判断协程已经结束，关闭prime_chan，主线程遍历prime_chan处唤醒阻塞</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//最后在main函数里，启动一个输入协程、四个判断携程，最后自己负责从素数管道里拿素数，顺便计时</span>    <span class="token keyword">go</span> <span class="token function">put_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token function">check_prime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>     <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        over_num <span class="token operator">:=</span> <span class="token number">0</span>        <span class="token keyword">for</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> over_num <span class="token operator">==</span> <span class="token number">4</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>                status<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>over_chan            <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>                <span class="token keyword">if</span> status <span class="token punctuation">{</span>                over_num <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token function">close</span><span class="token punctuation">(</span>prime_chan<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        num<span class="token punctuation">,</span> ok<span class="token operator">:=</span> <span class="token operator">&lt;-</span>prime_chan        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token punctuation">}</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Time used:"</span><span class="token punctuation">,</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">int</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">close</span><span class="token punctuation">(</span>over_chan<span class="token punctuation">)</span></code></pre><p>最后输出如下</p><pre class=" language-go"><code class="language-go">PS D<span class="token punctuation">:</span>\develop\Microsoft VS Code\workspace\src\go_code\project01\main<span class="token operator">></span> <span class="token keyword">go</span> run <span class="token punctuation">.</span>\go_routine<span class="token punctuation">.</span><span class="token keyword">go</span>CPU count<span class="token punctuation">:</span> <span class="token number">12</span><span class="token number">2</span><span class="token number">3</span><span class="token number">5</span><span class="token number">7</span>…<span class="token punctuation">.</span><span class="token number">79979</span><span class="token number">79987</span><span class="token number">79997</span><span class="token number">79999</span>One routine has exit <span class="token keyword">for</span> the lack of data<span class="token punctuation">.</span><span class="token punctuation">.</span>One routine has exit <span class="token keyword">for</span> the lack of data<span class="token punctuation">.</span><span class="token punctuation">.</span>One routine has exit <span class="token keyword">for</span> the lack of data<span class="token punctuation">.</span><span class="token punctuation">.</span>One routine has exit <span class="token keyword">for</span> the lack of data<span class="token punctuation">.</span><span class="token punctuation">.</span>Time used<span class="token punctuation">:</span> <span class="token number">2</span></code></pre><p>把管道声明为只读或只写</p><pre class=" language-go"><code class="language-go">int_chan1 <span class="token keyword">chan</span> <span class="token operator">&lt;-</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 只写</span>int_chan2 <span class="token operator">&lt;-</span> <span class="token keyword">chan</span> <span class="token builtin">int</span>  <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 只读</span></code></pre><p>传统方法遍历管道时，如果管道不关闭，就会发生死锁。如果我们不确定何时关闭管道，就可以使用select，如下所示</p><pre class=" language-go"><code class="language-go">label<span class="token punctuation">:</span><span class="token keyword">for</span> <span class="token punctuation">{</span>    <span class="token keyword">select</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> v <span class="token operator">:=</span> <span class="token operator">&lt;-</span> int_chan_3<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">// 如果管道一直不关闭，也不会死锁，而会向下匹配</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"data from int chan: "</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>        <span class="token keyword">case</span> v <span class="token operator">:=</span> <span class="token operator">&lt;-</span> string_chan<span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"data from string chan: "</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">break</span> label    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>向int_chan_3和string_chan中赋值的代码如下</p><pre class=" language-go"><code class="language-go">int_chan_3 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    int_chan_3 <span class="token operator">&lt;-</span> i<span class="token punctuation">}</span> string_chan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    string_chan <span class="token operator">&lt;-</span> <span class="token string">"string "</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>最后输出如下</p><pre class=" language-go"><code class="language-go">PS D<span class="token punctuation">:</span>\develop\Microsoft VS Code\workspace\src\go_code\project01\main<span class="token operator">></span> <span class="token keyword">go</span> run <span class="token punctuation">.</span>\go_routine<span class="token punctuation">.</span><span class="token keyword">go</span>data from <span class="token builtin">string</span> <span class="token keyword">chan</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token number">0</span>data from <span class="token builtin">int</span> <span class="token keyword">chan</span><span class="token punctuation">:</span> <span class="token number">0</span>data from <span class="token builtin">int</span> <span class="token keyword">chan</span><span class="token punctuation">:</span> <span class="token number">1</span>data from <span class="token builtin">string</span> <span class="token keyword">chan</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token number">1</span>data from <span class="token builtin">string</span> <span class="token keyword">chan</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token number">2</span>data from <span class="token builtin">string</span> <span class="token keyword">chan</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token number">3</span>data from <span class="token builtin">string</span> <span class="token keyword">chan</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token number">4</span>data from <span class="token builtin">int</span> <span class="token keyword">chan</span><span class="token punctuation">:</span> <span class="token number">2</span>data from <span class="token builtin">int</span> <span class="token keyword">chan</span><span class="token punctuation">:</span> <span class="token number">3</span>data from <span class="token builtin">int</span> <span class="token keyword">chan</span><span class="token punctuation">:</span> <span class="token number">4</span>data from <span class="token builtin">int</span> <span class="token keyword">chan</span><span class="token punctuation">:</span> <span class="token number">5</span>data from <span class="token builtin">int</span> <span class="token keyword">chan</span><span class="token punctuation">:</span> <span class="token number">6</span>data from <span class="token builtin">int</span> <span class="token keyword">chan</span><span class="token punctuation">:</span> <span class="token number">7</span>data from <span class="token builtin">int</span> <span class="token keyword">chan</span><span class="token punctuation">:</span> <span class="token number">8</span>data from <span class="token builtin">int</span> <span class="token keyword">chan</span><span class="token punctuation">:</span> <span class="token number">9</span></code></pre><h4 id="定时器（Timer）"><a href="#定时器（Timer）" class="headerlink" title="定时器（Timer）"></a>定时器（Timer）</h4><p>Timer顾名思义，就是定时器的意思，可以实现一些定时操作，内部也是通过channel来实现的。Timer只执行一次</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    timer1 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>    t1 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"t1:%v\n"</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span>    t2 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>timer1<span class="token punctuation">.</span>C    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"t2:%v\n"</span><span class="token punctuation">,</span> t2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//如果只是想单纯的等待的话，可以使用 time.Sleep 来实现</span>    timer2 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token operator">&lt;-</span>timer2<span class="token punctuation">.</span>C    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2s后"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"再一次2s后"</span><span class="token punctuation">)</span>    <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//time.After函数的返回值是chan Time</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"再再一次2s后"</span><span class="token punctuation">)</span>    timer3 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">&lt;-</span>timer3<span class="token punctuation">.</span>C        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Timer 3 expired"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    stop <span class="token operator">:=</span> timer3<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//停止定时器</span>    <span class="token comment" spellcheck="true">////阻止timer事件发生，当该函数执行后，timer计时器停止，相应的事件不再执行</span>    <span class="token keyword">if</span> stop <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Timer 3 stopped"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"before"</span><span class="token punctuation">)</span>    timer4 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//原来设置5s</span>    timer4<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//重新设置时间,即修改NewTimer的时间</span>    <span class="token operator">&lt;-</span>timer4<span class="token punctuation">.</span>C    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"after"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="Ticker"><a href="#Ticker" class="headerlink" title="Ticker"></a>Ticker</h4><p>Timer只执行一次，Ticker可以周期的执行。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ticker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    counter <span class="token operator">:=</span> <span class="token number">1</span>    <span class="token keyword">for</span> <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token keyword">range</span> ticker<span class="token punctuation">.</span>C <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ticker 1"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//每秒执行一次</span>        counter<span class="token operator">++</span>        <span class="token keyword">if</span> counter <span class="token operator">>=</span> <span class="token number">5</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ticker<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//停止</span><span class="token punctuation">}</span></code></pre><h3 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h3><p>atomic 提供的原子操作能够确保任一时刻只有一个goroutine对变量进行操作，善用 atomic 能够避免程序中出现大量的锁操作。</p><p>atomic常见操作有：</p><ul><li>增减</li><li>载入 read</li><li>比较并交换 cas</li><li>交换</li><li>存储 write</li></ul><p>下面将分别介绍这些操作。</p><h4 id="增减操作"><a href="#增减操作" class="headerlink" title="增减操作"></a>增减操作</h4><p>atomic 包中提供了如下以Add为前缀的增减操作:</p><pre class=" language-go"><code class="language-go"><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">AddInt32</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">int32</span><span class="token punctuation">,</span> delta <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">int32</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">AddInt64</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">int64</span><span class="token punctuation">,</span> delta <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">AddUint32</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">uint32</span><span class="token punctuation">,</span> delta <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">uint32</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">AddUint64</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> delta <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">uint64</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">AddUintptr</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">uintptr</span><span class="token punctuation">,</span> delta <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">uintptr</span><span class="token punctuation">)</span></code></pre><h4 id="载入操作"><a href="#载入操作" class="headerlink" title="载入操作"></a>载入操作</h4><p>atomic 包中提供了如下以Load为前缀的增减操作：</p><pre class=" language-go"><code class="language-go"><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">LoadInt32</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>val <span class="token builtin">int32</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">LoadInt64</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>val <span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">LoadPointer</span><span class="token punctuation">(</span>addr <span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">(</span>val unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">LoadUint32</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>val <span class="token builtin">uint32</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">LoadUint64</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>val <span class="token builtin">uint64</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">LoadUintptr</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>val <span class="token builtin">uintptr</span><span class="token punctuation">)</span></code></pre><pre class=" language-go"><code class="language-go">载入操作能够保证原子的读变量的值，当读取的时候，任何其他CPU操作都无法对该变量进行读写，其实现机制受到底层硬件的支持</code></pre><h4 id="比较并交换"><a href="#比较并交换" class="headerlink" title="比较并交换"></a>比较并交换</h4><p>该操作简称 CAS(Compare And Swap)。 这类操作的前缀为 <code>CompareAndSwap</code> :</p><pre class=" language-go"><code class="language-go"><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">int32</span><span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>swapped <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">CompareAndSwapInt64</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">int64</span><span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>swapped <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">CompareAndSwapPointer</span><span class="token punctuation">(</span>addr <span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span> unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">(</span>swapped <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">CompareAndSwapUint32</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">uint32</span><span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>swapped <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">CompareAndSwapUint64</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>swapped <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">CompareAndSwapUintptr</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">uintptr</span><span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>swapped <span class="token builtin">bool</span><span class="token punctuation">)</span></code></pre><pre class=" language-go"><code class="language-go">该操作在进行交换前首先确保变量的值未被更改，即仍然保持参数 old 所记录的值，满足此前提下才进行交换操作。CAS的做法类似操作数据库时常见的乐观锁机制<span class="token punctuation">.</span></code></pre><h4 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h4><p>此类操作的前缀为 <code>Swap</code>：</p><pre class=" language-go"><code class="language-go"><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">SwapInt32</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">int32</span><span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">int32</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">SwapInt64</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">SwapPointer</span><span class="token punctuation">(</span>addr <span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> <span class="token builtin">new</span> unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">(</span>old unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">SwapUint32</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">uint32</span><span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">uint32</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">SwapUint64</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">uint64</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">SwapUintptr</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">uintptr</span><span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">uintptr</span><span class="token punctuation">)</span></code></pre><pre class=" language-go"><code class="language-go">相对于CAS，明显此类操作更为暴力直接，并不管变量的旧值是否被改变，直接赋予新值然后返回背替换的值。</code></pre><h4 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h4><p>此类操作的前缀为 <code>Store</code>：</p><pre class=" language-go"><code class="language-go"><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">StoreInt32</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">int32</span><span class="token punctuation">,</span> val <span class="token builtin">int32</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">StoreInt64</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">int64</span><span class="token punctuation">,</span> val <span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">StorePointer</span><span class="token punctuation">(</span>addr <span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> val unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">StoreUint32</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">uint32</span><span class="token punctuation">,</span> val <span class="token builtin">uint32</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">StoreUint64</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> val <span class="token builtin">uint64</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token keyword">func</span> <span class="token function">StoreUintptr</span><span class="token punctuation">(</span>addr <span class="token operator">*</span><span class="token builtin">uintptr</span><span class="token punctuation">,</span> val <span class="token builtin">uintptr</span><span class="token punctuation">)</span></code></pre><pre class=" language-go"><code class="language-go">此类操作确保了写变量的原子性，避免其他操作读到了修改变量过程中的脏数据。</code></pre><h3 id="异常捕获-1"><a href="#异常捕获-1" class="headerlink" title="异常捕获"></a>异常捕获</h3><p>当我们需要在某个协程函数里捕获异常时，使用以前的defer-recover即可</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">test_r_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"test_r_0 发生错误:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> map0 <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span>    map0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"szc"</span><span class="token punctuation">}</span></code></pre><p>同时写一个正常方法</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">test_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"test_r test......."</span><span class="token punctuation">,</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后在main函数里测试</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token keyword">go</span> <span class="token function">test_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">test_r_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出如下</p><pre class=" language-go"><code class="language-go">PS D<span class="token punctuation">:</span>\develop\Microsoft VS Code\workspace\src\go_code\project01\main<span class="token operator">></span> <span class="token keyword">go</span> run <span class="token punctuation">.</span>\go_routine<span class="token punctuation">.</span><span class="token keyword">go</span>test_r test……<span class="token punctuation">.</span> <span class="token number">1</span>test_r_0 发生错误<span class="token punctuation">:</span> assignment to entry in <span class="token boolean">nil</span> <span class="token keyword">map</span>test_r test……<span class="token punctuation">.</span> <span class="token number">2</span>test_r test……<span class="token punctuation">.</span> <span class="token number">3</span>test_r test……<span class="token punctuation">.</span> <span class="token number">4</span>test_r test……<span class="token punctuation">.</span> <span class="token number">5</span>test_r test……<span class="token punctuation">.</span> <span class="token number">6</span>test_r test……<span class="token punctuation">.</span> <span class="token number">7</span>test_r test……<span class="token punctuation">.</span> <span class="token number">8</span>test_r test……<span class="token punctuation">.</span> <span class="token number">9</span>test_r test……<span class="token punctuation">.</span> <span class="token number">10</span></code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><ul><li>反射可以动态获取变量的类型、结构体的属性和方法，以及设置属性、执行方法等信息</li><li>通过反射可以修改变量的值，可以调用关联的方法</li><li>使用反射，需要导入 import (“reflect”)</li></ul><h3 id="反射基本数据类型"><a href="#反射基本数据类型" class="headerlink" title="反射基本数据类型"></a>反射基本数据类型</h3><p>下面是对基本数据类型进行反射的方法</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"reflect"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">reflect_base</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    rTyp <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取反射类型</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rType = "</span><span class="token punctuation">,</span> rTyp<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// int</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rType`s name = "</span><span class="token punctuation">,</span> rTyp<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// int</span>        rVal <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取反射值</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"rValue = %v, rValue`s type = %T\n"</span><span class="token punctuation">,</span> rVal<span class="token punctuation">,</span> rVal<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 100, reflect.Value</span>     n1 <span class="token operator">:=</span> <span class="token number">2</span> <span class="token operator">+</span> rVal<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span>　<span class="token comment" spellcheck="true">// 获取反射值持有的整型值</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n1 = "</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span>     iV <span class="token operator">:=</span> rVal<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 反射值转换成空接口</span>    num <span class="token operator">:=</span> iV<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 类型断言</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"num = "</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>注意反射值必须转换成空接口，然后进行类型断言，才能获取真正的值，因为反射是运行时进行的。</p><h3 id="反射结构体"><a href="#反射结构体" class="headerlink" title="反射结构体"></a>反射结构体</h3><p>以下是对结构体进行反射的方法</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">reflect_struct</span><span class="token punctuation">(</span>n <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    rType <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    rValue <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>     iv <span class="token operator">:=</span> rValue<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rType = "</span><span class="token punctuation">,</span> rType<span class="token punctuation">,</span> <span class="token string">", iv = "</span><span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// rType =  main.Student_rf , iv =  {szc 23}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type of iv = %T\n"</span><span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Type of iv = main.Student_rf</span>     <span class="token comment" spellcheck="true">// 类型断言</span>    <span class="token keyword">switch</span> iv<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> Student_rf<span class="token punctuation">:</span>            student <span class="token operator">:=</span> iv<span class="token punctuation">.</span><span class="token punctuation">(</span>Student_rf<span class="token punctuation">)</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span>Age<span class="token punctuation">)</span>        <span class="token keyword">case</span> Student_rf_0<span class="token punctuation">:</span>            student <span class="token operator">:=</span> iv<span class="token punctuation">.</span><span class="token punctuation">(</span>Student_rf_0<span class="token punctuation">)</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span>Age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>获取反射种类:</p><pre class=" language-go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rKind = "</span><span class="token punctuation">,</span> rValue<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">", rKind = "</span><span class="token punctuation">,</span> rType<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// rKind =  struct , rKind =  struct</span></code></pre><p>故而反射类型就是变量的类型，反射种类则更宽泛一些。例如对于基本数据类型，反射类型&#x3D;反射种类；对于结构体，反射类型则是包名.结构体名，反射种类则是struct</p><p>变量 &lt;———-&gt; interface{} &lt;———-&gt; reflect.Value 三者可以互相转换</p><h3 id="反射改基本数据类型变量的值"><a href="#反射改基本数据类型变量的值" class="headerlink" title="反射改基本数据类型变量的值"></a>反射改基本数据类型变量的值</h3><p>如果要通过反射改变基本数据类型变量的值，那么要调用反射值的**Elem()**方法，再调用setXXX()方法，而且反射的对象应该是指针</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">reflect_base</span><span class="token punctuation">(</span>n <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    rVal <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这里不要传入空接口的指针</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"rValue = %v, rValue`s type = %T\n"</span><span class="token punctuation">,</span> rVal<span class="token punctuation">,</span> rVal<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 100, reflect.Value</span>     rVal<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>主函数调用时要传入指针</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    n <span class="token operator">:=</span> <span class="token number">100</span>    <span class="token function">reflect_base</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 传入指针</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span><span class="token punctuation">}</span></code></pre><h3 id="获取结构体所有属性和标签"><a href="#获取结构体所有属性和标签" class="headerlink" title="获取结构体所有属性和标签"></a>获取结构体所有属性和标签</h3><p>获取结构体所有属性和json标签的方法如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">reflect_struct</span><span class="token punctuation">(</span>n <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    rType <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    rValue <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>     <span class="token keyword">if</span> rValue<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Struct <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果不是Struct类别，直接结束</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>     num <span class="token operator">:=</span> rValue<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取字段数量</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Field %d value = %v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> rValue<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取字段值</span>        tagVal <span class="token operator">:=</span> rType<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取字段的json标签值</span>        <span class="token keyword">if</span> tagVal <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Field %d tag = %v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> tagVal<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>修改结构体，为其添加标签</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Student_rf <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name <span class="token builtin">string</span> <span class="token string">`json:"name"`</span>    Age <span class="token builtin">int</span> <span class="token string">`json:"age"`</span><span class="token punctuation">}</span></code></pre><p>main函数调用测试</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">reflect_struct</span><span class="token punctuation">(</span>Student_rf<span class="token punctuation">{</span>        Name<span class="token punctuation">:</span> <span class="token string">"szc"</span><span class="token punctuation">,</span>        Age<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出如下</p><pre class=" language-go"><code class="language-go">Field <span class="token number">0</span> value <span class="token operator">=</span> szcField <span class="token number">0</span> tag <span class="token operator">=</span> nameField <span class="token number">1</span> value <span class="token operator">=</span> <span class="token number">23</span>Field <span class="token number">1</span> tag <span class="token operator">=</span> age</code></pre><h3 id="调用结构体方法"><a href="#调用结构体方法" class="headerlink" title="调用结构体方法"></a>调用结构体方法</h3><p>调用结构体方法的过程如下</p><pre class=" language-go"><code class="language-go">num <span class="token operator">=</span> rValue<span class="token punctuation">.</span><span class="token function">NumMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取方法数量</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    method <span class="token operator">:=</span> rValue<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 打印方法地址</span><span class="token punctuation">}</span> <span class="token keyword">var</span> params <span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Valueparams <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token string">"szc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>params <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rValue<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用方法，传入参数</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span> res <span class="token operator">:=</span> rValue<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用方法，接收返回值</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>对应的方法如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s Student_rf<span class="token punctuation">)</span> <span class="token function">Show</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">" -- "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>s Student_rf<span class="token punctuation">)</span> <span class="token function">GetAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>Age<span class="token punctuation">}</span></code></pre><p><strong>反射中方法的排序按照方法名的ascii码排序</strong>，所以GetAge()在前，Show()在后</p><p>main函数中调用测试</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> Student_rf<span class="token punctuation">{</span>        Name<span class="token punctuation">:</span> <span class="token string">"szc"</span><span class="token punctuation">,</span>        Age<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>     <span class="token function">reflect_struct</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出如下</p><pre class=" language-go"><code class="language-go">szc – <span class="token number">24</span>…<span class="token number">23</span></code></pre><h3 id="修改结构体字段值"><a href="#修改结构体字段值" class="headerlink" title="修改结构体字段值"></a>修改结构体字段值</h3><p>修改结构体字段的值，就要和修改普通类型变量的值一样，获取地址的引用</p><pre class=" language-go"><code class="language-go">s <span class="token operator">:=</span> Student_rf<span class="token punctuation">{</span>    Name<span class="token punctuation">:</span> <span class="token string">"szc"</span><span class="token punctuation">,</span>    Age<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span><span class="token punctuation">}</span> rValue <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span>rValue<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">"szc"</span><span class="token punctuation">)</span>rValue<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><p>输出如下</p><pre class=" language-go"><code class="language-go"><span class="token punctuation">{</span>szc <span class="token number">24</span><span class="token punctuation">}</span></code></pre><h3 id="反射构造结构体变量"><a href="#反射构造结构体变量" class="headerlink" title="反射构造结构体变量"></a>反射构造结构体变量</h3><p>利用反射构造结构体变量并赋予属性值</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>    ptr <span class="token operator">*</span>Student_rf    rType reflect<span class="token punctuation">.</span>Type    rValue reflect<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>Student_rf<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 结构体指针</span>rType <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 结构体反射类型</span> rValue <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rType<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 由结构体反射类型，获取新结构体指针反射值</span> ptr <span class="token operator">=</span> rValue<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Student_rf<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 把指针反射值转成空接口，并进行类型断言</span> rValue <span class="token operator">=</span> rValue<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 由结构体指针反射值获取结构体反射值</span> rValue<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">"szc"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 根据属性名，对结构体反射值设置值</span>rValue<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">"Age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>ptr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出结果</span></code></pre><p>结果如下</p><pre class=" language-go"><code class="language-go"><span class="token punctuation">{</span>szc <span class="token number">22</span><span class="token punctuation">}</span></code></pre><p>综上，我们可以发现：如果要通过反射改变变量的值，就要先获取指针的反射，再通过Elem()方法获取变量的反射值，然后进行设置；如果只是查看变量的值，就用变量的反射即可</p><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><p>以tcp为例，服务端建立监听套接字，然后阻塞等待客户端连接。客户端连接后，开启协程处理客户端。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"net"</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token function">process_client</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> bytes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>        n<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 从客户端读取数据，阻塞。返回读取的字节数</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Read from client error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Connection with "</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" down"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>         fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 字节切片转string</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Server on.."</span><span class="token punctuation">)</span>    listen<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"0.0.0.0:9999"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 建立tcp的监听套接字，监听本地9999号端口</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Server listen error.."</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>     <span class="token keyword">defer</span> listen<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Waiting for client to connect.."</span><span class="token punctuation">)</span>        conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listen<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 等待客户端连接</span>         <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Client connect error.."</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>         <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Connection established with ip:"</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取远程地址</span>        <span class="token keyword">go</span> <span class="token function">process_client</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>客户端方面，直接连接服务端，然后通过连接套接字发送信息即可</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"net"</span>    <span class="token string">"bufio"</span>    <span class="token string">"os"</span>    <span class="token string">"strings"</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"localhost:9999"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 和本地9999端口建立tcp连接</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Connect to server failure.."</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Connected to server whose ip is "</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 建立控制台的reader</span>     <span class="token keyword">for</span> <span class="token punctuation">{</span>        line<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 读取控制台一行信息</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Read String error :"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>            line <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> line <span class="token operator">==</span> <span class="token string">"quit"</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>            <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 向服务端发送信息，返回发送的字节数和错误</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Write to server error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="go连接redis"><a href="#go连接redis" class="headerlink" title="go连接redis"></a>go连接redis</h2><p>首先安装所需第三方库</p><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get github<span class="token punctuation">.</span>com<span class="token operator">/</span>garyburd<span class="token operator">/</span>redigo<span class="token operator">/</span>redis</code></pre><p>1）、然后导包，并建立和服务器的连接</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"github.com/garyburd/redigo/redis"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> redis<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"localhost:6379"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"redis connection failed.."</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>     <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>2）、往redis里写入数据</p><pre class=" language-go"><code class="language-go"><span class="token boolean">_</span><span class="token punctuation">,</span> err  <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token string">"Set"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"songzeceng"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 参数列表：指令、键、值</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"redis set failed.."</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span></code></pre><p>3）、从redis读取数据并转为字符串</p><pre class=" language-go"><code class="language-go">r<span class="token punctuation">,</span> err <span class="token operator">:=</span> redis<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token string">"Get"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"result = "</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span></code></pre><p>4）、哈希的插入和读取</p><pre class=" language-go"><code class="language-go"><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token string">"HSet"</span><span class="token punctuation">,</span> <span class="token string">"userhash01"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"szc"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 操作、哈希名、键、值</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token string">"HSet"</span><span class="token punctuation">,</span> <span class="token string">"userhash01"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span> r<span class="token punctuation">,</span> err <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token string">"HGet"</span><span class="token punctuation">,</span> <span class="token string">"userhash01"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 从哈希userhash01中读取name</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hash name = "</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>age<span class="token punctuation">,</span> err <span class="token operator">:=</span> redis<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token string">"HGet"</span><span class="token punctuation">,</span> <span class="token string">"userhash01"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 读取int</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hash age = "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span></code></pre><p>5）、一次写入或读取多个值</p><pre class=" language-go"><code class="language-go"><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token string">"MSet"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"songzeceng"</span><span class="token punctuation">,</span> <span class="token string">"home"</span><span class="token punctuation">,</span> <span class="token string">"Henan,Anyang"</span><span class="token punctuation">)</span>multi_r<span class="token punctuation">,</span> err <span class="token operator">:=</span> redis<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token string">"MGet"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"home"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 注意String多了个s，而且multi_r是[]string</span></code></pre><p>6）、为了提高效率，可以使用<strong>redis连接池</strong>来获取连接</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> pool <span class="token operator">*</span>redis<span class="token punctuation">.</span>Pool <span class="token comment" spellcheck="true">// 全局连接池指针</span>pool <span class="token operator">=</span> <span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>Pool<span class="token punctuation">{</span>    MaxIdle<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 最大空闲连接数</span>    MaxActive<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 最大连接数,0表示不限</span>    IdleTimeout<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 最大空闲时间</span>    Dial<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 产生连接的函数</span>        <span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"localhost:6379"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>conn <span class="token operator">:=</span> pool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取连接</span> <span class="token keyword">defer</span> pool<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 连接池关闭</span></code></pre><p>go连接redis也可使用： <a href="https://gopkg.in/redis.v8">https://gopkg.in/redis.v8</a></p><ol><li>获取第三方库</li></ol><pre class=" language-shell"><code class="language-shell">go get gopkg.in/redis.v8</code></pre><ol start="2"><li>引入</li></ol><pre class=" language-shell"><code class="language-shell">import "gopkg.in/redis.v8"</code></pre><h2 id="go连接mysql"><a href="#go连接mysql" class="headerlink" title="go连接mysql"></a>go连接mysql</h2><p>首先下载github上的mysql驱动 <a href="https://github.com/go-sql-driver/mysql%EF%BC%8C%E6%94%BE%E5%85%A5GO_PATH%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E4%B8%8B">https://github.com/go-sql-driver/mysql，放入GO_PATH环境变量下</a></p><p>然后导包</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"database/sql"</span> <span class="token comment" spellcheck="true">// 操作数据库的方法、结构体等</span>    <span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span> <span class="token comment" spellcheck="true">// 导入驱动，不用使用</span>    <span class="token string">"os"</span><span class="token punctuation">)</span></code></pre><p>1）、连接数据库</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>    Db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB    err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Db<span class="token punctuation">,</span> err <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> <span class="token string">"root:root@tcp(localhost:3306)/test"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Open mysql error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>sql.Open()函数的参数列表：数据库类型(mysql)，数据库url(用户名:密码@tcp(url)&#x2F;数据库名)</p><p>2）、插入数据</p><p>先定义结构体(最好）</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Sale <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Widget_id <span class="token builtin">int</span>    Qty <span class="token builtin">int</span>    Street <span class="token builtin">string</span>    City <span class="token builtin">string</span>    State <span class="token builtin">string</span>    Zip <span class="token builtin">int</span>    Sale_date <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><p>然后使用占位符+预编译的方式进行插入数据</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>sale <span class="token operator">*</span>Sale<span class="token punctuation">)</span> <span class="token function">AddSale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err_ <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sql_str <span class="token operator">:=</span> <span class="token string">"insert into sales(widget_id, qty, street, city, state, zip, sale_date) values(?, ?, ?, ?, ?, ?, ?)"</span>     inStmt<span class="token punctuation">,</span> err_ <span class="token operator">:=</span> Db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span>sql_str<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 预编译</span>     <span class="token boolean">_</span><span class="token punctuation">,</span> err_ <span class="token operator">=</span> inStmt<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sale<span class="token punctuation">.</span>Widget_id<span class="token punctuation">,</span> sale<span class="token punctuation">.</span>Qty<span class="token punctuation">,</span> sale<span class="token punctuation">.</span>Street<span class="token punctuation">,</span> sale<span class="token punctuation">.</span>City<span class="token punctuation">,</span> sale<span class="token punctuation">.</span>State<span class="token punctuation">,</span> sale<span class="token punctuation">.</span>Zip<span class="token punctuation">,</span> sale<span class="token punctuation">.</span>Sale_date<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 执行预编译语句，传入参数</span>     <span class="token keyword">return</span> err_<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sale <span class="token operator">:=</span> <span class="token operator">&amp;</span>Sale<span class="token punctuation">{</span>Widget_id<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> Qty<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span> Street<span class="token punctuation">:</span> <span class="token string">"Huanghe South Road"</span><span class="token punctuation">,</span> City<span class="token punctuation">:</span> <span class="token string">"Anyang Henan"</span><span class="token punctuation">,</span> State<span class="token punctuation">:</span> <span class="token string">"China"</span><span class="token punctuation">,</span> Zip<span class="token punctuation">:</span> <span class="token number">455000</span><span class="token punctuation">,</span> Sale_date<span class="token punctuation">:</span> <span class="token string">"2020-03-24"</span><span class="token punctuation">}</span>     err_ <span class="token operator">:=</span> sale<span class="token punctuation">.</span><span class="token function">AddSale</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err_ <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sql execute err:"</span><span class="token punctuation">,</span> err_<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>或者使用单元测试，新建first_test.go文件，写入以下内容</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"testing"</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token function">TestAddSale</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sale <span class="token operator">:=</span> <span class="token operator">&amp;</span>Sale<span class="token punctuation">{</span>Widget_id<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> Qty<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span> Street<span class="token punctuation">:</span> <span class="token string">"Huanghe South Road"</span><span class="token punctuation">,</span> City<span class="token punctuation">:</span> <span class="token string">"Anyang Henan"</span><span class="token punctuation">,</span> State<span class="token punctuation">:</span> <span class="token string">"China"</span><span class="token punctuation">,</span> Zip<span class="token punctuation">:</span> <span class="token number">455000</span><span class="token punctuation">,</span> Sale_date<span class="token punctuation">:</span> <span class="token string">"2020-03-24"</span><span class="token punctuation">}</span>     sale<span class="token punctuation">.</span><span class="token function">AddSale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>然后在此目录下运行命令</p><pre class=" language-go"><code class="language-go">PS D<span class="token punctuation">:</span>\develop\Go\workspace\src\go_code\go_web\src\main<span class="token operator">></span> <span class="token keyword">go</span> testPASSok go_code<span class="token operator">/</span>go_web<span class="token operator">/</span>src<span class="token operator">/</span>main <span class="token number">0.</span>799s</code></pre><p>3）、查询单条数据</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>sale <span class="token operator">*</span>Sale<span class="token punctuation">)</span> <span class="token function">GetRecordById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token operator">*</span>Sale<span class="token punctuation">,</span> err_ <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sql_str <span class="token operator">:=</span> <span class="token string">"select * from sales where widget_id = ?"</span>    in_stmt<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> Db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span>sql_str<span class="token punctuation">)</span>     row <span class="token operator">:=</span> in_stmt<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span>sale<span class="token punctuation">.</span>Widget_id<span class="token punctuation">)</span>     <span class="token keyword">if</span> row <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"No such record with id = "</span><span class="token punctuation">,</span> sale<span class="token punctuation">.</span>Widget_id<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"No such record with id = "</span> <span class="token operator">+</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> sale<span class="token punctuation">.</span>Widget_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>     ret <span class="token operator">=</span> <span class="token operator">&amp;</span>Sale<span class="token punctuation">{</span><span class="token punctuation">}</span>     err_ <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ret<span class="token punctuation">.</span>Widget_id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">.</span>Qty<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">.</span>Street<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">.</span>City<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">.</span>State<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">.</span>Zip<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">.</span>Sale_date<span class="token punctuation">)</span>     <span class="token keyword">return</span> ret<span class="token punctuation">,</span> err_<span class="token punctuation">}</span></code></pre><p>QueryRow()最多只接收一行查询结果，main函数中测试如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sale <span class="token operator">:=</span> <span class="token operator">&amp;</span>Sale<span class="token punctuation">{</span>Widget_id<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> Qty<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span> Street<span class="token punctuation">:</span> <span class="token string">"Huanghe South Road"</span><span class="token punctuation">,</span> City<span class="token punctuation">:</span> <span class="token string">"Anyang Henan"</span><span class="token punctuation">,</span> State<span class="token punctuation">:</span> <span class="token string">"China"</span><span class="token punctuation">,</span> Zip<span class="token punctuation">:</span> <span class="token number">455000</span><span class="token punctuation">,</span> Sale_date<span class="token punctuation">:</span> <span class="token string">"2020-03-24"</span><span class="token punctuation">}</span>     ret<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> sale<span class="token punctuation">.</span><span class="token function">GetRecordById</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// {9 80 Huanghe South Road Anyang Henan China 455000 2020-03-24}</span>    <span class="token keyword">if</span> ret <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>ret<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4）、查询所有数据</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>sale <span class="token operator">*</span>Sale<span class="token punctuation">)</span> <span class="token function">GetAllRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Sale<span class="token punctuation">,</span> err_ <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sql_str <span class="token operator">:=</span> <span class="token string">"select * from sales"</span>    in_stmt<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> Db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span>sql_str<span class="token punctuation">)</span>     rows<span class="token punctuation">,</span> err_ <span class="token operator">:=</span> in_stmt<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> err_ <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Error get all: "</span><span class="token punctuation">,</span> err_<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err_    <span class="token punctuation">}</span>     ret <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Sale<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        record <span class="token operator">:=</span> <span class="token operator">&amp;</span>Sale<span class="token punctuation">{</span><span class="token punctuation">}</span>         err_ <span class="token operator">=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>record<span class="token punctuation">.</span>Widget_id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>record<span class="token punctuation">.</span>Qty<span class="token punctuation">,</span> <span class="token operator">&amp;</span>record<span class="token punctuation">.</span>Street<span class="token punctuation">,</span> <span class="token operator">&amp;</span>record<span class="token punctuation">.</span>City<span class="token punctuation">,</span> <span class="token operator">&amp;</span>record<span class="token punctuation">.</span>State<span class="token punctuation">,</span> <span class="token operator">&amp;</span>record<span class="token punctuation">.</span>Zip<span class="token punctuation">,</span> <span class="token operator">&amp;</span>record<span class="token punctuation">.</span>Sale_date<span class="token punctuation">)</span>         <span class="token keyword">if</span> err_ <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Error get record: "</span><span class="token punctuation">,</span> err_<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>         ret <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> record<span class="token punctuation">)</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> ret<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>Query()接收多行查询结果，main函数中测试如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sale <span class="token operator">:=</span> <span class="token operator">&amp;</span>Sale<span class="token punctuation">{</span><span class="token punctuation">}</span>     ret2<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> sale<span class="token punctuation">.</span><span class="token function">GetAllRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ret2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> record <span class="token operator">:=</span> <span class="token keyword">range</span> ret2 <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>record<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/*    {1 20 Huasha Road Anyang Henan China 455000 2019-11-03}...{8 28 Dongfeng Road Anyang Henan China 455000 2019-11-10}{9 80 Huanghe South Road Anyang Henan China 455000 2020-03-24}*/</span><span class="token punctuation">}</span></code></pre><h2 id="常用包"><a href="#常用包" class="headerlink" title="常用包"></a>常用包</h2><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> goTime <span class="token operator">=</span> <span class="token string">"2006-01-02 15:04:05"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//字符串转 time</span>    str <span class="token operator">:=</span> <span class="token string">"2022-02-22 15:00:00"</span>    res1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseInLocation</span><span class="token punctuation">(</span>goTime<span class="token punctuation">,</span> str<span class="token punctuation">,</span> time<span class="token punctuation">.</span>Local<span class="token punctuation">)</span>    res2<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>goTime<span class="token punctuation">,</span> str<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"res1 = %v\n"</span><span class="token punctuation">,</span>res1<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"res2 = %v\n"</span><span class="token punctuation">,</span>res2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//time转字符串</span>    format1 <span class="token operator">:=</span> res1<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>goTime<span class="token punctuation">)</span>    format2 <span class="token operator">:=</span> res2<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>goTime<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"format1 = %v\n"</span><span class="token punctuation">,</span>format1<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"format2 = %v\n"</span><span class="token punctuation">,</span>format2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">StrToTime</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>time<span class="token punctuation">.</span>Time <span class="token punctuation">{</span>    t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseInLocation</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> time<span class="token punctuation">.</span>Local<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>t<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TimeToStr</span><span class="token punctuation">(</span>t <span class="token operator">*</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="strconv"><a href="#strconv" class="headerlink" title="strconv"></a>strconv</h3><pre class=" language-go"><code class="language-go">   <span class="token comment" spellcheck="true">//将常规的数据类型转换为string</span>   str <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d%c"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">`a`</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// int转字符串</span>intSize <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T  \n"</span><span class="token punctuation">,</span>intSize<span class="token punctuation">)</span>atoi<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>intSize<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 字符串转int</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T  \n"</span><span class="token punctuation">,</span>atoi<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 将int64转字符串</span>formatInt <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T  \n"</span><span class="token punctuation">,</span>formatInt<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 将字符串转换成 10进制64位int 即int64</span>parseInt<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T  \n"</span><span class="token punctuation">,</span>parseInt<span class="token punctuation">)</span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后，列一下go语言的特点：</p><ol><li>继承了C的指针</li><li>每个文件都属于一个包</li><li>垃圾回收</li><li>天然并发，goroutine，基于CPS并发模型实现</li><li>管道通信，解决goroutine之间的通信</li><li>函数返回多个值(Python)</li><li>切片、延迟执行defer等</li></ol>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯2022</title>
      <link href="/2022/05/24/%E8%93%9D%E6%A1%A5%E6%9D%AF2022/"/>
      <url>/2022/05/24/%E8%93%9D%E6%A1%A5%E6%9D%AF2022/</url>
      
        <content type="html"><![CDATA[<h2 id="第十三届蓝桥杯大赛软件类省赛（2022）"><a href="#第十三届蓝桥杯大赛软件类省赛（2022）" class="headerlink" title="第十三届蓝桥杯大赛软件类省赛（2022）"></a>第十三届蓝桥杯大赛软件类省赛（2022）</h2><h3 id="试题A：星期计算【填空题】"><a href="#试题A：星期计算【填空题】" class="headerlink" title="试题A：星期计算【填空题】"></a>试题A：星期计算【填空题】</h3><h4 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h4><pre class=" language-bash"><code class="language-bash">已知今天是星期六，请问 20^22 天后是星期几？注意用数字 1 到 7 表示星期一到星期日</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigInteger<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**    如果直接求20^22再取余，20^22的结果基本类型是装不下的，所以可以在计算 20^22 的时候利用取余的运算规则先进行取余防止溢出。这个是常规的取余算法，当然还有快速幂取余法，不过对于这个题目，常规的算法就可以了*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">22</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 取余7防止溢出</span>            ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">+</span> ans<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">7</span> <span class="token operator">:</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">输出结果:7</code></pre><h3 id="试题-B-山【填空题】"><a href="#试题-B-山【填空题】" class="headerlink" title="试题 B: 山【填空题】"></a>试题 B: 山【填空题】</h3><h4 id="【问题描述】-1"><a href="#【问题描述】-1" class="headerlink" title="【问题描述】"></a>【问题描述】</h4><pre class=" language-bash"><code class="language-bash">这天小明正在学数数。他突然发现有些正整数的形状像一座“山”，比如 123565321 、 145541 ，它们左右对称（回文）且数位上的数字先单调不减，后单调不增。小明数了很久也没有数完，他想让你告诉他在区间<span class="token punctuation">[</span>2022,2022222022<span class="token punctuation">]</span>中有多少个数的形状像一座“山”。</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**    转化成字符串求解，不过只翻转一半，大概也要花个一分多钟就可以出结果了*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2022</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2022222022</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPalindromeAndMonotonous</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPalindromeAndMonotonous</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> chs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>chs<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">!=</span> chs<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">||</span> chs<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">></span> chs<span class="token punctuation">[</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            start<span class="token operator">++</span><span class="token punctuation">;</span>            end<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="试题C：字符统计【编程题】"><a href="#试题C：字符统计【编程题】" class="headerlink" title="试题C：字符统计【编程题】"></a>试题C：字符统计【编程题】</h3><h4 id="【问题描述】-2"><a href="#【问题描述】-2" class="headerlink" title="【问题描述】"></a>【问题描述】</h4><pre class=" language-bash"><code class="language-bash">给定一个只包含大写字母的字符串S，请你输出其中出现次数最多的字母。如果有多个字母均出现了最多次，按字母表顺序依次输出所有这些字母。</code></pre><h4 id="【输入格式】"><a href="#【输入格式】" class="headerlink" title="【输入格式】"></a>【输入格式】</h4><pre class=" language-bash"><code class="language-bash">一个只包含大写字母的字符串S.</code></pre><h4 id="【输出格式】"><a href="#【输出格式】" class="headerlink" title="【输出格式】"></a><strong>【输出格式】</strong></h4><pre class=" language-bash"><code class="language-bash">若干个大写字母，代表答案。</code></pre><h4 id="【样例输入】"><a href="#【样例输入】" class="headerlink" title="【样例输入】"></a>【样例输入】</h4><pre class=" language-bash"><code class="language-bash">BABBACAC</code></pre><h4 id="【样例输出】"><a href="#【样例输出】" class="headerlink" title="【样例输出】"></a>【样例输出】</h4><pre class=" language-bash"><code class="language-bash">AB</code></pre><h4 id="【代码】"><a href="#【代码】" class="headerlink" title="【代码】"></a>【代码】</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            counts<span class="token punctuation">[</span>chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> counts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> <span class="token string">"A"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> counts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastDFS教程</title>
      <link href="/2022/05/09/FastDFS%E6%95%99%E7%A8%8B/"/>
      <url>/2022/05/09/FastDFS%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="FastDFS教程"><a href="#FastDFS教程" class="headerlink" title="FastDFS教程"></a>FastDFS教程</h2><h3 id="1-1、分布式存储"><a href="#1-1、分布式存储" class="headerlink" title="1.1、分布式存储"></a>1.1、分布式存储</h3><p><img src="/2022/05/09/FastDFS%E6%95%99%E7%A8%8B/image-20220509164249534.png"></p><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li><strong><font color="red">解决了传统方式的单点故障问题，如果某一个节点出现故障还有其他的节点可以用来读取合写入文件，可以提供数据的备份避免因磁盘损坏导致的文件丢失，还可以提供库容的机制，无限增加文件存放的空间上限</font></strong></li></ul><h3 id="1-2、FastDFS简介"><a href="#1-2、FastDFS简介" class="headerlink" title="1.2、FastDFS简介"></a>1.2、FastDFS简介</h3><h5 id="FastDFS是一个开源的轻量级分布式文件系统，为互联网应用量身定做，简单，灵活，高效，采用c语言开发，有阿里巴巴开发并开源。"><a href="#FastDFS是一个开源的轻量级分布式文件系统，为互联网应用量身定做，简单，灵活，高效，采用c语言开发，有阿里巴巴开发并开源。" class="headerlink" title="FastDFS是一个开源的轻量级分布式文件系统，为互联网应用量身定做，简单，灵活，高效，采用c语言开发，有阿里巴巴开发并开源。"></a>FastDFS是一个开源的轻量级分布式文件系统，为互联网应用量身定做，简单，灵活，高效，采用c语言开发，有阿里巴巴开发并开源。</h5><h5 id="FastDFS对文件进行管理，功能包括：文件存储，文件同步，文件访问（文件上传，文件下载，文件删除）等，解决了大容量文件存储的问题，特别适合以文件为载体的在线服务，如相册网站，图片网站，视频网站等等。"><a href="#FastDFS对文件进行管理，功能包括：文件存储，文件同步，文件访问（文件上传，文件下载，文件删除）等，解决了大容量文件存储的问题，特别适合以文件为载体的在线服务，如相册网站，图片网站，视频网站等等。" class="headerlink" title="FastDFS对文件进行管理，功能包括：文件存储，文件同步，文件访问（文件上传，文件下载，文件删除）等，解决了大容量文件存储的问题，特别适合以文件为载体的在线服务，如相册网站，图片网站，视频网站等等。"></a>FastDFS对文件进行管理，功能包括：文件存储，文件同步，文件访问（文件上传，文件下载，文件删除）等，解决了大容量文件存储的问题，特别适合以文件为载体的在线服务，如相册网站，图片网站，视频网站等等。</h5><h5 id="FastDFS充分考虑了冗余备份、线性扩容等机制，并注重高可用，高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传，下载等服务。"><a href="#FastDFS充分考虑了冗余备份、线性扩容等机制，并注重高可用，高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传，下载等服务。" class="headerlink" title="FastDFS充分考虑了冗余备份、线性扩容等机制，并注重高可用，高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传，下载等服务。"></a>FastDFS充分考虑了冗余备份、线性扩容等机制，并注重高可用，高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传，下载等服务。</h5><h3 id="1-3、FastDFS整体架构"><a href="#1-3、FastDFS整体架构" class="headerlink" title="1.3、FastDFS整体架构"></a>1.3、FastDFS整体架构</h3><h5 id="FastDFS文件系统由两大部分构成，一个是客户端，一个是服务端"><a href="#FastDFS文件系统由两大部分构成，一个是客户端，一个是服务端" class="headerlink" title="FastDFS文件系统由两大部分构成，一个是客户端，一个是服务端"></a>FastDFS文件系统由两大部分构成，一个是客户端，一个是服务端</h5><h5 id="客户端通常指我们的程序，比如我们的程序去连接FastDFS，那我们的java程序就是一个客户端，FastDFS提供专有API访问，目前提供了C，java和PHP几种编程语言的API，用来访问FastDFS文件系统。"><a href="#客户端通常指我们的程序，比如我们的程序去连接FastDFS，那我们的java程序就是一个客户端，FastDFS提供专有API访问，目前提供了C，java和PHP几种编程语言的API，用来访问FastDFS文件系统。" class="headerlink" title="客户端通常指我们的程序，比如我们的程序去连接FastDFS，那我们的java程序就是一个客户端，FastDFS提供专有API访问，目前提供了C，java和PHP几种编程语言的API，用来访问FastDFS文件系统。"></a>客户端通常指我们的程序，比如我们的程序去连接FastDFS，那我们的java程序就是一个客户端，FastDFS提供专有API访问，目前提供了C，java和PHP几种编程语言的API，用来访问FastDFS文件系统。</h5><h5 id="服务端由两个部分组成：一个是跟踪器（tracker），一个是存储器节点（storage）"><a href="#服务端由两个部分组成：一个是跟踪器（tracker），一个是存储器节点（storage）" class="headerlink" title="服务端由两个部分组成：一个是跟踪器（tracker），一个是存储器节点（storage）"></a>服务端由两个部分组成：一个是跟踪器（tracker），一个是存储器节点（storage）</h5><h5 id="跟踪器（tracker）主要做调度工作，在内存中记录集群中存储节点-storage-的状态信息，是前端-Client-和后端存储节点-storage-的枢纽。因为相关信息全部在内存中，Tracker-server-的性能非常高，一个较大的集群（比如上百个group）中有3台就足够了。"><a href="#跟踪器（tracker）主要做调度工作，在内存中记录集群中存储节点-storage-的状态信息，是前端-Client-和后端存储节点-storage-的枢纽。因为相关信息全部在内存中，Tracker-server-的性能非常高，一个较大的集群（比如上百个group）中有3台就足够了。" class="headerlink" title="跟踪器（tracker）主要做调度工作，在内存中记录集群中存储节点 storage 的状态信息，是前端 Client 和后端存储节点 storage 的枢纽。因为相关信息全部在内存中，Tracker server 的性能非常高，一个较大的集群（比如上百个group）中有3台就足够了。"></a>跟踪器（tracker）主要做调度工作，在内存中记录集群中存储节点 storage 的状态信息，是前端 Client 和后端存储节点 storage 的枢纽。因为相关信息全部在内存中，Tracker server 的性能非常高，一个较大的集群（比如上百个group）中有3台就足够了。</h5><h5 id="存储节点（storage）用于存储文件，包括文件和文件属性（meta-data）都保存在存储服务器磁盘上，完成文件管理的所有功能：文件存储、文件同步和提供文件访问等。"><a href="#存储节点（storage）用于存储文件，包括文件和文件属性（meta-data）都保存在存储服务器磁盘上，完成文件管理的所有功能：文件存储、文件同步和提供文件访问等。" class="headerlink" title="存储节点（storage）用于存储文件，包括文件和文件属性（meta data）都保存在存储服务器磁盘上，完成文件管理的所有功能：文件存储、文件同步和提供文件访问等。"></a>存储节点（storage）用于存储文件，包括文件和文件属性（meta data）都保存在存储服务器磁盘上，完成文件管理的所有功能：文件存储、文件同步和提供文件访问等。</h5>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM详解</title>
      <link href="/2022/05/08/JVM%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/05/08/JVM%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM详解："><a href="#JVM详解：" class="headerlink" title="JVM详解："></a>JVM详解：</h2><h3 id="一：JVM的架构模式"><a href="#一：JVM的架构模式" class="headerlink" title="一：JVM的架构模式"></a>一：JVM的架构模式</h3><h4 id="Java编译器输入的指令流基本上是一种基于栈的指令集架构，另一种指令架构则是基于寄存器的指令集架构。"><a href="#Java编译器输入的指令流基本上是一种基于栈的指令集架构，另一种指令架构则是基于寄存器的指令集架构。" class="headerlink" title="Java编译器输入的指令流基本上是一种基于栈的指令集架构，另一种指令架构则是基于寄存器的指令集架构。"></a>Java编译器输入的指令流基本上是一种基于<font color="red">栈的指令集架构</font>，另一种指令架构则是基于<font color="red">寄存器的指令集架构</font>。</h4><h4 id="具体来说：这两种架构之间的区别："><a href="#具体来说：这两种架构之间的区别：" class="headerlink" title="具体来说：这两种架构之间的区别："></a>具体来说：这两种架构之间的区别：</h4><ul><li><p><strong><font color="red">基于栈式架构的特点：</font></strong></p><ul><li><strong>设计和实现更简单，适用于资源受限的系统；</strong></li><li><strong>避开了寄存器的分布难题：使用零地址指令方式分配。</strong></li><li><strong>指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。指令集更小，编译器容易实现。</strong></li><li><strong>不需要硬件支持，可移植性更好，更好实现跨平台</strong></li></ul></li><li><p><strong><font color="red">基于寄存器架构的优点</font></strong></p><ul><li><strong>典型的应用是x86的二进制指令集：比如传统的PC以及Android的Davlik虚拟机。</strong></li><li><strong><font color="red">指令集架构则完全依赖硬件，可移植性差</font></strong></li><li><strong><font color="red">性能优秀和执行更高效</font>；</strong></li><li><strong>花费更少的指令去完成一项操作</strong></li><li><strong>在大部分情况下，基于寄存器架构的指令集往往都以一地址指令，二地址指令和三地址指令为主，而基于栈式架构的指令集却是以零地址指令为主。</strong></li></ul></li></ul><h3 id="JVM的生命周期"><a href="#JVM的生命周期" class="headerlink" title="JVM的生命周期"></a>JVM的生命周期</h3><h4 id="虚拟机启动"><a href="#虚拟机启动" class="headerlink" title="虚拟机启动"></a>虚拟机启动</h4><ul><li><strong>Java虚拟机的启动是通过引导类加载器创建一个初始类来完成的，这个类是由虚拟机的具体实现规定的。</strong></li></ul><h4 id="虚拟机的执行"><a href="#虚拟机的执行" class="headerlink" title="虚拟机的执行"></a>虚拟机的执行</h4><ul><li><strong>一个运行中的Java虚拟机有着一个清晰的任务：执行Java程序。</strong></li><li><strong>程序开始执行时它才执行，程序结束时他就停止。</strong></li><li><strong><font color="red">执行一个所谓的Java程序的时候，真真正正在执行的是一个叫做Java虚拟机的进程</font></strong></li></ul><h4 id="虚拟机的退出："><a href="#虚拟机的退出：" class="headerlink" title="虚拟机的退出："></a>虚拟机的退出：</h4><p><strong>有如下的几种情况：</strong></p><ul><li><strong>程序正常执行结束</strong></li><li><strong>程序在执行过程中遇到了异常或错误而异常终止。</strong></li><li><strong>由于操作系统出现错误而导致Java虚拟机进程终止。</strong></li><li><strong>某线程调用Runtime类或System类中的exit方法，或Runtime类的halt方法，并且Java安全管理器也允许这次exit或halt操作。</strong></li><li><strong>除此之外，JNI（Java Native Interface）描述了用JNI Invocation API来加载或卸载 Java虚拟机时，Java虚拟机的退出i情况。</strong></li></ul><h3 id="二：类加载子系统："><a href="#二：类加载子系统：" class="headerlink" title="二：类加载子系统："></a>二：类加载子系统：</h3><h4 id="内存图："><a href="#内存图：" class="headerlink" title="内存图："></a>内存图：</h4><p><img src="/2022/05/08/JVM%E8%AF%A6%E8%A7%A3/image-20220511162211169.png"></p><h4 id="2-类加载器与类加载过程"><a href="#2-类加载器与类加载过程" class="headerlink" title="2- 类加载器与类加载过程"></a>2- 类加载器与类加载过程</h4><h5 id="有三个阶段：加载阶段，链接阶段，初始化阶段"><a href="#有三个阶段：加载阶段，链接阶段，初始化阶段" class="headerlink" title="有三个阶段：加载阶段，链接阶段，初始化阶段"></a>有三个阶段：加载阶段，链接阶段，初始化阶段</h5><ul><li><strong>类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识。</strong></li><li><strong>ClassLoader只负责class文件的加载，至于它是否可以运行，则由ExecutionEngine决定</strong></li><li><strong>加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区还会存放运行时常量池信息，可能还包括字符串字面量和数字常量。</strong></li></ul><h5 id="类的加载过程："><a href="#类的加载过程：" class="headerlink" title="类的加载过程："></a>类的加载过程：</h5><p><img src="/2022/05/08/JVM%E8%AF%A6%E8%A7%A3/image-20220511165853129.png"></p><h5 id="加载："><a href="#加载：" class="headerlink" title="加载："></a>加载：</h5><ul><li><strong>1.通过一个类的全限定类名获取定义此类的二进制字节流</strong></li><li><strong>2.将这个字节流所代表的的静态存储结构转化为方法区的运行时数据结构</strong></li><li><strong>3.<font color="red">在内存中生成有一个代表这个类的java.lang.Class对象，</font>作为方法区这个类的各种数据的访问入口。</strong></li></ul><h5 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h5><h5 id="验证（Verify）："><a href="#验证（Verify）：" class="headerlink" title="验证（Verify）："></a>验证（Verify）：</h5><ul><li><strong>目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。</strong></li><li><strong>主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证。</strong></li></ul><h5 id="准备（Perpare）："><a href="#准备（Perpare）：" class="headerlink" title="准备（Perpare）："></a>准备（Perpare）：</h5><ul><li><strong>为类变量分配内存并且设置该类变量的默认初始值，即零值。</strong></li><li><strong><font color="red">这里不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显示初始化；</font></strong></li><li><strong><font color="red">这里不会为实例变量分配初始化，</font>类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中。</strong></li></ul><h5 id="解析（Resolve）："><a href="#解析（Resolve）：" class="headerlink" title="解析（Resolve）："></a>解析（Resolve）：</h5><ul><li><strong>将常量池内的符号引用转换为直接引用的过程。</strong></li><li><strong>事实上，解析操作往往会伴随JVM在执行完初始化之后再执行。</strong></li></ul><h5 id="初始化："><a href="#初始化：" class="headerlink" title="初始化："></a>初始化：</h5><ul><li><strong>初始化阶段就是执行类构造器方法<clinit>（）的过程。</clinit></strong></li><li><strong>此方法不需要定义，是 javac 编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。</strong></li><li><strong>构造器方法中指令是按语句在源文件中出现的顺序执行的。</strong></li><li><strong><clinit>（）不同于类的构造器。（关联：构造器是虚拟机视角下的<init>（））</init></clinit></strong></li><li><strong>若该类具有父类，JVM会保证子类的<clinit>（）执行前，父类的<clinit>（）已经执行完毕。</clinit></clinit></strong></li><li><strong>虚拟机必须保证一个类的<clinit>（）方法在多线程下被同步加锁。</clinit></strong></li></ul><h4 id="3-类加载器分类"><a href="#3-类加载器分类" class="headerlink" title="3.类加载器分类"></a>3.类加载器分类</h4><ul><li><strong>JVM支持两种类型的类加载器，分别为<font color="red">引导类加载器（Bootstrap ClassLoader）</font>和<font color="red">自定义类加载器（User-Defined ClassLoader）</font>。</strong></li><li><strong>从概念上来讲，自定义加载器一般指的是程序中由开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是<font color="red">将所有派生于抽象类ClassLLoader的类加载器都划分为自定义类加载器</font>。</strong></li><li><strong>无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有3个。</strong></li></ul><p><img src="/2022/05/08/JVM%E8%AF%A6%E8%A7%A3/image-20220517102913207.png"></p><p><img src="/2022/05/08/JVM%E8%AF%A6%E8%A7%A3/image-20220517103249555.png"></p><h4 id="类加载器的分类："><a href="#类加载器的分类：" class="headerlink" title="类加载器的分类："></a>类加载器的分类：</h4><h5 id="虚拟机自带的加载器"><a href="#虚拟机自带的加载器" class="headerlink" title="虚拟机自带的加载器"></a>虚拟机自带的加载器</h5><ul><li><p><strong>启动类加载器（引导类加载器，Bootstrap ClassLoader）</strong></p><ul><li><p><strong>这个类加载使用 c&#x2F;c++ 语言实现的，嵌套在JVM内部。</strong></p></li><li><p><strong>它用来加载 Java 的核心库（JAVA_HOME&#x2F;jre&#x2F;llib&#x2F;rt.jar、redources.jar 或 sun.boot.class.path路径下的内容），用于提供JVM自身需要的类</strong></p></li><li><p><strong>并不继承自java.lang.ClassLoader，没有父加载器。</strong></p></li><li><p><strong>加载扩展类和应用程序类加载器，并指定为他们的父类加载器。</strong></p></li><li><p><strong>出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类。</strong></p></li></ul></li><li><p><strong>扩展类加载器（Extension ClassLoader）</strong></p><ul><li><p><strong>Java语言编写，由sun.misc。Launcher$ExtClassLoader实现。</strong></p></li><li><p><strong><font color="red">派生于ClassLoader类</font></strong></p></li><li><p><strong>父类加载器为启动类加载器</strong></p></li><li><p><strong>从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的jre&#x2F;lib&#x2F;ext自目录（扩展目录）下加载类库。<font color="red">如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载。</font></strong></p></li></ul></li><li><p><strong>应用程序类加载器（系统类加载器，AppClassLoader）</strong></p><ul><li><p><strong>java语言编写，由sun.misc.Launcher$AppClassLoader实现</strong></p></li><li><p><strong>派生于ClassLoader类</strong></p></li><li><p><strong>父类加载器为扩展类加载器</strong></p></li><li><p><strong>它负责加载环境变量classpath或系统属性 java.class.path 指定路径下的类库</strong></p></li><li><p><strong><font color="red">该类加载是程序中默认的类加载器，</font>一般来说，Java 应用的类都是由它来完成加载</strong></p></li><li><p><strong>通过Classoader#getSystemClassLoader（）方法考研获取到该类加载器</strong></p></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取系统类加载器</span>        ClassLoader systemClassLoader <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>systemClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//sun.misc.Launcher$AppClassLoader@18b4aac2</span>        <span class="token comment" spellcheck="true">//获取其上层：扩展类加载器</span>        ClassLoader extClassLoader <span class="token operator">=</span> systemClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>extClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//sun.misc.Launcher$ExtClassLoader@7f31245a</span>        <span class="token comment" spellcheck="true">//获取其上层 ：获取不到引导类加载器</span>        ClassLoader bootstrapClassLoader <span class="token operator">=</span> extClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bootstrapClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//null</span>        <span class="token comment" spellcheck="true">//对于用户自定义类来说：使用系统类加载器进行加载</span>        ClassLoader classLoader <span class="token operator">=</span> ClassLoaderTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//sun.misc.Launcher$AppClassLoader@18b4aac2</span>        <span class="token comment" spellcheck="true">//String类是使用引导类加载器加载的。---> Java的核心类库都是使用引用类加载器进行加载的。</span>        ClassLoader classLoader1 <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//null</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="用户自定义类加载器"><a href="#用户自定义类加载器" class="headerlink" title="用户自定义类加载器"></a>用户自定义类加载器</h5><ul><li><strong>在java的日常应用程序开发中，类的加载几乎是由上述3种类加载器相互配合执行的，在必要时，我们还可以自定义类加载器，来定义类的加载方式。</strong></li><li><strong>为什么要自定义类加载器？</strong><ul><li><strong>隔离加载类</strong></li><li><strong>修改类加载的方式</strong></li><li><strong>扩展加载源</strong></li><li><strong>防止源码泄漏</strong></li></ul></li></ul><h5 id="用户自定义类加载器实现步骤："><a href="#用户自定义类加载器实现步骤：" class="headerlink" title="用户自定义类加载器实现步骤："></a>用户自定义类加载器实现步骤：</h5><ul><li><strong>1、开发人员可以通过继承抽象类java.lang.ClassLoader类的方式，实现自己的类加载器，以满足一些特殊的需求</strong></li><li><strong>2、在JDK1.2之前，在自定义类加载器时，总会去继承ClassLoader类并重写loadClass（）方法，从而实现自定义的类加载，但是在JDK1.2之后已不再建议用户去覆盖loadClass（）方法，而是建议把自定义的类加载逻辑写在findClass（）方法中</strong></li><li><strong>3、在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承URLClassLoader类，这样就跨域避免自己去编写findClass（）方法及其获取字节流的方式，使自定义类加载器编写更加简洁。</strong></li></ul><h4 id="关于ClassLoader"><a href="#关于ClassLoader" class="headerlink" title="关于ClassLoader"></a>关于ClassLoader</h4><h5 id="ClassLoader类，它是一个抽象类，其后所有的类加载器都继承自ClassLoader（不包括启动类加载器）"><a href="#ClassLoader类，它是一个抽象类，其后所有的类加载器都继承自ClassLoader（不包括启动类加载器）" class="headerlink" title="ClassLoader类，它是一个抽象类，其后所有的类加载器都继承自ClassLoader（不包括启动类加载器）"></a>ClassLoader类，它是一个抽象类，其后所有的类加载器都继承自ClassLoader（不包括启动类加载器）</h5><h5 id="方式1：获取当前类的ClassLoader"><a href="#方式1：获取当前类的ClassLoader" class="headerlink" title="方式1：获取当前类的ClassLoader"></a>方式1：获取当前类的ClassLoader</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="方式2：获取当前线程上下文的ClassLoader"><a href="#方式2：获取当前线程上下文的ClassLoader" class="headerlink" title="方式2：获取当前线程上下文的ClassLoader"></a>方式2：获取当前线程上下文的ClassLoader</h5><pre class=" language-java"><code class="language-java">Thread<span class="token punctuation">.</span>currentThread<span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="方式3：获取系统的ClassLoader"><a href="#方式3：获取系统的ClassLoader" class="headerlink" title="方式3：获取系统的ClassLoader"></a>方式3：获取系统的ClassLoader</h5><pre class=" language-java"><code class="language-java">ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="方式4：获取调用者的ClassLoader"><a href="#方式4：获取调用者的ClassLoader" class="headerlink" title="方式4：获取调用者的ClassLoader"></a>方式4：获取调用者的ClassLoader</h5><pre class=" language-java"><code class="language-java">DriverManager<span class="token punctuation">.</span><span class="token function">getCallerClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h4><ul><li><p><strong><font color="red">工作原理</font></strong></p></li><li><p><strong>1）如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行；</strong></p></li><li><p><strong>2）如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；</strong></p></li><li><p><strong>3）如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此任务，子加载器才会尝试自己去加载，这就是双亲委派模式。</strong><br><img src="/2022/05/08/JVM%E8%AF%A6%E8%A7%A3/image-20220517171516647.png"></p></li><li><p><strong><font color="red">优势</font></strong></p><ul><li><strong>避免类的重复加载</strong></li><li><strong>保护程序安全，防止核心API被随意篡改</strong><ul><li><strong>自定义类：java.lang.String</strong></li><li><strong>自定义类：java.lang.ShKStart</strong></li></ul></li></ul></li></ul><h4 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h4><h5 id="自定义String类，但是在加载自定义String类的时候会率先使用引导类加载器加载，而引导类加载器在加载过程中会先加载jdk自带的文件，报错信息说没有main方法，就是因为加载的是rt-jar包中的String类。这样可以保证对java核心源代码的保护，这就是沙箱安全机制。"><a href="#自定义String类，但是在加载自定义String类的时候会率先使用引导类加载器加载，而引导类加载器在加载过程中会先加载jdk自带的文件，报错信息说没有main方法，就是因为加载的是rt-jar包中的String类。这样可以保证对java核心源代码的保护，这就是沙箱安全机制。" class="headerlink" title="自定义String类，但是在加载自定义String类的时候会率先使用引导类加载器加载，而引导类加载器在加载过程中会先加载jdk自带的文件，报错信息说没有main方法，就是因为加载的是rt.jar包中的String类。这样可以保证对java核心源代码的保护，这就是沙箱安全机制。"></a>自定义String类，但是在加载自定义String类的时候会率先使用引导类加载器加载，而引导类加载器在加载过程中会先加载jdk自带的文件，报错信息说没有main方法，就是因为加载的是rt.jar包中的String类。这样可以保证对java核心源代码的保护，这就是<font color="red">沙箱安全机制</font>。</h5><h4 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h4><ul><li><p><strong>在JVM中表示两个class对象是否为同一个累存在两个必要条件：</strong></p><ul><li><strong>类的完整类名必须一致，包括包名。</strong></li><li><strong>加载这个类的ClassLoader（指ClassLoader实例对象）必须相同。</strong></li></ul></li><li><p><strong>换句话说，在JVM中，即使这两个类对象（class对象）来源同一个Class文件，被同一个虚拟机锁加载，但只要加载它们的ClassLoadershillings对象不同，那么这两个类对象也是不相等的。</strong></p></li></ul><h5 id="对类加载器的引用"><a href="#对类加载器的引用" class="headerlink" title="对类加载器的引用"></a>对类加载器的引用</h5><ul><li><strong>JVM必须知道这一个类型是由启动加载器加载的还是由用户类加载器加载的。如果一个类型是由用户类加载器加载的，那么JVM会<font color="red">将这个类加载器的一个引用作为类型信息的一部分保存在方法区中。</font>当解析一个类型到另一个类型的引用的时候，JVM需要保证这两个类型的类加载是相同的。</strong></li></ul><h5 id="类的主动使用和被动使用"><a href="#类的主动使用和被动使用" class="headerlink" title="类的主动使用和被动使用"></a>类的主动使用和被动使用</h5><ul><li><p><strong>Java程序对类的使用方式分为：主动使用和被动使用。</strong></p><ul><li><strong>主动使用，又分为7种情况：</strong><ul><li><strong>创建类的实例</strong></li><li><strong>访问某个类或接口的静态变量，或者对该静态变量赋值</strong></li><li><strong>调用类的静态方法</strong></li><li><strong>反射（比如：Class.forName（”com.atguigu.Test“））</strong></li><li><strong>初始化一个类的子类</strong></li><li><strong>Java虚拟机启动时被标明为启动类的类</strong></li><li><strong>JDK 7 开始提供的动态语言支持：</strong><ul><li><strong>java.lang.invoke.MethodHandle实例的解析结果  REF_getStatic、REF_putStatic、REF_invokeStatic句柄对应的类没有初始化，则初始化</strong>*</li></ul></li></ul></li></ul></li><li><p><strong>除了以上七种情况，其他使用Java类的方式都被看作是对<font color="red">类的被动使用，都不会导致类的初始化</font></strong></p></li></ul><h3 id="3-运行时数据区概述及线程"><a href="#3-运行时数据区概述及线程" class="headerlink" title="3.运行时数据区概述及线程"></a>3.运行时数据区概述及线程</h3><p><img src="/2022/05/08/JVM%E8%AF%A6%E8%A7%A3/image-20220523192407374.png"></p><h5 id="内存是非常重要的系统资源，是硬盘和cpu的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM内存布局规定了Java在运行过程中内存申请、分配、管理机制存在着部分差异。结合JVM虚拟机规范，来探讨一下经典的JVM内存布局。"><a href="#内存是非常重要的系统资源，是硬盘和cpu的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM内存布局规定了Java在运行过程中内存申请、分配、管理机制存在着部分差异。结合JVM虚拟机规范，来探讨一下经典的JVM内存布局。" class="headerlink" title="内存是非常重要的系统资源，是硬盘和cpu的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM内存布局规定了Java在运行过程中内存申请、分配、管理机制存在着部分差异。结合JVM虚拟机规范，来探讨一下经典的JVM内存布局。"></a>内存是非常重要的系统资源，是硬盘和cpu的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM内存布局规定了Java在运行过程中内存申请、分配、管理机制存在着部分差异。结合JVM虚拟机规范，来探讨一下经典的JVM内存布局。</h5><p><img src="/2022/05/08/JVM%E8%AF%A6%E8%A7%A3/image-20220523194104852.png"></p><p><img src="/2022/05/08/JVM%E8%AF%A6%E8%A7%A3/image-20220523194254482.png"></p><h5 id="Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。"><a href="#Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。" class="headerlink" title="Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。"></a>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。</h5><h5 id="灰色的为单独线程私有，红色的为多个线程共享。即："><a href="#灰色的为单独线程私有，红色的为多个线程共享。即：" class="headerlink" title="灰色的为单独线程私有，红色的为多个线程共享。即："></a>灰色的为单独线程私有，红色的为多个线程共享。即：</h5><ul><li><strong>每个线程：独立包括程序计数器、栈、本地栈。</strong></li><li><strong>线程间共享：堆、堆外内存（永久代或元空间、代码缓存）</strong></li></ul><h4 id="2-线程"><a href="#2-线程" class="headerlink" title="2-线程"></a>2-线程</h4><ul><li><strong>线程是一个程序里的运行单元。JVM允许一个应用有多个并行的执行。</strong></li><li><strong>在Hotspot JVM里，每个线程都与操作系统的本地线程直接映射。</strong><ul><li><strong>当一个Java线程准备好执行以后，此时一个操作系统的本地线程也同时创建。Java线程执行终止后，本地线程也会回收。</strong></li></ul></li><li><strong>操作系统负责所有线程的安排调度到任何一个可用的CPU上。一旦本地线程初始化成功，它就会调用Java线程中的run()方法。</strong></li></ul><h4 id="3-JVM系统线程"><a href="#3-JVM系统线程" class="headerlink" title="3-JVM系统线程"></a>3-JVM系统线程</h4><ul><li><p><strong>如果你使用jconsole或者是任何一个调试工具，都能看到在后台有许多线程在运行。这些后台线程不包括调用public static void main(String[])的main线程以及所有这个main线程自己创建的线程。</strong></p></li><li><p><strong>这些主要的后台系统线程在Hotspot JVM里主要是以下几个：</strong></p><ul><li><strong>虚拟线程： 这种线程的操作是需要JVM达到安全点才会出现。这些操作必须在不同的线程中发生的原因是他们都需要JVM达到安全点，这样堆才不会变化。这种线程的类型包括”stop-the-world“的垃圾收集，线程收集，线程挂起以及偏向锁撤销。</strong></li><li><strong>周期任务线程： 这种线程是时间周期事件的体现（比如中断），他们一般用于周期性操作的调度执行。</strong></li><li><strong>GC线程： 这种相册对在JVM里不同种类的垃圾收集行为提供了支持。</strong></li><li><strong>信号调度线程： 这种线程接收信号并发送给JVM，在它内部通过调用适当的方法进行处理。</strong></li></ul></li></ul><h4 id="4-程序计数器"><a href="#4-程序计数器" class="headerlink" title="4-程序计数器"></a>4-程序计数器</h4><p><img src="/2022/05/08/JVM%E8%AF%A6%E8%A7%A3/image-20220523203315213.png"></p><h5 id="作用：PC寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。"><a href="#作用：PC寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。" class="headerlink" title="作用：PC寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。"></a>作用：PC寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。</h5><h5 id="PC存储器："><a href="#PC存储器：" class="headerlink" title="PC存储器："></a>PC存储器：</h5><ul><li><p><strong>它是一块很小的内存空间，几乎可以忽略不记。也是运行速度最快的存储区域。</strong></p></li><li><p><strong>在JVM规范中，每个线程都有它自己的程序计数器，是线程私有的，有生命周期与线程生命周期保持一致。</strong></p></li><li><p><strong>任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的Java方法的JVM指令地址；或者，如果是在执行native方法，则是未指定指（undefned）</strong></p></li><li><p><strong>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</strong></p></li><li><p><strong>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。</strong></p></li><li><p><strong>它是唯一一个在 Java 虚拟机规范中没有规定任何OutOtMemoryError情况的区域。</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP协议</title>
      <link href="/2022/04/23/TCP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2022/04/23/TCP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="TCP协议3次握手"><a href="#TCP协议3次握手" class="headerlink" title="TCP协议3次握手"></a>TCP协议3次握手</h3><ul><li><strong>第一次握手：是由客户端向服务端发起的，用来申请建立连接的，此时这个报文中SYN标志为1，这也是常说的SYN包</strong></li><li><strong>第二次握手：是由服务器回复客户端的，用来确认并接受连接请求的，这个报文的SYN位和ACK位都标记为1，所以也叫做SYN-ACK报文。</strong></li><li><strong>第三次握手：仍然是客户端发送给服务器端的，用来确认服务端的回复消息，这个报文中的ACK标志，位标记为1，所以也叫做ACK包</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie和Session</title>
      <link href="/2022/04/20/Cookie%E5%92%8CSession/"/>
      <url>/2022/04/20/Cookie%E5%92%8CSession/</url>
      
        <content type="html"><![CDATA[<h2 id="Cookie和Session"><a href="#Cookie和Session" class="headerlink" title="Cookie和Session"></a>Cookie和Session</h2><h4 id="Cookie和Session的区别："><a href="#Cookie和Session的区别：" class="headerlink" title="Cookie和Session的区别："></a>Cookie和Session的区别：</h4><ul><li><p><strong>Cookie数据存放在客户端，Session数据存放在服务器端</strong></p></li><li><p><strong>Cookie不是特别安全，别人可以分析存在本地的cookie，并进行cookie欺骗，如果考虑安全，使用session</strong></p></li><li><p><strong>session占用服务器性能，在一定时间内保存在服务器上，当访问增多时，会比较占用你服务器的性能，如果考虑到减轻我们的服务器性能损耗，应该使用一些cookie</strong></p></li><li><p><strong>单个cookie保存的数据不超过4k，很多浏览器都限制一个站点，做多保存20个cookie，而session则存储在我们的服务器端，没有存储数量限制，可以保存更多复杂的数据类型</strong></p></li><li><p><strong>两者的生命周期有区别，cookie的生命周期是累计的，从创建时开始计时，20分钟后，cookie生命周期就结束了，session的生命周期是间隔的，从创建时开始计时，如果在20分钟内没有访问我们的session，那么session的生命周期的被销毁了，但在20分钟之内访问了session，那么将重新计算session的生命周期</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解</title>
      <link href="/2022/04/18/%E6%B3%A8%E8%A7%A3/"/>
      <url>/2022/04/18/%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Value注解-和-ConfigurationProperties注解"><a href="#Value注解-和-ConfigurationProperties注解" class="headerlink" title="@Value注解 和 @ConfigurationProperties注解"></a>@Value注解 和 @ConfigurationProperties注解</h2><h3 id="SpringBoot中读取yml配置文件"><a href="#SpringBoot中读取yml配置文件" class="headerlink" title="SpringBoot中读取yml配置文件"></a>SpringBoot中读取yml配置文件</h3><h4 id="一、YAML基本语法"><a href="#一、YAML基本语法" class="headerlink" title="一、YAML基本语法"></a>一、YAML基本语法</h4><ul><li><p><strong>1、以缩进代表层级关系</strong></p></li><li><p><strong>2、缩进不能使用tab，只能用空格</strong></p></li><li><p><strong>3、空格个数不重要，但是同一层级必须左对齐</strong></p></li><li><p><strong>4、大小写敏感</strong></p></li><li><p><strong>5、数据格式为，名称:(空格)值</strong></p></li><li><p><strong>6、注释单行用#，只能注释单行</strong></p></li><li><p><strong>开启注解</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- @ConfigurationProperties的支持 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li></ul><h4 id="二、YAML支持的数据格式"><a href="#二、YAML支持的数据格式" class="headerlink" title="二、YAML支持的数据格式"></a>二、YAML支持的数据格式</h4><h5 id="1、字面量：数字、字符串、布尔值等不可再分的值"><a href="#1、字面量：数字、字符串、布尔值等不可再分的值" class="headerlink" title="1、字面量：数字、字符串、布尔值等不可再分的值"></a>1、字面量：数字、字符串、布尔值等不可再分的值</h5><p><strong>字符串默认不需要加单引号或者双引号，如果加双引号，它不会转义字符串里面的特殊字符，而加单引号，则会转义字符串里面的特殊字符，意思就是将特殊字符直接变为字符串输出。</strong></p><p>例子：</p><pre class=" language-bash"><code class="language-bash">key1: 1key2: <span class="token boolean">true</span></code></pre><h5 id="2、对象：即为键值对，key-x3D-value"><a href="#2、对象：即为键值对，key-x3D-value" class="headerlink" title="2、对象：即为键值对，key &#x3D; value"></a>2、对象：即为键值对，key &#x3D; value</h5><p><strong>用冒号分隔键值对(Key: Value), Key需要顶格写，前面不能有空格，冒号后面需要有一个空格然后再跟值, 相同的缩进属于同一个map。</strong></p><p>例子：</p><pre class=" language-bash"><code class="language-bash">server:  port: 8888  servlet:    context-path: /</code></pre><h5 id="3、数组：一组按顺序排列的值"><a href="#3、数组：一组按顺序排列的值" class="headerlink" title="3、数组：一组按顺序排列的值"></a>3、数组：一组按顺序排列的值</h5><p><strong>用-来表示数组中的一个元素。</strong></p><p>例子：</p><pre class=" language-bash"><code class="language-bash">wechat:  mp:    configs:    - appid: appid1      secret: arr1_secret      token: arr1_token      aesKey: arr1_key      msgDataFormat: JSON    - appid: appid2      secret: arr2_secret      token: arr2_token      aesKey: arr2_key      msgDataFormat: JSON</code></pre><h4 id="三、读取yml配置文件"><a href="#三、读取yml配置文件" class="headerlink" title="三、读取yml配置文件"></a>三、读取yml配置文件</h4><p><strong>application.yml内容:</strong></p><pre class=" language-bash"><code class="language-bash">wechat:  mp:    configs:    - appid: appid1      secret: arr1_secret      token: arr1_token      aesKey: arr1_key      msgDataFormat: JSON    - appid: appid2      secret: arr2_secret      token: arr2_token      aesKey: arr2_key      msgDataFormat: JSONserver:  port: 8888  servlet:    context-path: /</code></pre><p><strong>添加配置文件对应的实体类</strong></p><p>实体类添加注解，@ConfigurationProperties，@ConfigurationProperties注解可以自定义实体类，映射yml或者properties文件，自动为对象bean属性捆绑数据</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"wechat.mp"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WxMpProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>MpConfig<span class="token operator">></span> configs<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MpConfig</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 设置微信公众号的appid         */</span>        <span class="token keyword">private</span> String appId<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 设置微信公众号的app secret         */</span>        <span class="token keyword">private</span> String secret<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 设置微信公众号的token         */</span>        <span class="token keyword">private</span> String token<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 设置微信公众号的EncodingAESKey         */</span>        <span class="token keyword">private</span> String aesKey<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="1、添加controller"><a href="#1、添加controller" class="headerlink" title="1、添加controller"></a>1、添加controller</h5><p>添加读取yml文件的controller，打印yml配置信息，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 读取yml文件的controller * * @Authro Java碎碎念 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestReadYmlController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer port<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> WxMpProperties wxMpProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/readYml"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readYml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"server.port="</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"wxMpProperties="</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>wxMpProperties<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="PS：-ConfigurationProperties-无法通过给静态变量赋值，在对应字段的set方法去掉static即可"><a href="#PS：-ConfigurationProperties-无法通过给静态变量赋值，在对应字段的set方法去掉static即可" class="headerlink" title="PS：@ConfigurationProperties 无法通过给静态变量赋值，在对应字段的set方法去掉static即可"></a><font color="red">PS：@ConfigurationProperties 无法通过给静态变量赋值，在对应字段的set方法去掉static即可</font></h4>]]></content>
      
      
      <categories>
          
          <category> 我的错误 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 易错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装nginx</title>
      <link href="/2022/04/10/Docker%E5%AE%89%E8%A3%85nginx/"/>
      <url>/2022/04/10/Docker%E5%AE%89%E8%A3%85nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker安装Nginx"><a href="#Docker安装Nginx" class="headerlink" title="Docker安装Nginx"></a>Docker安装Nginx</h2><h5 id="Nginx-是一个高性能的-HTTP-和反向代理-web-服务器，同时也提供了-IMAP-x2F-POP3-x2F-SMTP-服务-。"><a href="#Nginx-是一个高性能的-HTTP-和反向代理-web-服务器，同时也提供了-IMAP-x2F-POP3-x2F-SMTP-服务-。" class="headerlink" title="Nginx 是一个高性能的 HTTP 和反向代理 web 服务器，同时也提供了 IMAP&#x2F;POP3&#x2F;SMTP 服务 。"></a>Nginx 是一个高性能的 HTTP 和反向代理 web 服务器，同时也提供了 IMAP&#x2F;POP3&#x2F;SMTP 服务 。</h5><h3 id="1、查看可用的-Nginx-版本"><a href="#1、查看可用的-Nginx-版本" class="headerlink" title="1、查看可用的 Nginx 版本"></a>1、查看可用的 Nginx 版本</h3><p>访问 Nginx 镜像库地址： <a href="https://hub.docker.com/_/nginx?tab=tags%E3%80%82">https://hub.docker.com/_/nginx?tab=tags。</a></p><p>可以通过 Sort by 查看其他版本的 Nginx，默认是最新版本 <strong>nginx:latest</strong>。</p><p><img src="/2022/04/10/Docker%E5%AE%89%E8%A3%85nginx/image-20220410122233576.png"></p><p>你也可以在下拉列表中找到其他你想要的版本：</p><p><img src="/2022/04/10/Docker%E5%AE%89%E8%A3%85nginx/image-20220410122407551.png"></p><p>此外，我们还可以用 <strong>docker search nginx</strong> 命令来查看可用版本：</p><pre class=" language-shell"><code class="language-shell">$ docker search nginxNAME                      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDnginx                     Official build of Nginx.                        3260      [OK]       jwilder/nginx-proxy       Automated Nginx reverse proxy for docker c...   674                  [OK]richarvey/nginx-php-fpm   Container running Nginx + PHP-FPM capable ...   207                  [OK]million12/nginx-php       Nginx + PHP-FPM 5.5, 5.6, 7.0 (NG), CentOS...   67                   [OK]maxexcloo/nginx-php       Docker framework container with Nginx and ...   57                   [OK]</code></pre><h3 id="2、取最新版的-Nginx-镜像"><a href="#2、取最新版的-Nginx-镜像" class="headerlink" title="2、取最新版的 Nginx 镜像"></a>2、取最新版的 Nginx 镜像</h3><pre class=" language-shell"><code class="language-shell">$ docker pull nginx:latest</code></pre><h3 id="3、查看本地镜像"><a href="#3、查看本地镜像" class="headerlink" title="3、查看本地镜像"></a>3、查看本地镜像</h3><h5 id="使用以下命令来查看是否已安装了-nginx："><a href="#使用以下命令来查看是否已安装了-nginx：" class="headerlink" title="使用以下命令来查看是否已安装了 nginx："></a>使用以下命令来查看是否已安装了 nginx：</h5><pre class=" language-shell"><code class="language-shell">$ docker images</code></pre><h3 id="4、运行容器"><a href="#4、运行容器" class="headerlink" title="4、运行容器"></a>4、运行容器</h3><h5 id="安装完成后，我们可以使用以下命令来运行-nginx-容器："><a href="#安装完成后，我们可以使用以下命令来运行-nginx-容器：" class="headerlink" title="安装完成后，我们可以使用以下命令来运行 nginx 容器："></a>安装完成后，我们可以使用以下命令来运行 nginx 容器：</h5><pre class=" language-shell"><code class="language-shell">$ docker run --name nginx-test -p 8080:80 -d nginx</code></pre><h5 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h5><ul><li><strong>–name nginx-test：容器名称。</strong></li><li><strong>-p 8082:80 端口进行映射，将本地 8082 端口映射到容器内部的 80 端口。</strong></li><li><strong>-d nginx：设置容器在后台一直运行</strong></li></ul><h3 id="5、安装成功"><a href="#5、安装成功" class="headerlink" title="5、安装成功"></a>5、安装成功</h3><h5 id="最后我们可以通过浏览器可以直接访问-8080-端口的-nginx-服务："><a href="#最后我们可以通过浏览器可以直接访问-8080-端口的-nginx-服务：" class="headerlink" title="最后我们可以通过浏览器可以直接访问 8080 端口的 nginx 服务："></a>最后我们可以通过浏览器可以直接访问 8080 端口的 nginx 服务：</h5><p><img src="/2022/04/10/Docker%E5%AE%89%E8%A3%85nginx/image-20220410123704220.png"></p>]]></content>
      
      
      <categories>
          
          <category> 管理工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger入门</title>
      <link href="/2022/04/10/Swagger%E5%85%A5%E9%97%A8/"/>
      <url>/2022/04/10/Swagger%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Swagger入门"><a href="#Swagger入门" class="headerlink" title="Swagger入门"></a>Swagger入门</h2><h3 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h3><ul><li><strong>了解Swagger的作用和概念</strong></li><li><strong>了解前后端分离</strong></li><li><strong>在Spring中集成Swagger</strong></li></ul><h2 id="Swagger简介"><a href="#Swagger简介" class="headerlink" title="Swagger简介"></a>Swagger简介</h2><ul><li><strong>前后分离：</strong><ul><li><strong>前端测试后端接口：postman</strong></li><li><strong>后端提供接口，需要实时更新的消息和改动！</strong></li></ul></li></ul><h3 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h3><ul><li><strong>Api框架；</strong></li><li><strong>RestFul Api 文档在线自动生成工具&#x3D;&#x3D;&gt;Api文档与API自定义同步更新</strong></li><li><strong>直接运行，可以在线测试API接口</strong></li></ul><h3 id="在项目使用Swagger需要Springbox"><a href="#在项目使用Swagger需要Springbox" class="headerlink" title="在项目使用Swagger需要Springbox"></a>在项目使用Swagger需要Springbox</h3><ul><li><strong>swagger2</strong></li><li><strong>ui</strong></li></ul><h3 id="SpringBoot集成Swagger"><a href="#SpringBoot集成Swagger" class="headerlink" title="SpringBoot集成Swagger"></a>SpringBoot集成Swagger</h3><ul><li><strong>1、新建springboot-web项目</strong></li><li><strong>2、导入相关依赖</strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li><strong>3、编写一个Hello工程</strong></li><li><strong>4、配置Swagger &#x3D;&#x3D; &gt; Config</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span>  <span class="token comment" spellcheck="true">//开启Swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.it<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>swagger-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-boot.version</span><span class="token punctuation">></span></span>2.3.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-boot.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>com.it.SwaggerDemoApplication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/04/10/Swagger%E5%85%A5%E9%97%A8/image-20220304211907896.png"></p><h3 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h3><p><strong>Swagger的bean实例Docket；</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span>  <span class="token comment" spellcheck="true">//开启Swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 配置了swagger的Docket的bean实例     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 配置swagger信息=apiInfo     */</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 作者信息         */</span>        Contact contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"谦"</span><span class="token punctuation">,</span><span class="token string">"http://blog.kuangstudy.com/"</span><span class="token punctuation">,</span><span class="token string">"24736743@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span>                <span class="token string">"狂神的Swagger Api文档"</span><span class="token punctuation">,</span>                <span class="token string">"世界和平"</span><span class="token punctuation">,</span>                <span class="token string">"v1.0"</span><span class="token punctuation">,</span>                <span class="token string">"urn:tos"</span><span class="token punctuation">,</span>                contact<span class="token punctuation">,</span>                <span class="token string">"Apache 2.0"</span><span class="token punctuation">,</span>                <span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Swagger配置扫描接口"><a href="#Swagger配置扫描接口" class="headerlink" title="Swagger配置扫描接口"></a>Swagger配置扫描接口</h3><ul><li><strong>Docket.select()</strong></li></ul><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 配置了swagger的Docket的bean实例     * .enable 是否启用Swagger，如果为false，则Swagger不能再浏览器中使用     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//RequestHandlerSelectors,配置扫描接口的方式</span>                <span class="token comment" spellcheck="true">//basePackage:指定扫描的包</span>                <span class="token comment" spellcheck="true">//any():扫描全部</span>                <span class="token comment" spellcheck="true">//none():不扫描</span>                <span class="token comment" spellcheck="true">//withClassAnnotation: 扫描类上的注解,参数是一个注解的反射对象</span>                <span class="token comment" spellcheck="true">//withMethodAnnotation: 扫描方法上的注解</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.st.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//paths(). 过滤什么路径</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token string">"/st/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//build</span>    <span class="token punctuation">}</span></code></pre><h4 id="只希望Swagger在生产环境中使用，在发布的时候不使用？"><a href="#只希望Swagger在生产环境中使用，在发布的时候不使用？" class="headerlink" title="只希望Swagger在生产环境中使用，在发布的时候不使用？"></a>只希望Swagger在生产环境中使用，在发布的时候不使用？</h4><ul><li><strong>判断是不是生产环境</strong></li><li><strong>注入enable(flag)</strong></li></ul><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 配置了swagger的Docket的bean实例     * .enable 是否启用Swagger，如果为false，则Swagger不能再浏览器中使用     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置要显示的Swagger环境</span>        Profiles profiles <span class="token operator">=</span> Profiles<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过environment.acceptsProfiles判断是否处在自己设定的环境中</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>profiles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//RequestHandlerSelectors,配置扫描接口的方式</span>                <span class="token comment" spellcheck="true">//basePackage:指定扫描的包</span>                <span class="token comment" spellcheck="true">//any():扫描全部</span>                <span class="token comment" spellcheck="true">//none():不扫描</span>                <span class="token comment" spellcheck="true">//withClassAnnotation: 扫描类上的注解,参数是一个注解的反射对象</span>                <span class="token comment" spellcheck="true">//withMethodAnnotation: 扫描方法上的注解</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.st.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//paths(). 过滤什么路径</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token string">"/st/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//build</span>    <span class="token punctuation">}</span></code></pre><h3 id="配置Api文档的分组"><a href="#配置Api文档的分组" class="headerlink" title="配置Api文档的分组"></a>配置Api文档的分组</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"xx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="如何配置多个分组"><a href="#如何配置多个分组" class="headerlink" title="如何配置多个分组;"></a>如何配置多个分组;</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebSocket入门</title>
      <link href="/2022/04/06/WebSocket%E5%85%A5%E9%97%A8/"/>
      <url>/2022/04/06/WebSocket%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1、WebSocket"><a href="#1、WebSocket" class="headerlink" title="1、WebSocket"></a>1、WebSocket</h2><h3 id="1-1、WebSocket介绍"><a href="#1-1、WebSocket介绍" class="headerlink" title="1.1、WebSocket介绍"></a>1.1、WebSocket介绍</h3><h5 id="WebSocket是一种网络通信协议。DEC6455-定义了它的通信标准。"><a href="#WebSocket是一种网络通信协议。DEC6455-定义了它的通信标准。" class="headerlink" title="WebSocket是一种网络通信协议。DEC6455 定义了它的通信标准。"></a>WebSocket是一种网络通信协议。DEC6455 定义了它的通信标准。</h5><h5 id="WebSocket是HTML5开始提供的一种在单个TCP连接上进行全双工通讯的协议。"><a href="#WebSocket是HTML5开始提供的一种在单个TCP连接上进行全双工通讯的协议。" class="headerlink" title="WebSocket是HTML5开始提供的一种在单个TCP连接上进行全双工通讯的协议。"></a>WebSocket是HTML5开始提供的一种在单个TCP连接上进行全双工通讯的协议。</h5><h5 id="HTTP协议是一种无状态的、无连接的、单向的应用层协议。它采用了请求-x2F-响应模型。通信请求只能由客户端发起，服务端对请求"><a href="#HTTP协议是一种无状态的、无连接的、单向的应用层协议。它采用了请求-x2F-响应模型。通信请求只能由客户端发起，服务端对请求" class="headerlink" title="HTTP协议是一种无状态的、无连接的、单向的应用层协议。它采用了请求&#x2F;响应模型。通信请求只能由客户端发起，服务端对请求"></a>HTTP协议是一种无状态的、无连接的、单向的应用层协议。它采用了请求&#x2F;响应模型。通信请求只能由客户端发起，服务端对请求</h5><h5 id="做出应答处理。"><a href="#做出应答处理。" class="headerlink" title="做出应答处理。"></a>做出应答处理。</h5><h5 id="这种通信模型有一一个弊端-HTTP-协议无法实现服务器主动向客户端发起消息。"><a href="#这种通信模型有一一个弊端-HTTP-协议无法实现服务器主动向客户端发起消息。" class="headerlink" title="这种通信模型有一一个弊端: HTTP 协议无法实现服务器主动向客户端发起消息。"></a>这种通信模型有一一个弊端: HTTP 协议无法实现服务器主动向客户端发起消息。</h5><h5 id="这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。大多数web应用程序将通过频繁的异步"><a href="#这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。大多数web应用程序将通过频繁的异步" class="headerlink" title="这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。大多数web应用程序将通过频繁的异步"></a>这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。大多数web应用程序将通过频繁的异步</h5><h5 id="AJAX请求实现长轮询。轮询的效率低，非常浪费资源-因为必须不停连接-或者HTTP连接始终打开-。"><a href="#AJAX请求实现长轮询。轮询的效率低，非常浪费资源-因为必须不停连接-或者HTTP连接始终打开-。" class="headerlink" title="AJAX请求实现长轮询。轮询的效率低，非常浪费资源(因为必须不停连接,或者HTTP连接始终打开)。"></a>AJAX请求实现长轮询。轮询的效率低，非常浪费资源(因为必须不停连接,或者HTTP连接始终打开)。</h5><p><img src="/2022/04/06/WebSocket%E5%85%A5%E9%97%A8/image-20220408112811396.png"></p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><h5 id="其特点包括："><a href="#其特点包括：" class="headerlink" title="其特点包括："></a>其特点包括：</h5><ul><li><strong>（1）建立在TCP协议上，服务器端的实现比较容器。</strong></li><li><strong>（2）与HTTP协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用HTTP协议，因此握手时不容易屏蔽，能通过各种HTTP代理服务器。</strong></li><li><strong>（3）数据格式比较轻量化，性能开销小，通信高效</strong></li><li><strong>（4）可以发送文本，也可以发送二进制数据</strong></li><li><strong>（5）没有同源限制，客户端可以与任意服务器通信</strong></li></ul><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="1-2-websocket协议"><a href="#1-2-websocket协议" class="headerlink" title="1.2 websocket协议"></a>1.2 websocket协议</h3><h5 id="本协议有两部分-握手和数据传输。"><a href="#本协议有两部分-握手和数据传输。" class="headerlink" title="本协议有两部分:握手和数据传输。"></a>本协议有两部分:握手和数据传输。</h5><h5 id="握手是基于http协议的。"><a href="#握手是基于http协议的。" class="headerlink" title="握手是基于http协议的。"></a>握手是基于http协议的。</h5><h5 id="来自客户端的握手看起来像如下形式"><a href="#来自客户端的握手看起来像如下形式" class="headerlink" title="来自客户端的握手看起来像如下形式:"></a>来自客户端的握手看起来像如下形式:</h5><pre class=" language-http"><code class="language-http">1| GET ws://localhost/chat HTTP/1.12| Host: localhost3| Upgrade: websocket4| Connection: Upgrade5| Sec-web Socket-Key: dGh1IHNhbXB sZSBub25jZQ==6| Sec -Websocket- Extensions: pe rmessage-deflate7| Sec -Websocket-Version: 13</code></pre><h5 id="来自服务器-的握手看起来像如下形式："><a href="#来自服务器-的握手看起来像如下形式：" class="headerlink" title="来自服务器 的握手看起来像如下形式："></a>来自服务器 的握手看起来像如下形式：</h5><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">101 Switching Protocols</span></span><span class="token header-name keyword">upgrade:</span> websocket<span class="token header-name keyword">connection:</span> UpgradeSec -Web Socket- Accept: s3pPLMBi TxaQ9kYGzzhZRbK+x00=Sec-Wwebsocket-Extensi ons: permessage-deflate</code></pre><h5 id="字段说明："><a href="#字段说明：" class="headerlink" title="字段说明："></a>字段说明：</h5><table><thead><tr><th>头名称</th><th>说明</th></tr></thead><tbody><tr><td>Connection : Upgrade</td><td>标识该HTTP请求是一一个协议升级请求</td></tr><tr><td>Upgrade : WebSocket</td><td>协议升级为webSocke t协议</td></tr><tr><td>Sec-WebSocket - Version: 13</td><td>客户端支持webSocket的版本</td></tr><tr><td>Sec-WebSocket - Key :</td><td>客户端采用base6 4编码的24位随机字符序列，服务器接受客户端HTTP协议升级的证明。要求服务端响应一个对应加密的Sec-WebSocket -Accept头信息作为应答</td></tr><tr><td>Sec-WebSocket - Extensions</td><td>协议扩展类型</td></tr></tbody></table><h3 id="1-3、客户端（浏览器）实现"><a href="#1-3、客户端（浏览器）实现" class="headerlink" title="1.3、客户端（浏览器）实现"></a>1.3、客户端（浏览器）实现</h3><h4 id="1-3-1、websocket对象"><a href="#1-3-1、websocket对象" class="headerlink" title="1.3.1、websocket对象"></a>1.3.1、websocket对象</h4><h5 id="实现webSockets的Web浏览器将通过webSocket对象公开所有必需的客户端功能-主要指支持Html5-的浏览器-。"><a href="#实现webSockets的Web浏览器将通过webSocket对象公开所有必需的客户端功能-主要指支持Html5-的浏览器-。" class="headerlink" title="实现webSockets的Web浏览器将通过webSocket对象公开所有必需的客户端功能(主要指支持Html5 的浏览器)。"></a>实现webSockets的Web浏览器将通过webSocket对象公开所有必需的客户端功能(主要指支持Html5 的浏览器)。</h5><h5 id="以下API用于创建WebSocket-对象"><a href="#以下API用于创建WebSocket-对象" class="headerlink" title="以下API用于创建WebSocket 对象:"></a>以下API用于创建WebSocket 对象:</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></code></pre><ul><li>参数url说明：ws：&#x2F;&#x2F;ip地址：端口号&#x2F;资源名称</li></ul><h4 id="1-3-2、websocket事件"><a href="#1-3-2、websocket事件" class="headerlink" title="1.3.2、websocket事件"></a>1.3.2、websocket事件</h4><h5 id="WebSocket对象相关事件"><a href="#WebSocket对象相关事件" class="headerlink" title="WebSocket对象相关事件"></a>WebSocket对象相关事件</h5><table><thead><tr><th>事件</th><th>事件处理程序</th><th>描述</th></tr></thead><tbody><tr><td>open</td><td>WebSocket对象.onopen</td><td>连接建立时触发</td></tr><tr><td>message</td><td>WebSocket对象.onmessage</td><td>客户端接收服务端数据时触发</td></tr><tr><td>error</td><td>WebSocket对象.onerror</td><td>通信发生错误时触发</td></tr><tr><td>close</td><td>WebSocket对象.onclose</td><td>连接关闭时触发</td></tr></tbody></table><h4 id="1-3-3、WebSocket方法"><a href="#1-3-3、WebSocket方法" class="headerlink" title="1.3.3、WebSocket方法"></a>1.3.3、WebSocket方法</h4><h5 id="WebSocket-对象的相关方法"><a href="#WebSocket-对象的相关方法" class="headerlink" title="WebSocket 对象的相关方法"></a>WebSocket 对象的相关方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>send（）</td><td>使用连接发送数据</td></tr></tbody></table><h3 id="1-4、服务端实现"><a href="#1-4、服务端实现" class="headerlink" title="1.4、服务端实现"></a>1.4、服务端实现</h3><h5 id="Tomcat的7-0-5版本开始支持webSocket-并且实现了Java-webSocket-规范-JSR356-。"><a href="#Tomcat的7-0-5版本开始支持webSocket-并且实现了Java-webSocket-规范-JSR356-。" class="headerlink" title="Tomcat的7.0.5版本开始支持webSocket ,并且实现了Java webSocket 规范(JSR356)。"></a>Tomcat的7.0.5版本开始支持webSocket ,并且实现了Java webSocket 规范(JSR356)。</h5><h5 id="Java-WebSocket应用由-系列的webSocketEndpoint组成。-Endpoint-是一-个java对象-代表webSocket链接的一-端，-对于"><a href="#Java-WebSocket应用由-系列的webSocketEndpoint组成。-Endpoint-是一-个java对象-代表webSocket链接的一-端，-对于" class="headerlink" title="Java WebSocket应用由- -系列的webSocketEndpoint组成。 Endpoint 是一-个java对象,代表webSocket链接的一-端， 对于"></a>Java WebSocket应用由- -系列的webSocketEndpoint组成。 Endpoint 是一-个java对象,代表webSocket链接的一-端， 对于</h5><h5 id="服务端，我们可以视为处理具体webSocket消息的接口，就像Servlet之与http请求一样。"><a href="#服务端，我们可以视为处理具体webSocket消息的接口，就像Servlet之与http请求一样。" class="headerlink" title="服务端，我们可以视为处理具体webSocket消息的接口，就像Servlet之与http请求一样。"></a>服务端，我们可以视为处理具体webSocket消息的接口，就像Servlet之与http请求一样。</h5><h5 id="我们可以通过两种方式定义Endpoint"><a href="#我们可以通过两种方式定义Endpoint" class="headerlink" title="我们可以通过两种方式定义Endpoint :"></a>我们可以通过两种方式定义Endpoint :</h5><ul><li><strong>第一种是编程式， 即继承类javax. websocket . EndPoint并实现其方法。</strong></li><li><strong>第二种是注解式，即定义一-个POJO， 并添加@ServerEndpoint相关注解。</strong></li></ul><h5 id="Endpoint实例在webSocket握手时创建，并在客户端与服务端链接过程中有效-最后在链接关闭时结束。在Endpoint接口中明确"><a href="#Endpoint实例在webSocket握手时创建，并在客户端与服务端链接过程中有效-最后在链接关闭时结束。在Endpoint接口中明确" class="headerlink" title="Endpoint实例在webSocket握手时创建，并在客户端与服务端链接过程中有效,最后在链接关闭时结束。在Endpoint接口中明确"></a>Endpoint实例在webSocket握手时创建，并在客户端与服务端链接过程中有效,最后在链接关闭时结束。在Endpoint接口中明确</h5><h5 id="定义了与其生命周期相关的方法，规范实现者确保生-命周期的各个阶段调用实例的相关方法。生命周期方法如下"><a href="#定义了与其生命周期相关的方法，规范实现者确保生-命周期的各个阶段调用实例的相关方法。生命周期方法如下" class="headerlink" title="定义了与其生命周期相关的方法，规范实现者确保生 命周期的各个阶段调用实例的相关方法。生命周期方法如下:"></a>定义了与其生命周期相关的方法，规范实现者确保生 命周期的各个阶段调用实例的相关方法。生命周期方法如下:</h5><table><thead><tr><th>方法</th><th>含义描述</th><th>注解</th></tr></thead><tbody><tr><td>onClose</td><td>当会话关闭时调用</td><td>@OnClose</td></tr><tr><td>onOpen</td><td>当开启一个 新的会话时调用，该方法时客户端与服务端握手成功之后调用的方法</td><td>@OnOpen</td></tr><tr><td>onError</td><td>当连接过程中异常时调用</td><td>@OnError</td></tr></tbody></table><h4 id="服务端如何接收客户端发送的数据呢"><a href="#服务端如何接收客户端发送的数据呢" class="headerlink" title="服务端如何接收客户端发送的数据呢?"></a>服务端如何接收客户端发送的数据呢?</h4><h5 id="通过为session-添加MessageHandler消息处理器来接收消息，当采用注解方式定义Endpoint时-我们还可以通过"><a href="#通过为session-添加MessageHandler消息处理器来接收消息，当采用注解方式定义Endpoint时-我们还可以通过" class="headerlink" title="通过为session 添加MessageHandler消息处理器来接收消息，当采用注解方式定义Endpoint时,我们还可以通过"></a>通过为session 添加MessageHandler消息处理器来接收消息，当采用注解方式定义Endpoint时,我们还可以通过</h5><h5 id="OnMessage注解指定接收消息的方法。"><a href="#OnMessage注解指定接收消息的方法。" class="headerlink" title="@OnMessage注解指定接收消息的方法。"></a>@OnMessage注解指定接收消息的方法。</h5><h4 id="服务端如何推送数据给客户端呢"><a href="#服务端如何推送数据给客户端呢" class="headerlink" title="服务端如何推送数据给客户端呢?"></a>服务端如何推送数据给客户端呢?</h4><h5 id="发送消息则由RemoteErpdpoint-完成，其实例由-Session-维护，根据使用情况，-我们可以通过"><a href="#发送消息则由RemoteErpdpoint-完成，其实例由-Session-维护，根据使用情况，-我们可以通过" class="headerlink" title="发送消息则由RemoteErpdpoint 完成，其实例由 Session 维护，根据使用情况， 我们可以通过"></a>发送消息则由RemoteErpdpoint 完成，其实例由 Session 维护，根据使用情况， 我们可以通过</h5><h5 id="Session-getBasicRemote获取同步消息发送的实例，然后调用其-sendXxX-方法就可以发送消息，可以通过"><a href="#Session-getBasicRemote获取同步消息发送的实例，然后调用其-sendXxX-方法就可以发送消息，可以通过" class="headerlink" title="Session. getBasicRemote获取同步消息发送的实例，然后调用其 sendXxX ()方法就可以发送消息，可以通过"></a>Session. getBasicRemote获取同步消息发送的实例，然后调用其 sendXxX ()方法就可以发送消息，可以通过</h5><h5 id="Session-getAsyncRemote获取异步消息发送实例。"><a href="#Session-getAsyncRemote获取异步消息发送实例。" class="headerlink" title="Session. getAsyncRemote获取异步消息发送实例。"></a>Session. getAsyncRemote获取异步消息发送实例。</h5><h3 id="2-2、实验流程"><a href="#2-2、实验流程" class="headerlink" title="2.2、实验流程"></a>2.2、实验流程</h3><p><img src="/2022/04/06/WebSocket%E5%85%A5%E9%97%A8/image-20220408124332502.png"></p><h3 id="2-3、消息格式"><a href="#2-3、消息格式" class="headerlink" title="2.3、消息格式"></a>2.3、消息格式</h3><ul><li><p><strong>客户端 –&gt; 服务器</strong></p><p>{“toName”:”张三”，”message”:”你好”}</p></li><li><p><strong>服务端 –&gt; 客户端</strong></p><ul><li>系统消息格式：{“isSystem”：true，”fromName”：null，”message”：[“李四”，”王五”]}</li><li>推送给某一个的消息格式: { “isSystem” : false, “ fromName”: “张三”, “message”: “你好”}</li></ul></li></ul><h3 id="2-4、功能实现"><a href="#2-4、功能实现" class="headerlink" title="2.4、功能实现"></a>2.4、功能实现</h3><h4 id="2-4-1-创建项目，导入相关jar包的坐标"><a href="#2-4-1-创建项目，导入相关jar包的坐标" class="headerlink" title="2.4.1 创建项目，导入相关jar包的坐标"></a>2.4.1 创建项目，导入相关jar包的坐标</h4>]]></content>
      
      
      
        <tags>
            
            <tag> java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis入门</title>
      <link href="/2022/04/04/Redis%E5%85%A5%E9%97%A8/"/>
      <url>/2022/04/04/Redis%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis入门："><a href="#Redis入门：" class="headerlink" title="Redis入门："></a>Redis入门：</h2><h3 id="1-NoSQL数据库简介。"><a href="#1-NoSQL数据库简介。" class="headerlink" title="1.NoSQL数据库简介。"></a>1.NoSQL数据库简介。</h3><h4 id="1-1-技术发展"><a href="#1-1-技术发展" class="headerlink" title="1.1.技术发展"></a>1.1.技术发展</h4><h5 id="技术的分类："><a href="#技术的分类：" class="headerlink" title="技术的分类："></a>技术的分类：</h5><ul><li><strong>1、解决功能性的问题: Java、Jsp、 RDBMS、Tomcat、 HTML、 Linux、 JDBC、 SVN</strong></li><li><strong>2、解决扩展性的问题: Struts、Spring、 SpringMVC、 Hibernate、 Mybatisu</strong></li><li><strong>3、解决性能的问题: NoSQL、Java 线程、Hadoop、 Nginx、 MQ、ElasticSearch</strong></li></ul><h4 id="1-2-NoSQL数据库"><a href="#1-2-NoSQL数据库" class="headerlink" title="1.2. NoSQL数据库"></a>1.2. NoSQL数据库</h4><h5 id="1-2-1-NoSQL数据库概述"><a href="#1-2-1-NoSQL数据库概述" class="headerlink" title="1.2.1. NoSQL数据库概述"></a>1.2.1. NoSQL数据库概述</h5><h5 id="NoSQL-NoSQL-x3D-Not-Only-SQL-意即“不仅仅是SQL”-泛指非关系型的数据库。"><a href="#NoSQL-NoSQL-x3D-Not-Only-SQL-意即“不仅仅是SQL”-泛指非关系型的数据库。" class="headerlink" title="NoSQL(NoSQL &#x3D; Not Only SQL ),意即“不仅仅是SQL” , 泛指非关系型的数据库。"></a>NoSQL(NoSQL &#x3D; Not Only SQL ),意即“不仅仅是SQL” , 泛指非关系型的数据库。</h5><h5 id="NoSQL不依赖业务逻辑方式存储-而以简单的key-value模式存储。因此大大的增加了"><a href="#NoSQL不依赖业务逻辑方式存储-而以简单的key-value模式存储。因此大大的增加了" class="headerlink" title="NoSQL不依赖业务逻辑方式存储,而以简单的key-value模式存储。因此大大的增加了"></a>NoSQL不依赖业务逻辑方式存储,而以简单的key-value模式存储。因此大大的增加了</h5><h5 id="数据库的扩展能力。"><a href="#数据库的扩展能力。" class="headerlink" title="数据库的扩展能力。"></a>数据库的扩展能力。</h5><ul><li><strong>不遵循 SQL标准。</strong></li><li><strong>不支持 ACID。</strong></li><li><strong>远超于SQL的性能。</strong></li></ul><h5 id="1-2-2-NoSQL适用场景。"><a href="#1-2-2-NoSQL适用场景。" class="headerlink" title="1.2.2.NoSQL适用场景。"></a>1.2.2.NoSQL适用场景。</h5><ul><li><strong>对数据高并发的读写。</strong></li><li><strong>海量数据的读写。</strong></li><li><strong>对数据高可扩 展性的。</strong></li></ul><h5 id="1-2-3-NoSQL不适用场景"><a href="#1-2-3-NoSQL不适用场景" class="headerlink" title="1.2.3.NoSQL不适用场景"></a>1.2.3.NoSQL不适用场景</h5><ul><li><strong>需要事务支持。</strong></li><li><strong>基于 sql的结构化查询存储,处理复杂的关系，需要即席查询。</strong></li><li><strong><font color="red">(用不着sqI的和用了sqI也不行的情况,请考虑用NoSql)。</font></strong></li></ul><h5 id="1-2-4-Memcache"><a href="#1-2-4-Memcache" class="headerlink" title="1.2.4.Memcache,"></a>1.2.4.Memcache,</h5><ul><li><strong>很早 出现的NoSq1数据库.</strong></li><li><strong>数据都在内存中， 一般不持久化</strong></li><li><strong>支持简单的key-value模式，支持类型单一。</strong></li><li><strong>一般是作为缓存数据库辅助持久化的数据库。</strong></li></ul><h5 id="1-2-5-Redis"><a href="#1-2-5-Redis" class="headerlink" title="1.2.5.Redis"></a>1.2.5.Redis</h5><ul><li><strong>几乎覆盖了Memcached的绝大部分功能。</strong></li><li><strong>数据都在内存中，支持持久化，主要用作备份恢复</strong></li><li><strong>除了支持简单的key-value模式，还支持多种数据结构的存储，比如list、 set、 hash、 zset等。</strong></li><li><strong>一般是作为缓存数据库辅助持久化的数据库。</strong></li></ul><h5 id="1-2-6-MongoDB"><a href="#1-2-6-MongoDB" class="headerlink" title="1.2.6. MongoDB"></a>1.2.6. MongoDB</h5><ul><li><strong>高性能、 开源、模式自由(schema free) 的文档型数o<br>据库。</strong></li><li><strong>数据都在内存中，如果内存不足， 把不常用的数据保<br>存到硬盘。</strong></li><li><strong>虽然是key-value 模式，但是对value (尤其是<br>json)提供了丰富的查询功能</strong></li><li><strong>支持二进制数据及太型对象。</strong></li><li><strong>可以根据数据的特点替代RDBMS，成为独立的数据库。或者配合RDBMS，存储特定的数据。</strong></li></ul><h5 id="1-3-1-行式数据库"><a href="#1-3-1-行式数据库" class="headerlink" title="1.3.1. 行式数据库"></a>1.3.1. 行式数据库</h5><h5 id="1-3-2-列式数据库"><a href="#1-3-2-列式数据库" class="headerlink" title="1.3.2.列式数据库"></a>1.3.2.列式数据库</h5><h3 id="2-Redis概述安装"><a href="#2-Redis概述安装" class="headerlink" title="2.Redis概述安装"></a>2.Redis概述安装</h3><ul><li><strong>➢Redis是一个开源的key-value存储系统。</strong></li><li><strong>➢和Memcached类似,它支持存储的value类型相对更多,包括<font color="red">string</font>(字符串)、<br><font color="red">list</font>(链表)、<font color="red">set</font>(集合)、<font color="red">zset</font>(sorted set –有序集合)和<font color="red">hash</font> (哈希类型)。</strong></li><li><strong>➢这些数据类型都支持 push&#x2F;pop、add&#x2F;remove 及取交集并集和差集及更丰富的操作，<br>而且这些操作都是<font color="red">原子性</font>的。</strong></li><li><strong>➢在此基础 上, Redis支持各种不同方式的<font color="red">排序</font>。</strong></li><li><strong>➢与memcached - -样,为了保证效率,数据都是缓存在内存中。</strong></li><li><strong>➢区别的是 Redis会<font color="red">周期性</font>的把更新的<font color="red">数据写入磁盘</font>或者把修改操作写 入追加的记<br>文件。</strong></li><li><strong>➢并且在此基础 上实现了<font color="red">master-slave(主从)</font>同步。</strong></li></ul><h5 id="2-2-3-安装目录：-x2F-usr-x2F-local-x2F-bin"><a href="#2-2-3-安装目录：-x2F-usr-x2F-local-x2F-bin" class="headerlink" title="2.2.3.  安装目录：&#x2F;usr&#x2F;local&#x2F;bin"></a>2.2.3.  安装目录：<font color="red">&#x2F;usr&#x2F;local&#x2F;bin</font></h5><ul><li><strong>查看默认安装目录：</strong></li><li><strong>redis-benchmark:性能测试工具,可以在自己本子运行,看看自己本子性能如何</strong></li><li><strong>redis-check-aof :修复有问题的AOF文件, rdb和aof后面讲。</strong></li><li><strong>redis-check-dump :修复有问题的dump.rdb文件。</strong></li><li><strong>redis-sentinel : Redis集群使用。</strong></li><li><strong><font color="red">redis-server </font>: Redis服务器启动命令。</strong></li><li><strong><font color="red">redis-cli</font>：客户端,操作入口。</strong></li></ul><h4 id="Redis介绍相关知识"><a href="#Redis介绍相关知识" class="headerlink" title="Redis介绍相关知识:"></a>Redis介绍相关知识:</h4><ul><li><strong>端口6379从何而来。  Alessia Merzs</strong></li><li><strong>默认16个数据库，类似数组下标从0开始,初始<font color="red">默认使用0号库.</font></strong></li><li><strong>使用命令select  <dbid>  来切换数据库。如: select 8。</dbid></strong></li><li><strong>统一密码管理,所有库同样密码。</strong></li><li><strong><font color="red">dbsize</font>查看当前数据库的key的数量。</strong></li><li><strong><font color="red">flushdb清空当前库。</font></strong></li><li><strong><font color="red">flushall通杀全部库。</font></strong></li></ul><h4 id="Redis是单线程-多路IO复用技术。"><a href="#Redis是单线程-多路IO复用技术。" class="headerlink" title="Redis是单线程+多路IO复用技术。"></a>Redis是单线程+多路IO复用技术。</h4><h5 id="多路复用是指使用一个线程来检查多个文件描述符-Socket-的就绪状态-比如调用select和poll函数-传入多个文件描述符-如果有一个文件描述符就绪-则返回-否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行-也可以启动线程执行-比如使用线程池-。"><a href="#多路复用是指使用一个线程来检查多个文件描述符-Socket-的就绪状态-比如调用select和poll函数-传入多个文件描述符-如果有一个文件描述符就绪-则返回-否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行-也可以启动线程执行-比如使用线程池-。" class="headerlink" title="多路复用是指使用一个线程来检查多个文件描述符( Socket )的就绪状态,比如调用select和poll函数,传入多个文件描述符,如果有一个文件描述符就绪,则返回,否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行,也可以启动线程执行(比如使用线程池)。"></a>多路复用是指使用一个线程来检查多个文件描述符( Socket )的就绪状态,比如调用select和poll函数,传入多个文件描述符,如果有一个文件描述符就绪,则返回,否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行,也可以启动线程执行(比如使用线程池)。</h5><h5 id="串行Vs多线程-锁-memcached-Vs单线程-多路IO复用-Redis"><a href="#串行Vs多线程-锁-memcached-Vs单线程-多路IO复用-Redis" class="headerlink" title="串行Vs多线程+锁 ( memcached ) Vs单线程+ 多路IO复用(Redis)"></a>串行Vs多线程+锁 ( memcached ) Vs单线程+ 多路IO复用(Redis)</h5><h5 id="与Memcache三点不同-支持多数据类型-支持持久化，单线程-多路IO复用-。"><a href="#与Memcache三点不同-支持多数据类型-支持持久化，单线程-多路IO复用-。" class="headerlink" title="(与Memcache三点不同:支持多数据类型,支持持久化，单线程+多路IO复用)。"></a>(与Memcache三点不同:支持多数据类型,支持持久化，单线程+多路IO复用)。</h5><h5 id="单线程-多路IO复用"><a href="#单线程-多路IO复用" class="headerlink" title="单线程+多路IO复用"></a>单线程+多路IO复用</h5><h5 id="买票例子"><a href="#买票例子" class="headerlink" title="买票例子"></a>买票例子</h5><h4 id="常用五大数据类型："><a href="#常用五大数据类型：" class="headerlink" title="常用五大数据类型："></a>常用五大数据类型：</h4><ul><li><strong>Redis字符串（String）</strong></li><li><strong>Redis列表（List）</strong></li><li><strong>Redis集合（Set）</strong></li><li><strong>Redis哈希（Hash）</strong></li><li><strong>Redis有序集合Zset</strong></li></ul><h3 id="3-1-Redis键-key"><a href="#3-1-Redis键-key" class="headerlink" title="3.1. Redis键(key)"></a>3.1. Redis键(key)</h3><ul><li>*<em>查看当前库所有key (匹配 : keys <em>1)</em></em></li></ul><pre class=" language-bash"><code class="language-bash">keys *</code></pre><ul><li><strong>判断某个key是否存在</strong></li></ul><pre class=" language-bash"><code class="language-bash">exists key</code></pre><ul><li><strong>查看你的key是什么类型。</strong></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">type</span> key</code></pre><ul><li><strong>删除指定的key数据~</strong></li></ul><pre class=" language-bash"><code class="language-bash">del key</code></pre><ul><li><strong><font color="red">根据value选择非阻塞删除</font></strong></li></ul><pre class=" language-bash"><code class="language-bash">unlink key</code></pre><ul><li><strong>仅将keys从keyspace元数据中删除,真正的删除会在后续异步操作。</strong></li><li><strong>10 秒钟:为给定的key设置过期时间。</strong></li></ul><pre class=" language-bash"><code class="language-bash">expire key 10 </code></pre><ul><li><strong>查看还有多少秒过期, -1表示永不过期, -2表示已过期。</strong></li></ul><pre class=" language-bash"><code class="language-bash">ttl key</code></pre><ul><li><strong>select命令切换数据库.</strong></li><li><strong>dbsize查看当前数据库的key的数量</strong></li><li><strong>flushdb清空当前库。</strong></li><li><strong>flushall通杀全部库。</strong></li></ul><h3 id="3-2-Redis字符串-String"><a href="#3-2-Redis字符串-String" class="headerlink" title="3.2. Redis字符串(String)"></a>3.2. Redis字符串(String)</h3><h4 id="3-2-1-简介。"><a href="#3-2-1-简介。" class="headerlink" title="3.2.1.  简介。"></a>3.2.1.  简介。</h4><ul><li><strong>String是Redis最基本的类型,你可以理解成与Memcached-模- 样的类型,一个key<br>对应一个value。</strong></li><li><strong>String类型是二进制安全的。 意味着Redis的string可以包含任何数据。比如jpg图片<br>或者序列化的对象。</strong></li><li><strong>String类型是Redis最基本的数据类型,一个Redis中字符串value最多可以是512Ms</strong></li></ul><h4 id="3-2-2-常用命令"><a href="#3-2-2-常用命令" class="headerlink" title="3.2.2. 常用命令"></a>3.2.2. 常用命令</h4><h4 id="set-添加键值对。"><a href="#set-添加键值对。" class="headerlink" title="set  添加键值对。"></a>set <key> <value>添加键值对。</value></key></h4><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> key value <span class="token punctuation">[</span>EX seconds<span class="token operator">|</span>PX milliseconds KEEPTTL<span class="token punctuation">]</span> <span class="token punctuation">[</span>NX <span class="token operator">|</span>XX<span class="token punctuation">]</span>.</code></pre><ul><li>*<strong>NX:当数据库中key不存在时，可以将key-value添加数据库,</strong></li><li><strong>XX:当数据库中key存在时，可以将key-value添加数据库，与NX参数互斥。</strong></li><li><strong>EX: key的超时秒数~</strong></li><li><strong>PX: key的超时毫秒数，与EX 互斥。</strong></li></ul><pre class=" language-bash"><code class="language-bash">get <span class="token operator">&lt;</span>key<span class="token operator">></span> 查询对应键值~append <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span>value<span class="token operator">></span>将给定的<span class="token operator">&lt;</span>value<span class="token operator">></span>追加到原值的末尾strlen <span class="token operator">&lt;</span>key<span class="token operator">></span> 获得值的长度:setnx <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span>value<span class="token operator">></span>只有在key不存在时设置 key的值incr <span class="token operator">&lt;</span>key<span class="token operator">></span>    将key中储存的数字值增1。    只能对数字值操作,如果为空,新增值为1decr <span class="token operator">&lt;</span>key<span class="token operator">></span>    将key中储存的数字值减1 incrby / decrby <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span>步长<span class="token operator">></span>将key中储存的数字值增减。自定义步长</code></pre><h5 id="原子性："><a href="#原子性：" class="headerlink" title="原子性："></a>原子性：</h5><h5 id="所谓原子操作是指不会被线程调度机制打断的操作。"><a href="#所谓原子操作是指不会被线程调度机制打断的操作。" class="headerlink" title="所谓原子操作是指不会被线程调度机制打断的操作。"></a>所谓原子操作是指不会被线程调度机制打断的操作。</h5><pre class=" language-bash"><code class="language-bash">这种操作一旦开始 ,就-直运行到结束,中间不会有任何context switch <span class="token punctuation">(</span>切换到另一个线程<span class="token punctuation">)</span>。<span class="token punctuation">(</span>1<span class="token punctuation">)</span>在单线程中，能够在单条指令中完成的操作都可以认为是"原子操作”,因为中断只能发生于指令之间。<span class="token punctuation">(</span>2<span class="token punctuation">)</span>在多线程中,不能被其它进程<span class="token punctuation">(</span>线程<span class="token punctuation">)</span>打断的操作就叫原子操作。Redis单命令的原子性主要得益于Redis的单线程。</code></pre><h5 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h5><pre class=" language-bash"><code class="language-bash">java中的++是否是原子操作?i<span class="token operator">=</span>0<span class="token punctuation">;</span>两个线程分别对进行++ 100次，值是多少?</code></pre><pre class=" language-bash"><code class="language-bash">（1）java属于多线程的操作，所以java的i++，不是原子操作。</code></pre><p><strong>(2)</strong></p><table><thead><tr><th>i &#x3D; 0</th><th>i &#x3D; 0</th></tr></thead><tbody><tr><td><strong>i ++</strong></td><td></td></tr><tr><td><strong>i &#x3D; 99</strong></td><td></td></tr><tr><td></td><td><strong>i ++</strong></td></tr><tr><td></td><td><strong>i &#x3D; 1</strong></td></tr><tr><td></td><td></td></tr><tr><td><strong>i &#x3D; 1</strong></td><td><strong>i++</strong></td></tr><tr><td></td><td><strong>i &#x3D; 100</strong></td></tr></tbody></table><h5 id="值为2-200"><a href="#值为2-200" class="headerlink" title="值为2~200"></a>值为2~200</h5><h5 id="同时设置一个或多-个key-value对。"><a href="#同时设置一个或多-个key-value对。" class="headerlink" title="同时设置一个或多 个key-value对。"></a>同时设置一个或多 个key-value对。</h5><pre class=" language-bash"><code class="language-bash">mset <span class="token operator">&lt;</span>key1<span class="token operator">></span> <span class="token operator">&lt;</span>value1<span class="token operator">></span> <span class="token operator">&lt;</span>key2<span class="token operator">></span> <span class="token operator">&lt;</span>value2<span class="token operator">></span> <span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><h5 id="同时获取一个或多个value。"><a href="#同时获取一个或多个value。" class="headerlink" title="同时获取一个或多个value。"></a>同时获取一个或多个value。</h5><pre class=" language-bash"><code class="language-bash">mget <span class="token operator">&lt;</span>key1<span class="token operator">></span> <span class="token operator">&lt;</span>key2<span class="token operator">></span> <span class="token operator">&lt;</span>key3<span class="token operator">></span> <span class="token punctuation">..</span><span class="token punctuation">..</span>.</code></pre><h5 id="同时设置一个或多个key-value对-当且仅当所有给定key都不存在。"><a href="#同时设置一个或多个key-value对-当且仅当所有给定key都不存在。" class="headerlink" title="同时设置一个或多个key-value对,当且仅当所有给定key都不存在。"></a>同时设置一个或多个key-value对,当且仅当所有给定key都不存在。</h5><pre class=" language-bash"><code class="language-bash">msetnx <span class="token operator">&lt;</span>key1<span class="token operator">></span> <span class="token operator">&lt;</span>value1<span class="token operator">></span> <span class="token operator">&lt;</span>key2<span class="token operator">></span> <span class="token operator">&lt;</span>value2<span class="token operator">></span> <span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><h5 id="原子性-有一个失败则都失败"><a href="#原子性-有一个失败则都失败" class="headerlink" title="原子性,有一个失败则都失败"></a><font color="red">原子性,有一个失败则都失败</font></h5><h5 id="获得值的范围-类似java中的substring-前包-后包"><a href="#获得值的范围-类似java中的substring-前包-后包" class="headerlink" title="获得值的范围,类似java中的substring,前包,后包"></a>获得值的范围,类似java中的substring,前包,后包</h5><pre class=" language-bash"><code class="language-bash">getrange <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span>起始位置<span class="token operator">></span> <span class="token operator">&lt;</span>结束位置<span class="token operator">></span></code></pre><h5 id="用覆写所储存的字符串值-从-lt-起始位置-gt-开始-索引从0开始-。"><a href="#用覆写所储存的字符串值-从-lt-起始位置-gt-开始-索引从0开始-。" class="headerlink" title="用覆写所储存的字符串值,从&lt;起始位置&gt;开始(索引从0开始)。"></a>用<value>覆写<key>所储存的字符串值,从&lt;起始位置&gt;开始(索引从0开始)。</key></value></h5><pre class=" language-bash"><code class="language-bash">setrange <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span>起始位置<span class="token operator">></span> <span class="token operator">&lt;</span>value<span class="token operator">></span></code></pre><h5 id="设置键值的同时-设置过期时间-单位秒"><a href="#设置键值的同时-设置过期时间-单位秒" class="headerlink" title="设置键值的同时,设置过期时间,单位秒"></a>设置键值的同时,设置过期时间,单位秒</h5><pre class=" language-bash"><code class="language-bash">setex <span class="token operator">&lt;</span> key<span class="token operator">></span> <span class="token operator">&lt;</span>过期时间<span class="token operator">></span> <span class="token operator">&lt;</span>value<span class="token operator">></span> </code></pre><h5 id="以新换旧-设置了新值同时获得旧值"><a href="#以新换旧-设置了新值同时获得旧值" class="headerlink" title="以新换旧,设置了新值同时获得旧值"></a>以新换旧,设置了新值同时获得旧值</h5><pre class=" language-bash"><code class="language-bash">getset <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span>value<span class="token operator">></span></code></pre><h4 id="3-2-3-数据结构"><a href="#3-2-3-数据结构" class="headerlink" title="3.2.3.  数据结构"></a>3.2.3.  数据结构</h4><h5 id="String的数据结构为简单动态字符串-Simple-Dynamic-String-缩写SDS-。是可以修改的字符串-内部结构实现上类似于Java的ArrayList-采用预分配冗余空间的方式来减少内存的频繁分配"><a href="#String的数据结构为简单动态字符串-Simple-Dynamic-String-缩写SDS-。是可以修改的字符串-内部结构实现上类似于Java的ArrayList-采用预分配冗余空间的方式来减少内存的频繁分配" class="headerlink" title="String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串,内部结构实现上类似于Java的ArrayList ,采用预分配冗余空间的方式来减少内存的频繁分配."></a>String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串,内部结构实现上类似于Java的ArrayList ,采用预分配冗余空间的方式来减少内存的频繁分配.</h5><h5 id="如图中所示-内部为当前字符串实际分配的空间capacity-般要高于实际字符串长度len。当字符串长度小于1M时-扩容都是加倍现有的空间-如果超过1M-扩容时一-次只会多扩1M的空间。需要注意的是字符串最大长度为512M。"><a href="#如图中所示-内部为当前字符串实际分配的空间capacity-般要高于实际字符串长度len。当字符串长度小于1M时-扩容都是加倍现有的空间-如果超过1M-扩容时一-次只会多扩1M的空间。需要注意的是字符串最大长度为512M。" class="headerlink" title="如图中所示,内部为当前字符串实际分配的空间capacity -般要高于实际字符串长度len。当字符串长度小于1M时,扩容都是加倍现有的空间,如果超过1M,扩容时一-次只会多扩1M的空间。需要注意的是字符串最大长度为512M。"></a>如图中所示,内部为当前字符串实际分配的空间capacity -般要高于实际字符串长度len。当字符串长度小于1M时,扩容都是加倍现有的空间,如果超过1M,扩容时一-次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</h5><h3 id="3-3-Redis-列表（List）"><a href="#3-3-Redis-列表（List）" class="headerlink" title="3.3.Redis 列表（List）"></a>3.3.Redis 列表（List）</h3><h4 id="3-3-1-简介"><a href="#3-3-1-简介" class="headerlink" title="3.3.1 简介"></a>3.3.1 简介</h4><h5 id="单键多值"><a href="#单键多值" class="headerlink" title="单键多值"></a>单键多值</h5><h5 id="Redis列表是简单的字符串列表-按照插入顺序排序。你可以添加一个元素到列表的头部-左边-或者尾部-右边-。"><a href="#Redis列表是简单的字符串列表-按照插入顺序排序。你可以添加一个元素到列表的头部-左边-或者尾部-右边-。" class="headerlink" title="Redis列表是简单的字符串列表,按照插入顺序排序。你可以添加一个元素到列表的头部(左边)或者尾部(右边)。"></a>Redis列表是简单的字符串列表,按照插入顺序排序。你可以添加一个元素到列表的头部(左边)或者尾部(右边)。</h5><h5 id="它的底层实际是个双向链表-对两端的操作性能很高-通过索引下标的操作中间的节点性能会较差。"><a href="#它的底层实际是个双向链表-对两端的操作性能很高-通过索引下标的操作中间的节点性能会较差。" class="headerlink" title="它的底层实际是个双向链表,对两端的操作性能很高,通过索引下标的操作中间的节点性能会较差。"></a>它的底层实际是个双向链表,对两端的操作性能很高,通过索引下标的操作中间的节点性能会较差。</h5><h4 id="3-3-2-常用命令"><a href="#3-3-2-常用命令" class="headerlink" title="3.3.2.   常用命令."></a>3.3.2.   常用命令.</h4><h5 id="lpush-x2F-rpush-…-从左边-x2F-右边插入一个或多个值。"><a href="#lpush-x2F-rpush-…-从左边-x2F-右边插入一个或多个值。" class="headerlink" title="lpush&#x2F;rpush.    … 从左边&#x2F;右边插入一个或多个值。"></a>lpush&#x2F;rpush. <key><value1> <value2> <value3> … 从左边&#x2F;右边插入一个或多个值。</value3></value2></value1></key></h5><h5 id="lpop-x2F-rpop-从左边-x2F-右边吐出一个值。-值在键在-值光键亡。"><a href="#lpop-x2F-rpop-从左边-x2F-右边吐出一个值。-值在键在-值光键亡。" class="headerlink" title="lpop&#x2F;rpop  从左边&#x2F;右边吐出一个值。 值在键在,值光键亡。"></a>lpop&#x2F;rpop <key> 从左边&#x2F;右边吐出一个值。 值在键在,值光键亡。</key></h5><pre class=" language-bash"><code class="language-bash">127.0.0.1 :6379<span class="token operator">></span> lpush k1 v1 v2 v3<span class="token punctuation">(</span> integer<span class="token punctuation">)</span> 3127 .0.0.1 :6379<span class="token operator">></span> lrange k1 0 -11<span class="token punctuation">)</span> <span class="token string">"v3"</span>2<span class="token punctuation">)</span> <span class="token string">"v2"</span>3<span class="token punctuation">)</span> <span class="token string">"v1 "</span>rpoplpush <span class="token operator">&lt;</span>key1<span class="token operator">></span> <span class="token operator">&lt;</span>key2<span class="token operator">></span>从<span class="token operator">&lt;</span>key1<span class="token operator">></span>列表右边吐出一个值,插到<span class="token operator">&lt;</span>key2<span class="token operator">></span>列表左边。。</code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1 :6379<span class="token operator">></span> rpush k2 v1 v2 v3 <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127 .0.0.1 :6379<span class="token operator">></span> 1 range k2 0 -11<span class="token punctuation">)</span> <span class="token string">"v1"</span>2<span class="token punctuation">)</span> <span class="token string">"v2"</span> 3<span class="token punctuation">)</span> <span class="token string">"v3"</span>rpoplpush <span class="token operator">&lt;</span>key1<span class="token operator">></span> <span class="token operator">&lt;</span>key2<span class="token operator">></span>从<span class="token operator">&lt;</span>key1<span class="token operator">></span>列表右边吐出一个值,插到<span class="token operator">&lt;</span>key2<span class="token operator">></span>列表左边。</code></pre><h5 id="lrange-kstop-gt"><a href="#lrange-kstop-gt" class="headerlink" title="lrange   kstop&gt;"></a>lrange <key> <start> kstop&gt;</start></key></h5><h5 id="按照索引下标获得元素-从左到右-。"><a href="#按照索引下标获得元素-从左到右-。" class="headerlink" title="按照索引下标获得元素(从左到右)。"></a>按照索引下标获得元素(从左到右)。</h5><h5 id="lrange-mylist-0-1-0左边第一个-1右边第一个，-0-1表示获取所有-。"><a href="#lrange-mylist-0-1-0左边第一个-1右边第一个，-0-1表示获取所有-。" class="headerlink" title="lrange mylist 0 -1 0左边第一个, -1右边第一个，( 0-1表示获取所有)。"></a>lrange mylist 0 -1 0左边第一个, -1右边第一个，( 0-1表示获取所有)。</h5><h5 id="lindex-按照索引下标获得元素-从左到右-。"><a href="#lindex-按照索引下标获得元素-从左到右-。" class="headerlink" title="lindex  按照索引下标获得元素(从左到右)。"></a>lindex <key> <index>按照索引下标获得元素(从左到右)。</index></key></h5><h5 id="llen-获得列表长度。"><a href="#llen-获得列表长度。" class="headerlink" title="llen 获得列表长度。"></a>llen <key>获得列表长度。</key></h5><pre class=" language-bash"><code class="language-bash">127.0.0.1 :6379<span class="token operator">></span> lrange k2 0 -11<span class="token punctuation">)</span> <span class="token string">"v1"</span>2<span class="token punctuation">)</span> <span class="token string">"v11”3) "</span>v12<span class="token string">"4) "</span>v13"</code></pre><pre><code>127.0.0.1 :6379&gt; lindex k2 0&quot;v1 &quot;127.0.0.1 :6379&gt; 1 index k2 2 &quot;v12&quot; </code></pre><h5 id="linsert-before-在的后面插入插入值。"><a href="#linsert-before-在的后面插入插入值。" class="headerlink" title="linsert  before  在的后面插入插入值。"></a>linsert <key> before <value> <newvalue>在<value>的后面插入<newvalue>插入值。</newvalue></value></newvalue></value></key></h5><h5 id="Irem-从左边删除n个value-从左到右"><a href="#Irem-从左边删除n个value-从左到右" class="headerlink" title="Irem   从左边删除n个value(从左到右)"></a>Irem <key> <n> <value>从左边删除n个value(从左到右)</value></n></key></h5><h5 id="lset-将列表key下标为index的值替换成value"><a href="#lset-将列表key下标为index的值替换成value" class="headerlink" title="lset  将列表key下标为index的值替换成value."></a>lset<key> <index> <value>将列表key下标为index的值替换成value.</value></index></key></h5><pre class=" language-bash"><code class="language-bash">127 .0.0.1 :6379<span class="token operator">></span> linsert k2 before <span class="token string">"v11"</span> <span class="token string">"newv11"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 5 127.0.0.1 :6379<span class="token operator">></span> L range k2 0 -11<span class="token punctuation">)</span> <span class="token string">"v1"</span>2<span class="token punctuation">)</span> <span class="token string">"newv11"</span>3<span class="token punctuation">)</span> <span class="token string">"v11"</span>4<span class="token punctuation">)</span> <span class="token string">"v12"</span>5<span class="token punctuation">)</span> <span class="token string">"v13"</span></code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1 :6379<span class="token operator">></span> Lrem k2 2 <span class="token string">"newv11 "</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1 :6379<span class="token operator">></span> 1 range k2 0 -11<span class="token punctuation">)</span> <span class="token string">"v1"</span>2<span class="token punctuation">)</span> <span class="token string">"v11"</span>3<span class="token punctuation">)</span> <span class="token string">"v12"</span>4<span class="token punctuation">)</span> <span class="token string">"newv11 "</span>5<span class="token punctuation">)</span> <span class="token string">"v13 "</span></code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> Lset k2 1 atguigu0K127.0.0.1 :6379<span class="token operator">></span> 1 range k2 0 -11<span class="token punctuation">)</span> <span class="token string">"v1"</span>2<span class="token punctuation">)</span> <span class="token string">"atg4gu"</span>3<span class="token punctuation">)</span> <span class="token string">"v12"</span>4<span class="token punctuation">)</span> <span class="token string">"newv11"</span>5<span class="token punctuation">)</span> <span class="token string">"v13"</span></code></pre><h4 id="3-3-3-数据结构。"><a href="#3-3-3-数据结构。" class="headerlink" title="3.3.3.数据结构。"></a>3.3.3.数据结构。</h4><h5 id="List的数据结构为快速链表quickList。"><a href="#List的数据结构为快速链表quickList。" class="headerlink" title="List的数据结构为快速链表quickList。"></a>List的数据结构为快速链表quickList。</h5><ul><li><strong>首先在列表元素较少的情况下会使用一块连续的内存存储,这个结构是ziplist ,也即是<br>压缩列表。</strong></li><li><strong>它将所有的元素紧挨着一起存储,分配的是一块连续的内存。</strong></li><li><strong>当数据量比较多的时候才会改成quicklist。</strong></li><li><strong>因为普通的链表需要的附加指针空间太大,会比较浪费空间。比如这个列表里存的只是int类型的数据,结构上还需要两个额外的指针prev和next。</strong></li><li><strong>Redis将链表和ziplist结合起来组成了quicklist。 也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能,又不会出现太大的空间冗余。</strong></li></ul><h3 id="3-4-Redis集合-Set"><a href="#3-4-Redis集合-Set" class="headerlink" title="3.4.Redis集合(Set)"></a>3.4.Redis集合(Set)</h3><h4 id="3-4-1-简介"><a href="#3-4-1-简介" class="headerlink" title="3.4.1   简介"></a>3.4.1   简介</h4><h5 id="Redis-set对外提供的功能与list-类似是一个列表的功能-特殊之处在于set是可以自动排重的-当你需要存储一个列表数据-又不希望出现重复数据时-set是一个很好的选择-并且set提供了判断某个成员是否在一个-set集合内的重要接口-这个也是list所不能提供的。。"><a href="#Redis-set对外提供的功能与list-类似是一个列表的功能-特殊之处在于set是可以自动排重的-当你需要存储一个列表数据-又不希望出现重复数据时-set是一个很好的选择-并且set提供了判断某个成员是否在一个-set集合内的重要接口-这个也是list所不能提供的。。" class="headerlink" title="Redis set对外提供的功能与list 类似是一个列表的功能 ,特殊之处在于set是可以自动排重的,当你需要存储一个列表数据 ,又不希望出现重复数据时, set是一个很好的选择,并且set提供了判断某个成员是否在一个 set集合内的重要接口,这个也是list所不能提供的。。"></a>Redis set对外提供的功能与list 类似是一个列表的功能 ,特殊之处在于set是可以<font color="red">自动排重</font>的,当你需要存储一个列表数据 ,又不希望出现重复数据时, set是一个很好的选择,并且set提供了判断某个成员是否在一个 set集合内的重要接口,这个也是list所不能提供的。。</h5><h5 id="Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表-所以添加-删除-查找的复杂度都是0-1-。"><a href="#Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表-所以添加-删除-查找的复杂度都是0-1-。" class="headerlink" title="Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表,所以添加,删除,查找的复杂度都是0(1)。"></a>Redis的Set是string类型的<font color="red">无序集合。它底层其实是一个value为null的hash表</font>,所以添加,删除,查找的复杂度都是0(1)。</h5><h5 id="一个算法-随着数据的增加-执行时间的长短-如果是0-1-数据增加-查找数据的时间不变。"><a href="#一个算法-随着数据的增加-执行时间的长短-如果是0-1-数据增加-查找数据的时间不变。" class="headerlink" title="一个算法,随着数据的增加,执行时间的长短,如果是0(1) ,数据增加,查找数据的时间不变。"></a>一个算法,随着数据的增加,执行时间的长短,如果是0(1) ,数据增加,查找数据的时间不变。</h5><h4 id="3-4-2-常用命令"><a href="#3-4-2-常用命令" class="headerlink" title="3.4.2.   常用命令"></a>3.4.2.   常用命令</h4><h5 id="sadd-…"><a href="#sadd-…" class="headerlink" title="sadd    ….."></a>sadd <key> <value1> <value2> …..</value2></value1></key></h5><h5 id="将一个或多个member元素加入到集合key中-已经存在的member元素将被忽略"><a href="#将一个或多个member元素加入到集合key中-已经存在的member元素将被忽略" class="headerlink" title="将一个或多个member元素加入到集合key中,已经存在的member元素将被忽略."></a>将一个或多个member元素加入到集合key中,已经存在的member元素将被忽略.</h5><h5 id="smembers取出该集合的所有值。"><a href="#smembers取出该集合的所有值。" class="headerlink" title="smembers取出该集合的所有值。"></a>smembers<key>取出该集合的所有值。</key></h5><pre class=" language-bash"><code class="language-bash">127.0.0.1 :6379<span class="token operator">></span> sadd k1 v1 v2 v3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1 :6379<span class="token operator">></span> smembers k11<span class="token punctuation">)</span> <span class="token string">"v3"</span>2<span class="token punctuation">)</span> <span class="token string">"v2"</span>3<span class="token punctuation">)</span> <span class="token string">"v1 "</span></code></pre><h5 id="sismember-判断集合是否为含有该值-有1-没有0"><a href="#sismember-判断集合是否为含有该值-有1-没有0" class="headerlink" title="sismember  判断集合是否为含有该值,有1 , 没有0."></a>sismember <key> <value>判断集合<key>是否为含有该<value>值,有1 , 没有0.</value></key></value></key></h5><h5 id="scard-返回该集合的元素个数。"><a href="#scard-返回该集合的元素个数。" class="headerlink" title="scard 返回该集合的元素个数。"></a>scard <key>返回该集合的元素个数。</key></h5><pre class=" language-bash"><code class="language-bash">127 .0.0.1 :6379<span class="token operator">></span> sismember k1 v1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span class="token operator">|</span> 127.0.0.1 :6379<span class="token operator">></span> sismember k1 v11<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0</code></pre><h5 id="srem-…-删除集合中的某个元素。"><a href="#srem-…-删除集合中的某个元素。" class="headerlink" title="srem    …. 删除集合中的某个元素。"></a>srem <key> <value1> <value2> …. 删除集合中的某个元素。</value2></value1></key></h5><p>127.0.0.1 :6379&gt; srem k1 v1 v2</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1 :6379<span class="token operator">></span> smembers k11<span class="token punctuation">)</span> <span class="token string">"v3 "</span></code></pre><h5 id="spop-随机从该集合中吐出-一个值。"><a href="#spop-随机从该集合中吐出-一个值。" class="headerlink" title="spop 随机从该集合中吐出-一个值。"></a>spop <key>随机从该集合中吐出-一个值。</key></h5><pre class=" language-bash"><code class="language-bash">127.0.0.1 :6379<span class="token operator">></span> sadd k2 v1 v2 v3 v4 <span class="token punctuation">(</span> integer<span class="token punctuation">)</span> 4127.0.0.1 :6379<span class="token operator">></span> spop k2<span class="token string">"v3 "</span>127.0.0.1 :6379<span class="token operator">></span> spop k2<span class="token string">"v1 "</span></code></pre><h5 id="srandmember-随机从该集合中取出n个值。不会从集合中删除。"><a href="#srandmember-随机从该集合中取出n个值。不会从集合中删除。" class="headerlink" title="srandmember  随机从该集合中取出n个值。不会从集合中删除。"></a>srandmember <key> <n>随机从该集合中取出n个值。不会从集合中删除。</n></key></h5><pre><code>127 .0.0.1 :6379&gt; s randmember k221) &quot;y4&quot;2) &quot;v2&quot; </code></pre><h5 id="smove-value把集合中一个值从一个集合移动到另一个集合。"><a href="#smove-value把集合中一个值从一个集合移动到另一个集合。" class="headerlink" title="smove  value把集合中一个值从一个集合移动到另一个集合。"></a>smove <source> <destination>value把集合中一个值从一个集合移动到另一个集合。</destination></h5><pre class=" language-bash"><code class="language-bash">127.0.0.1 :6379<span class="token operator">></span> sadd kl v1 v2 v3 <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127 .0.0.1 :6379<span class="token operator">></span> sadd k2 v3 v4 v5<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127 .0.0.1 :6379<span class="token operator">></span> smove k1 k2 v3 <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1 :6379<span class="token operator">></span> smembers k11<span class="token punctuation">)</span> <span class="token string">"v2"</span>2<span class="token punctuation">)</span> <span class="token string">"v1 "</span>127 .0.0.1 :6379<span class="token operator">></span> smembers k21<span class="token punctuation">)</span> <span class="token string">"v5"</span>2<span class="token punctuation">)</span> <span class="token string">"v3 "</span>3<span class="token punctuation">)</span> <span class="token string">"v4 "</span></code></pre><h5 id="sinter-返回两个集合的交集元素。"><a href="#sinter-返回两个集合的交集元素。" class="headerlink" title="sinter  返回两个集合的交集元素。"></a>sinter <key1> <key2>返回两个集合的交集元素。</key2></key1></h5><h5 id="sunion-返回两个集合的并集元素。"><a href="#sunion-返回两个集合的并集元素。" class="headerlink" title="sunion  返回两个集合的并集元素。"></a>sunion <key1> <key2>返回两个集合的并集元素。</key2></key1></h5><h5 id="sdiff-返回两个集合的差集元素-key1中的-不包含key2中的-。"><a href="#sdiff-返回两个集合的差集元素-key1中的-不包含key2中的-。" class="headerlink" title="sdiff  返回两个集合的差集元素(key1中的,不包含key2中的)。"></a>sdiff <key1> <key2>返回两个集合的差集元素(key1中的,不包含key2中的)。</key2></key1></h5><pre class=" language-bash"><code class="language-bash">127.0.0.1 :6379<span class="token operator">></span> sadd k3 v4 v6 v7<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127 .0.0.1 :6379<span class="token operator">></span> sinter k2 k31<span class="token punctuation">)</span><span class="token string">"v4 "</span>127.0.0.1 :6379<span class="token operator">></span> sunion k2 k31<span class="token punctuation">)</span> <span class="token string">"v3"</span>2<span class="token punctuation">)</span> <span class="token string">"v4"</span>3<span class="token punctuation">)</span> <span class="token string">"v7"</span>4<span class="token punctuation">)</span> <span class="token string">"v5"</span>4<span class="token punctuation">)</span> <span class="token string">"v6"</span>127.0.0.1 :6379<span class="token operator">></span> <span class="token function">sdiff</span> k2 k3 1<span class="token punctuation">)</span> <span class="token string">"v5"</span>2<span class="token punctuation">)</span> "v3“</code></pre><h4 id="3-5-3-数据结构"><a href="#3-5-3-数据结构" class="headerlink" title="3.5.3. 数据结构"></a>3.5.3. 数据结构</h4><h5 id="Hash类型对应的数据结构是两种-ziplist-压缩列表-，hashtable-哈希表-。当field-value长度较短且个数较少时，使用ziplist-否则使用hashtable。"><a href="#Hash类型对应的数据结构是两种-ziplist-压缩列表-，hashtable-哈希表-。当field-value长度较短且个数较少时，使用ziplist-否则使用hashtable。" class="headerlink" title="Hash类型对应的数据结构是两种: ziplist (压缩列表)，hashtable (哈希表)。当field-value长度较短且个数较少时，使用ziplist,否则使用hashtable。"></a>Hash类型对应的数据结构是两种: ziplist (压缩列表)，hashtable (哈希表)。当field-value长度较短且个数较少时，使用ziplist,否则使用hashtable。</h5><h3 id="3-6-Redis有序集合Zset-sorted-set"><a href="#3-6-Redis有序集合Zset-sorted-set" class="headerlink" title="3.6. Redis有序集合Zset(sorted set)"></a>3.6. Redis有序集合Zset(sorted set)</h3><h4 id="3-6-1-简介"><a href="#3-6-1-简介" class="headerlink" title="3.6.1.  简介"></a>3.6.1.  简介</h4><h5 id="Redis有序集合zset与普通集合set非常相似-是一个没有重复元素的字符串集合。"><a href="#Redis有序集合zset与普通集合set非常相似-是一个没有重复元素的字符串集合。" class="headerlink" title="Redis有序集合zset与普通集合set非常相似,是一个没有重复元素的字符串集合。"></a>Redis有序集合zset与普通集合set非常相似,是一个没有重复元素的字符串集合。</h5><h5 id="不同之处是有序集合的每个成员都关联了一个评分-score-这个评分-score-被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一-的-但是评分可以是重复了。"><a href="#不同之处是有序集合的每个成员都关联了一个评分-score-这个评分-score-被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一-的-但是评分可以是重复了。" class="headerlink" title="不同之处是有序集合的每个成员都关联了一个评分( score) ,这个评分( score )被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一-的 ,但是评分可以是重复了。"></a>不同之处是有序集合的每个成员都关联了一个评分( score) ,这个评分( score )被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一-的 ,但是评分可以是重复了。</h5><h5 id="因为元素是有序的-所以你也可以很快的根据评分-score-或者次序-position-来获取一个范围的元素。"><a href="#因为元素是有序的-所以你也可以很快的根据评分-score-或者次序-position-来获取一个范围的元素。" class="headerlink" title="因为元素是有序的,所以你也可以很快的根据评分( score )或者次序( position )来获取一个范围的元素。"></a>因为元素是有序的,所以你也可以很快的根据评分( score )或者次序( position )来获取一个范围的元素。</h5><h5 id="访问有序集合的中间元素也是非常快的-因此你能够使用有序集合作为一个没有重复成员的智能列表。"><a href="#访问有序集合的中间元素也是非常快的-因此你能够使用有序集合作为一个没有重复成员的智能列表。" class="headerlink" title="访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。"></a>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</h5><pre class=" language-bash"><code class="language-bash">zadd <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span>score1<span class="token operator">></span> <span class="token operator">&lt;</span>value1<span class="token operator">></span> <span class="token operator">&lt;</span>score2<span class="token operator">></span> <span class="token operator">&lt;</span>value2<span class="token operator">></span> <span class="token punctuation">..</span>.</code></pre><h5 id="将一个或多个member元素及其score值加入到有序集key当中。"><a href="#将一个或多个member元素及其score值加入到有序集key当中。" class="headerlink" title="将一个或多个member元素及其score值加入到有序集key当中。"></a>将一个或多个member元素及其score值加入到有序集key当中。</h5><pre class=" language-bash"><code class="language-bash">zrange <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span> start<span class="token operator">></span> <span class="token operator">&lt;</span>stop<span class="token operator">></span> <span class="token punctuation">[</span>WITHSCORES<span class="token punctuation">]</span></code></pre><h5 id="返回有序集key中，下标在之间的元素"><a href="#返回有序集key中，下标在之间的元素" class="headerlink" title="返回有序集key中，下标在之间的元素"></a>返回有序集key中，下标在<start><stop></stop>之间的元素</start></h5><h5 id="带WITHSCORES-可以让分数一起和值返回到结果集。"><a href="#带WITHSCORES-可以让分数一起和值返回到结果集。" class="headerlink" title="带WITHSCORES ,可以让分数一起和值返回到结果集。"></a>带WITHSCORES ,可以让分数一起和值返回到结果集。</h5><pre class=" language-bash"><code class="language-bash">127.0.0. 1:6379<span class="token operator">></span> zrange topn 0 - 11<span class="token punctuation">)</span> <span class="token string">"java"</span>2<span class="token punctuation">)</span> <span class="token string">"C++"</span><span class="token string">"3) "</span>mysql<span class="token string">"4) "</span>php”127.0.0.1:6379<span class="token operator">></span> zrange topn 0 -1 withscores1<span class="token punctuation">)</span> <span class="token string">"java2) ”200"</span>3<span class="token punctuation">)</span> ”C++<span class="token string">"4) "</span>300<span class="token string">"5) "</span>mysqL<span class="token string">"6) "</span>400<span class="token string">"7) ”php"</span>8<span class="token punctuation">)</span> <span class="token string">"500"</span></code></pre><h5 id="返回有序集key中-所有score值介于min和max之间-包括等于min或max-的成员。"><a href="#返回有序集key中-所有score值介于min和max之间-包括等于min或max-的成员。" class="headerlink" title="返回有序集key中,所有score值介于min和max之间(包括等于min或max )的成员。"></a>返回有序集key中,所有score值介于min和max之间(包括等于min或max )的成员。</h5><pre class=" language-bash"><code class="language-bash">zrangebyscore key minmax <span class="token punctuation">[</span>withscores<span class="token punctuation">]</span> <span class="token punctuation">[</span>limit offset count<span class="token punctuation">]</span></code></pre><h5 id="有序集成员按score值递增-从小到大-次序排列。"><a href="#有序集成员按score值递增-从小到大-次序排列。" class="headerlink" title="有序集成员按score值递增(从小到大)次序排列。"></a>有序集成员按score值递增(从小到大)次序排列。</h5><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> Z rangebyscore topn 300 5001<span class="token punctuation">)</span> <span class="token string">"c++"</span>2<span class="token punctuation">)</span> <span class="token string">"mysqL"</span>3<span class="token punctuation">)</span> <span class="token string">"php"</span></code></pre><pre class=" language-bash"><code class="language-bash">zrevrangebyscore key maxmin <span class="token punctuation">[</span>withscores<span class="token punctuation">]</span> <span class="token punctuation">[</span>limit offset count<span class="token punctuation">]</span></code></pre><h5 id="同上-改为从大到小排列。"><a href="#同上-改为从大到小排列。" class="headerlink" title="同上,改为从大到小排列。"></a>同上,改为从大到小排列。</h5><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> zrevrangebyscore topn 500 2001<span class="token punctuation">)</span>”php<span class="token string">"2) ”mysqL'3) C ++4)"</span>java<span class="token string">"127.0.0.1:6379> zrevrangebyscore topn 500 200 withscores1) ”php"</span>2<span class="token punctuation">)</span> <span class="token string">"500"</span>3<span class="token punctuation">)</span> <span class="token string">"mysqL"</span>4<span class="token punctuation">)</span> <span class="token string">"400"</span>5<span class="token punctuation">)</span> <span class="token string">"c++"</span>6<span class="token punctuation">)</span> <span class="token string">"300"</span>7<span class="token punctuation">)</span> <span class="token string">"java"</span>8<span class="token punctuation">)</span> <span class="token string">"200"</span></code></pre><pre class=" language-bash"><code class="language-bash">zincrby <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span>increment<span class="token operator">></span> <span class="token operator">&lt;</span>value<span class="token operator">></span></code></pre><h5 id="为元素的score加上增量"><a href="#为元素的score加上增量" class="headerlink" title="为元素的score加上增量"></a>为元素的score加上增量</h5><pre class=" language-bash"><code class="language-bash">127 .0.0.1:6379<span class="token operator">></span> zincrby topn 50 java<span class="token string">"250"</span></code></pre><pre class=" language-bash"><code class="language-bash">zrem <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span>value<span class="token operator">></span>删除该集合下,指定值的元素zcount <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span>min<span class="token operator">></span> <span class="token operator">&lt;</span>max<span class="token operator">></span>统计该集合，分数区间内的元素个数zrank <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span>value<span class="token operator">></span>返回该值在集合中的排名,从0开始</code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1 :6379<span class="token operator">></span> zcount topn 200 300<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2 <span class="token operator">|</span> 127.0.0.1:6379<span class="token operator">></span> zrank topn java<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> zrank topn mysql<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2</code></pre><h4 id="3-6-3-数据结构。"><a href="#3-6-3-数据结构。" class="headerlink" title="3.6.3. 数据结构。"></a>3.6.3. 数据结构。</h4><h5 id="SortedSet-zset-是Redis提供的一个非常特别的数据结构-方面它等价于Java的数据结构Map-lt-String-Double-gt-可以给每一个元素value赋予一个权重score-另一方面它又类似于TreeSet↓内部的元素会按照权重score进行排序-可以得到每个元素的名次-还可以通过score的范围来获取元素的列表。"><a href="#SortedSet-zset-是Redis提供的一个非常特别的数据结构-方面它等价于Java的数据结构Map-lt-String-Double-gt-可以给每一个元素value赋予一个权重score-另一方面它又类似于TreeSet↓内部的元素会按照权重score进行排序-可以得到每个元素的名次-还可以通过score的范围来获取元素的列表。" class="headerlink" title="SortedSet (zset)是Redis提供的一个非常特别的数据结构, - -方面它等价于Java的数据结构Map&lt;String, Double&gt; ,可以给每一个元素value赋予一个权重score ,另一方面它又类似于TreeSet↓内部的元素会按照权重score进行排序,可以得到每个元素的名次,还可以通过score的范围来获取元素的列表。"></a>SortedSet (zset)是Redis提供的一个非常特别的数据结构, - -方面它等价于Java的数据结构Map&lt;String, Double&gt; ,可以给每一个元素value赋予一个权重score ,另一方面它又类似于TreeSet↓内部的元素会按照权重score进行排序,可以得到每个元素的名次,还可以通过score的范围来获取元素的列表。</h5><h5 id="zset底层使用了两个数据结构。"><a href="#zset底层使用了两个数据结构。" class="headerlink" title="zset底层使用了两个数据结构。"></a>zset底层使用了两个数据结构。</h5><ul><li><strong>( 1 ) hash , hash的作用就是关联元素value和权重score ,保障元素value的唯<br>一性,可以通过元素value找到相应的score值。</strong></li><li><strong>(2 )跳跃表,跳跃表的目的在于给元素value排序,根据score的范围获取元素列表。</strong></li></ul><h4 id="3-6-4-跳跃表-跳表"><a href="#3-6-4-跳跃表-跳表" class="headerlink" title="3.6.4.  跳跃表(跳表)"></a>3.6.4.  跳跃表(跳表)</h4><h5 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h5><h5 id="有序集合在生活中比较常见-例如根据成绩对学生排名-根据得分对玩家排名等。对于有序集合的底层实现-可以用数组、平衡树、链表等。数组不便元素的插入、"><a href="#有序集合在生活中比较常见-例如根据成绩对学生排名-根据得分对玩家排名等。对于有序集合的底层实现-可以用数组、平衡树、链表等。数组不便元素的插入、" class="headerlink" title="有序集合在生活中比较常见,例如根据成绩对学生排名,根据得分对玩家排名等。对于有序集合的底层实现,可以用数组、平衡树、链表等。数组不便元素的插入、"></a>有序集合在生活中比较常见,例如根据成绩对学生排名,根据得分对玩家排名等。对于有序集合的底层实现,可以用数组、平衡树、链表等。数组不便元素的插入、</h5><p>删除;平衡树或红黑树虽然效率高但结构复杂;链表查询需要遍历所有效率低。Redis采用的是跳跃表。跳跃表效率堪比红黑树,实现远比红黑树简单。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构——二叉树</title>
      <link href="/2022/04/04/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
      <url>/2022/04/04/%E7%AE%97%E6%B3%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构——二叉树"><a href="#数据结构——二叉树" class="headerlink" title="数据结构——二叉树"></a>数据结构——二叉树</h1><h3 id="二叉树的前序遍历：（来着leetcodce-144）："><a href="#二叉树的前序遍历：（来着leetcodce-144）：" class="headerlink" title="二叉树的前序遍历：（来着leetcodce 144）："></a>二叉树的前序遍历：（来着leetcodce 144）：</h3><h4 id="给你二叉树的根节点root-，返回它节点值的前序遍历。"><a href="#给你二叉树的根节点root-，返回它节点值的前序遍历。" class="headerlink" title="给你二叉树的根节点root ，返回它节点值的前序遍历。"></a>给你二叉树的根节点root ，返回它节点值的前序遍历。</h4><h5 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h5><p><img src="/2022/04/04/%E7%AE%97%E6%B3%95%E9%A2%98/image-20220406191704875.png"></p><pre class=" language-bash"><code class="language-bash">输入: root <span class="token operator">=</span> <span class="token punctuation">[</span>1,nu11,2,3<span class="token punctuation">]</span>输出: <span class="token punctuation">[</span>1,3,2<span class="token punctuation">]</span></code></pre><h5 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h5><pre class=" language-bash"><code class="language-bash">输入: root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>输出: <span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><h5 id="示例3"><a href="#示例3" class="headerlink" title="示例3:"></a>示例3:</h5><pre class=" language-bash"><code class="language-bash">输入: root <span class="token operator">=</span> <span class="token punctuation">[</span>1<span class="token punctuation">]</span>输出: <span class="token punctuation">[</span>1<span class="token punctuation">]</span></code></pre><h5 id="示例5"><a href="#示例5" class="headerlink" title="示例5:"></a>示例5:</h5><p><img src="/2022/04/04/%E7%AE%97%E6%B3%95%E9%A2%98/image-20220406192109479.png"></p><pre class=" language-bash"><code class="language-bash">输入: root <span class="token operator">=</span> <span class="token punctuation">[</span>1,2<span class="token punctuation">]</span>输出: <span class="token punctuation">[</span>1,2<span class="token punctuation">]</span></code></pre><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postorder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">思路：利用递归的思路：定义 preorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span> 表示当前遍历到 root 节点的答案。按照定义，只要首先将 root 节点的值加入答案，然后递归调用 preorder<span class="token punctuation">(</span>root.left<span class="token punctuation">)</span> 来遍历 root 节点的左子树，最后递归调用 preorder<span class="token punctuation">(</span>root.right<span class="token punctuation">)</span> 来遍历 root 节点的右子树即可，递归终止的条件为碰到空节点。</code></pre><h3 id="二叉树的后序遍历：（来着leetcode-145）"><a href="#二叉树的后序遍历：（来着leetcode-145）" class="headerlink" title="二叉树的后序遍历：（来着leetcode 145）"></a>二叉树的后序遍历：（来着leetcode 145）</h3><h4 id="给你一棵二叉树的根节点root，返回其节点值的后序遍历。"><a href="#给你一棵二叉树的根节点root，返回其节点值的后序遍历。" class="headerlink" title="给你一棵二叉树的根节点root，返回其节点值的后序遍历。"></a>给你一棵二叉树的根节点root，返回其节点值的后序遍历。</h4><h5 id="示例1：-1"><a href="#示例1：-1" class="headerlink" title="示例1："></a>示例1：</h5><p><img src="/2022/04/04/%E7%AE%97%E6%B3%95%E9%A2%98/image-20220406191704875.png"></p><pre class=" language-bash"><code class="language-bash">输入: root <span class="token operator">=</span> <span class="token punctuation">[</span>A,nu1l,D,E<span class="token punctuation">]</span>输出: <span class="token punctuation">[</span>E,D,A<span class="token punctuation">]</span></code></pre><h5 id="示例2：-1"><a href="#示例2：-1" class="headerlink" title="示例2："></a>示例2：</h5><pre class=" language-bash"><code class="language-bash">root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>输出: <span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><h5 id="示例3："><a href="#示例3：" class="headerlink" title="示例3："></a>示例3：</h5><pre class=" language-bash"><code class="language-bash">输入: root <span class="token operator">=</span> <span class="token punctuation">[</span>1<span class="token punctuation">]</span>输出: <span class="token punctuation">[</span>1<span class="token punctuation">]</span></code></pre><h4 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postorder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">定义 postorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span> 表示当前遍历到 root 节点的答案。按照定义，我们只要递归调用 postorder<span class="token punctuation">(</span>root-<span class="token operator">></span>left<span class="token punctuation">)</span> 来遍历 root 节点的左子树，然后递归调用 postorder<span class="token punctuation">(</span>root-<span class="token operator">></span>right<span class="token punctuation">)</span> 来遍历 root 节点的右子树，最后将 root 节点的值加入答案即可，递归终止的条件为碰到空节点。</code></pre><h3 id="二叉树的中序遍历：（来自leetcode94）"><a href="#二叉树的中序遍历：（来自leetcode94）" class="headerlink" title="二叉树的中序遍历：（来自leetcode94）"></a>二叉树的中序遍历：（来自leetcode94）</h3><h5 id="示例1：-2"><a href="#示例1：-2" class="headerlink" title="示例1："></a>示例1：</h5><p><img src="/2022/04/04/%E7%AE%97%E6%B3%95%E9%A2%98/image-20220406191704875.png"></p><pre class=" language-java"><code class="language-java">输入<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>nu11<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>输出<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span></code></pre><h4 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inoder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inoder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">inoder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span> <span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inoder</span><span class="token punctuation">(</span>root <span class="token punctuation">.</span> right<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">解析：中序遍历：按照访问左子树——根节点——右子树的方式遍历这棵树，inoder<span class="token punctuation">(</span>root<span class="token punctuation">)</span>表示当前遍历的节点，之后递归调用inoder<span class="token punctuation">(</span>root.left<span class="token punctuation">)</span>来遍历root节点的左子树，将root节点的值加入list，inoder<span class="token punctuation">(</span>root.right<span class="token punctuation">)</span>来遍历root节点的右子树。递归到空节点为止。</code></pre><h3 id="相同的树："><a href="#相同的树：" class="headerlink" title="相同的树："></a>相同的树：</h3><h4 id="给你两棵二叉树的根节点p和q，编写一个函数来检验这两棵树是否相同。"><a href="#给你两棵二叉树的根节点p和q，编写一个函数来检验这两棵树是否相同。" class="headerlink" title="给你两棵二叉树的根节点p和q，编写一个函数来检验这两棵树是否相同。"></a>给你两棵二叉树的根节点p和q，编写一个函数来检验这两棵树是否相同。</h4><h4 id="如果两个树在结构-上相同，并且节点具有相同的值，则认为它们是相同的。"><a href="#如果两个树在结构-上相同，并且节点具有相同的值，则认为它们是相同的。" class="headerlink" title="如果两个树在结构.上相同，并且节点具有相同的值，则认为它们是相同的。"></a>如果两个树在结构.上相同，并且节点具有相同的值，则认为它们是相同的。</h4><p><img src="/2022/04/04/%E7%AE%97%E6%B3%95%E9%A2%98/image-20220406194304600.png"></p><pre class=" language-bash"><code class="language-bash">输入: p <span class="token operator">=</span> <span class="token punctuation">[</span>1,2,3<span class="token punctuation">]</span>， q <span class="token operator">=</span> <span class="token punctuation">[</span>1,2,3<span class="token punctuation">]</span>输出: <span class="token boolean">true</span></code></pre><p><img src="/2022/04/04/%E7%AE%97%E6%B3%95%E9%A2%98/image-20220406194424042.png"></p><pre class=" language-bash"><code class="language-bash">输入: p <span class="token operator">=</span> <span class="token punctuation">[</span>1,2<span class="token punctuation">]</span>, q <span class="token operator">=</span> <span class="token punctuation">[</span>1,null,2<span class="token punctuation">]</span>输出: <span class="token boolean">false</span></code></pre><h4 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>TreeNode p<span class="token punctuation">,</span> TreeNode q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> q <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token operator">||</span> q <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">!=</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span>q<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span> right<span class="token punctuation">,</span>q<span class="token punctuation">.</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">解析：本题运用递归的方法，如果两个树都为空，则返回true。如果有其中一棵树为空，则返回false。如果两个树都不为空，则进行比较，如果值不相同就返回false，如果值相同就进行递归，比较左右两颗子树。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis面试问题</title>
      <link href="/2022/04/04/Redis%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/04/04/Redis%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis面试题："><a href="#Redis面试题：" class="headerlink" title="Redis面试题："></a>Redis面试题：</h2><h3 id="谈一谈缓存穿透、缓存击穿和缓存雪崩，以及解决办法？"><a href="#谈一谈缓存穿透、缓存击穿和缓存雪崩，以及解决办法？" class="headerlink" title="谈一谈缓存穿透、缓存击穿和缓存雪崩，以及解决办法？"></a>谈一谈缓存穿透、缓存击穿和缓存雪崩，以及解决办法？</h3><h4 id="缓存穿透："><a href="#缓存穿透：" class="headerlink" title="缓存穿透："></a>缓存穿透：</h4><ul><li><p><strong>问题：大量并发查询不存在的 KEY，在缓存和数据库中都不存在，同时给缓存和数据库 带来压力。</strong></p></li><li><p><strong>原因：一般而言，缓存穿透有 2 种可能性：业务数据被误删，导致缓存和数据库中都没 有数据。恶意进行 ddos 攻击。</strong></p></li><li><p><strong>分析：为什么会多次透传呢？不存在 一直为空，需要注意让缓存能够区分 KEY 不存在和 查询到一个空值。</strong></p></li><li><p><strong>解决办法：缓存空值的 KEY，这样第一次不存在也会被加载会记录，下次拿到有这个 KEY。Bloom 过滤或 RoaingBitmap 判断 KEY 是否存在，如果布隆过滤器中没有查到 这个数据，就不去数据库中查。在处理请求前增加恶意请求检查，如果检测到是恶意攻击， 则拒绝进行服务。完全以缓存为准，使用延迟异步加载的策略（异步线程负责维护缓存的 数据，定期或根据条件触发更新），这样就不会触发更新。</strong></p></li></ul><h4 id="缓存击穿："><a href="#缓存击穿：" class="headerlink" title="缓存击穿："></a>缓存击穿：</h4><ul><li><strong>问题：某个 KEY 失效的时候，正好有大量并发请求访问这个 KEY。</strong></li><li><strong>分析：跟穿透其实很像，属于比较偶然的。</strong></li><li><strong>解决办法：KEY 的更新操作添加全局互斥锁。完全以缓存为准，使用延迟异步加载的策 略（异步线程负责维护缓存的数据，定期或根据条件触发更新），这样就不会触发更新。</strong></li></ul><h4 id="缓存雪崩："><a href="#缓存雪崩：" class="headerlink" title="缓存雪崩："></a>缓存雪崩：</h4><ul><li><p><strong>问题：当某一时刻发生大规模的缓存失效的情况，导致大量的请求无法获取数据，从而将 流量压力传导到数据库上，导致数据库压力过大甚至宕机。</strong></p></li><li><p><strong>原因：一般而言，缓存雪崩有 2 种可能性：大量的数据同一个时间失效：比如业务关系 强相关的数据要求同时失效 Redis 宕机</strong></p></li><li><p><strong>分析：一般来说，由于更新策略、或者数据热点、缓存服务宕机等原因，可能会导致缓存 数据同一个时间点大规模不可用，或者都更新。所以，需要我们的更新策略要在时间上合 适，数据要均匀分享，缓存服务器要多台高可用。</strong></p></li><li><p><strong>解决办法：更新策略在时间上做到比较平均。如果数据需要同一时间失效，可以给这批数 据加上一些随机值，使得这批数据不要在同一个时间过期，降低数据库的压力。使用的热 数据尽量分散到不同的机器上。多台机器做主从复制或者多副本，实现高可用。做好主从 的部署，当主节点挂掉后，能快速的使用从结点顶上。实现熔断限流机制，对系统进行负 载能力控制。对于非核心功能的业务，拒绝其请求，只允许核心功能业务访问数据库获取 数据。服务降价：提供默认返回值，或简单的提示信息</strong></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven高级</title>
      <link href="/2022/04/03/Maven%E9%AB%98%E7%BA%A7/"/>
      <url>/2022/04/03/Maven%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="Maven高级"><a href="#Maven高级" class="headerlink" title="Maven高级"></a>Maven高级</h3><h4 id="1-maven基础回顾"><a href="#1-maven基础回顾" class="headerlink" title="1.maven基础回顾"></a>1.maven基础回顾</h4><h4 id="2-maven传统的web工程做一个数据查询操作"><a href="#2-maven传统的web工程做一个数据查询操作" class="headerlink" title="2.maven传统的web工程做一个数据查询操作"></a>2.maven传统的web工程做一个数据查询操作</h4><h4 id="3-maven工程拆分与聚会的思想"><a href="#3-maven工程拆分与聚会的思想" class="headerlink" title="3.maven工程拆分与聚会的思想"></a>3.maven工程拆分与聚会的思想</h4><h4 id="4-把第二阶段做好的web工程修改成maven拆分与聚合的形式"><a href="#4-把第二阶段做好的web工程修改成maven拆分与聚合的形式" class="headerlink" title="4.把第二阶段做好的web工程修改成maven拆分与聚合的形式"></a>4.把第二阶段做好的web工程修改成maven拆分与聚合的形式</h4><h4 id="5-私服【远程仓库】"><a href="#5-私服【远程仓库】" class="headerlink" title="5.私服【远程仓库】"></a>5.私服【远程仓库】</h4><h4 id="6-任何安装第三方jar包【把第三方jar包安装到本地仓库，把第三方jar包安装到私服。】"><a href="#6-任何安装第三方jar包【把第三方jar包安装到本地仓库，把第三方jar包安装到私服。】" class="headerlink" title="6.任何安装第三方jar包【把第三方jar包安装到本地仓库，把第三方jar包安装到私服。】"></a>6.任何安装第三方jar包【把第三方jar包安装到本地仓库，把第三方jar包安装到私服。】</h4><h5 id="maven基础知识回顾"><a href="#maven基础知识回顾" class="headerlink" title="maven基础知识回顾:"></a>maven基础知识回顾:</h5><h5 id="maven是一一个项目管理工具。"><a href="#maven是一一个项目管理工具。" class="headerlink" title="maven是一一个项目管理工具。"></a>maven是一一个项目管理工具。</h5><ul><li><p><strong>依赖管理:maven对项目中jar包的管理过程。传统工程我们直接把jar包放置在项目中。maven工程真正的jar包放置在仓库中，项目中只用放置jar包的坐标。</strong></p></li><li><p><strong>仓库的种类:本地仓库，远程仓库[私服]，中央仓库。</strong></p></li><li><p><strong>仓库之间的关系:当我们启动一个maven工程的时候，maven工程会通过pom文件中jar包的坐标去本地仓库找对默认情况下，如果本地仓库没有对应jar包，maven.工程会自动去中央仓库下载jar包到本地，在公司中，如果本地没有对应jar包，会先从私服下载jar包，如果私服没有jar包，可以从中央仓库下载，也可以从本地上传。</strong></p></li><li><p><strong>一键构建: maven自身集成了tomcat插件，可以对项目进行编译，测试，打包，安装，发布等操作。</strong></p></li><li><p><strong>maven常用命令: clean， compile, test， package, insta1l， deploy。</strong></p></li><li><p><strong>maven三套生命周期:清理生命周期，默认生命周期，站点生命周期。</strong></p></li></ul><h4 id="web-xml配置头："><a href="#web-xml配置头：" class="headerlink" title="web.xml配置头："></a>web.xml配置头：</h4><pre class=" language-xml"><code class="language-xml">&lt;web-app xmlns="http://java. sun. com/xml/ns/javaee"         xmlns :xsi="http://www. W3. org/ 2001/XMLSchema- instance"         xsi : schemalocation= "http://java. sun. com/ xml/ns/javaee         http://java. sun. com/ xm1/ns/javaee/web-app 3_ 0.xsd"         version="3.0"></code></pre><h4 id="maven导入jar包的冲突问题："><a href="#maven导入jar包的冲突问题：" class="headerlink" title="maven导入jar包的冲突问题："></a>maven导入jar包的冲突问题：</h4><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- maven工程要导入jar包的坐标， 就必须考虑解决jar包冲突。        解决jar包冲突的方式一^:        第一优先声明原则，哪个jar包的坐标在靠上的位置，这个jar包就是先声明的。        先声明的jar包坐标下的依赖包，可以优先进入项目中。                maven导入jar包中的一-些 概念:        直接依赖:项目中直接导入的jar包，就是该项目的直接依赖包        传递依赖:项目中没有直接导入的jar包，可以通过项目直接依赖jar包传递到项目中去                解决jar包冲突的方式二        路径近者优先原则。直接依赖路径比传递路径近，那么最终项目进入的jar包会是路径近的直接依赖包:                解决jar包冲突的方式三: [推荐使用] :        直接排除法。        当我们要排除某个jar包下的依赖包，在配置exclusions标签的时候，内部可以不写版本号。        因为此时依赖包使用的版本和默认版本jar包一样。--></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- maven工程要导入jar包的坐标， 就必须考虑解决jar包冲突。        解决jar包冲突的方式:        第一优先声明原则，哪个jar包的坐标在靠上的位置，这个jar包就是先声明的。        先声明的jar包坐标下的依赖包，可以优先进入项目中。                maven导入jar包中的一-些 概念:        直接依赖:项目中直接导入的jar包，就是该项目的直接依赖包        传递依赖:项目中没有直接导入的jar包，可以通过项目直接依赖jar包传递到项目中去                解决jar包冲突的方式: :        路径近者优先原则。直接依赖路径比传递路径近，那么最终项目进入的jar包会是路径近的直接依赖包。                解决jar包冲突的方式三: [推荐使用] :        直接排除法。        当我们要排除某个jar包下的依赖包，在配置exclusions标签的时候，内部可以不写版本号。        因为此时依赖包使用的版本和默认版本jar包样。--></span></code></pre><h4 id="完整的mvc架构全部坐标："><a href="#完整的mvc架构全部坐标：" class="headerlink" title="完整的mvc架构全部坐标："></a>完整的mvc架构全部坐标：</h4><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.itheima<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven_day02_1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slf4j.version</span><span class="token punctuation">></span></span>1.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slf4j.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shiro.version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shiro.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>8.0.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.version</span><span class="token punctuation">></span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.security.version</span><span class="token punctuation">></span></span>5.0.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.security.version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 锁定jar包版本 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 项目依赖jar包 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- spring --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context-support<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-orm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- log start --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- log end --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.security.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.security.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.security.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.security.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h4 id="dao层的编写："><a href="#dao层的编写：" class="headerlink" title="dao层的编写："></a>dao层的编写：</h4><h5 id="（1）：配置文件的书写："><a href="#（1）：配置文件的书写：" class="headerlink" title="（1）：配置文件的书写："></a>（1）：配置文件的书写：</h5><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- dao层配置文件开始--></span><span class="token comment" spellcheck="true">&lt;!-- 配置连接池--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com. alibaba。druid。pool . DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;property name =”driverClassName" value="com.mysql.cj.jdbc.Driver"/>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span> <span class="token attr-name">"url"</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> jdbc :mysql://localhost :3306/maven?serverTimezone<span class="token punctuation">=</span>UTC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    &lt;property name="username" value= "root" />    &lt;property name=" password" value= ”xzq1314"/> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 配置SqlSession对象的工厂 --></span>&lt;bean id= ”sqlSessionFactoryBean" class= "org.mybatis.spring.SqlSessionFactoryBean">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datasource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!--扫描pojo包，给包下所有pojo对象起别名--></span>    &lt;property name= ”typeAliasesPackage" value=" com . itheima . damain"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--扫描接口包路径，生成包下所有接口的代理对象，并且放入spring容器中--></span>&lt;bean class= ”org.mybatis.spring.mapper.MapperSc annerConfigurer"> &lt;property name= ”basePackage" value= "com.itheima.dao" /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- dao层配置文件结束--></span></code></pre><h5 id="（2）：书写dao层："><a href="#（2）：书写dao层：" class="headerlink" title="（2）：书写dao层："></a>（2）：书写dao层：</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>damain<span class="token punctuation">.</span>Items <span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ItemsDao</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> Items <span class="token function">findById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="由于交给了spring容器管理，所以不需要写dao接口的实现类。"><a href="#由于交给了spring容器管理，所以不需要写dao接口的实现类。" class="headerlink" title="由于交给了spring容器管理，所以不需要写dao接口的实现类。"></a>由于交给了spring容器管理，所以不需要写dao接口的实现类。</h5><h4 id="3-service层的配置："><a href="#3-service层的配置：" class="headerlink" title="(3):service层的配置："></a>(3):service层的配置：</h4><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- service层配置文件开始--></span><span class="token comment" spellcheck="true">&lt;!-- 组件打描配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">:</span> <span class="token attr-name">component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.service<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- aop面向切面编程，切面就是切入点和通知(就是增强类)的组合--></span><span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器-- >&lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">    &lt;property name="datasource" ref= "dataSource"/>&lt;/bean> &lt;!-- 配置事务的通知--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> advice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attr</span> <span class="token attr-name">ibutes</span><span class="token punctuation">></span></span>        &lt;tx :method name= ”save*" propagation="REQUIRED"/>        &lt;tx : method name= "update*" propagation="REQUIRED"/>        &lt;tx : method name="delete" propagat ion= "REQUIRED" />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tx</span> <span class="token attr-name">:</span> <span class="token attr-name">method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>find*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        &lt;tx:method name= ”*”propagation="REQUIRED" />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span></span> <span class="token attr-name">advice</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 配置切面--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.itheima.service.imp1.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- advice-ref通知类pointcut-ref 切入点 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- service层配置文件结束--></span></code></pre><h4 id="4-service层的编写"><a href="#4-service层的编写" class="headerlink" title="(4):service层的编写"></a>(4):service层的编写</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ItemsService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Items <span class="token function">findById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>damain<span class="token punctuation">.</span>Items <span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>ItemsDao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span>ItemsService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired <span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ItemsService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ItemsDao itemsDao <span class="token punctuation">;</span>        <span class="token keyword">public</span> Items <span class="token function">findById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> itemsDao<span class="token punctuation">.</span> <span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="dao层自动注入注解：-Autowired"><a href="#dao层自动注入注解：-Autowired" class="headerlink" title="dao层自动注入注解：@Autowired"></a>dao层自动注入注解：@Autowired</h5><h4 id="5-web层的配置："><a href="#5-web层的配置：" class="headerlink" title="(5):web层的配置："></a>(5):web层的配置：</h4><h5 id="配置两个xml文件：applicationContext-xml-和-springmvc-xml"><a href="#配置两个xml文件：applicationContext-xml-和-springmvc-xml" class="headerlink" title="配置两个xml文件：applicationContext.xml 和 springmvc.xml"></a>配置两个xml文件：applicationContext.xml 和 springmvc.xml</h5><h5 id="applicationContext-xml之前以及配好了"><a href="#applicationContext-xml之前以及配好了" class="headerlink" title="(applicationContext.xml之前以及配好了)"></a>(applicationContext.xml之前以及配好了)</h5><h5 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml:"></a>springmvc.xml:</h5><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>&lt;beans xmlns="http://www.springframework.org/ schema/ beans"       xmlns:xsi= "http://www.w3.org/2001/XMLSchema-instance"       xmIns:context="http://www.springframework.org/schema/context"       xmlns:aop="http://www.springframework.org/schema/aop        xmIns:tx="http://www.springframework.org/schema/tx"       xmIns:mvc="http://www.springframework.org/schema/mvc”       xsi:schemaLocation-"http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/springbeans.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/aop       http://www.springframework.org/schema/aop/spring-aop.xsd       http://www.springframework.org/schema/tx       http://www.springframework.org/schema/tx/spring -tx.xsd       http://www.springframework.org/schema/mvc       http://www.springframework.org/schema/mvc/spring mvc .xsd">                <span class="token comment" spellcheck="true">&lt;!-- 组件扫描--></span>        &lt;context:component-scan base-package=”com.itheima.controller"/>                <span class="token comment" spellcheck="true">&lt;!-- 处理器映射器，处理器适配器-- >        &lt;mvc:annotation driven/>                &lt;!-- 视图解析器-- >        &lt;bean id=”internalResourceViewResolver" class= ”org.springframework.web.servlet.view.InternalResourceViewResolver">        &lt;!-- 前缀 --></span>        &lt;property name= ”prefix" value =”/WEB-INF/pages/"/>        <span class="token comment" spellcheck="true">&lt;!--后缀--></span>        &lt;property name = "suffix" value=".jsp"/>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 释放静态资源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span> </code></pre><h4 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h4><pre class=" language-jsp"><code class="language-jsp"><body>    <form action="items/ findDetail" "method=" post">        <input type=”submit" value=" 查询">    </form></body></html></code></pre><h4 id="Controller类："><a href="#Controller类：" class="headerlink" title="Controller类："></a>Controller类：</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>"<span class="token operator">/</span>items”<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemsController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ItemsService itemsService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/findDetail"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> string <span class="token function">findDetail</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        Items items <span class="token operator">=</span> itemsService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">,</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span>” itemDetail"<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Maven的拆分以及聚合："><a href="#Maven的拆分以及聚合：" class="headerlink" title="Maven的拆分以及聚合："></a>Maven的拆分以及聚合：</h3><h4 id="imaven解决代码可冲用和便于维护问题上是这么解决的"><a href="#imaven解决代码可冲用和便于维护问题上是这么解决的" class="headerlink" title="imaven解决代码可冲用和便于维护问题上是这么解决的:"></a>imaven解决代码可冲用和便于维护问题上是这么解决的:</h4><h5 id="maven把一个完整的项目，分成不同的独立模块，这些模块都有各自独立的坐标。哪个地方需要其中某个模块，就直接引用该模块的坐标即可。今后如果公司开发一个新项目，-我们先考虑问题不是dao-service-utils-domain如何编写-我们要考虑的是，dao-service-utils-domain这些模块是否已经存在，如果存在直接引用。以上说的就是maven拆分的思想。我们可以把拆分零散的模块聚合到一起编写-一个完整的项目，这就是maven聚合思想。"><a href="#maven把一个完整的项目，分成不同的独立模块，这些模块都有各自独立的坐标。哪个地方需要其中某个模块，就直接引用该模块的坐标即可。今后如果公司开发一个新项目，-我们先考虑问题不是dao-service-utils-domain如何编写-我们要考虑的是，dao-service-utils-domain这些模块是否已经存在，如果存在直接引用。以上说的就是maven拆分的思想。我们可以把拆分零散的模块聚合到一起编写-一个完整的项目，这就是maven聚合思想。" class="headerlink" title="maven把一个完整的项目，分成不同的独立模块，这些模块都有各自独立的坐标。哪个地方需要其中某个模块，就直接引用该模块的坐标即可。今后如果公司开发一个新项目， 我们先考虑问题不是dao, service, utils, domain如何编写 ,我们要考虑的是，dao, service, utils, domain这些模块是否已经存在，如果存在直接引用。以上说的就是maven拆分的思想。我们可以把拆分零散的模块聚合到一起编写-一个完整的项目，这就是maven聚合思想。"></a>maven把一个完整的项目，分成不同的独立模块，这些模块都有各自独立的坐标。哪个地方需要其中某个模块，就直接引用该模块的坐标即可。今后如果公司开发一个新项目， 我们先考虑问题不是dao, service, utils, domain如何编写 ,我们要考虑的是，dao, service, utils, domain这些模块是否已经存在，如果存在直接引用。以上说的就是maven拆分的思想。我们可以把拆分零散的模块聚合到一起编写-一个完整的项目，这就是maven聚合思想。</h5><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--工程和模块的区别:    工程不等于完整的项目，模块也不等于完整的项目，-.个完整的项目看的是代码，代码完整，就可以说是一个完整的项目。    和此项目是工程还是模块没有关系。    工程天生只能使用自己内部资源，工程天生是独立的。后天可以和其他工程或模块建立关联关系。    模块天生不是独立的，模块天生是属于父工程的。模块一旦创建，所有父工程的资源都可以使用。    父子工程之间，子工程天生继承父工程。可以使用父工程所有资源。    子模块之间天生是没有任何关系的。    父子工程直接不用建立关系，继承关系是先天的，不需要手动建立。    平极之间的引用叫依赖。依赖不是先天的，依赖是需要后天建立的。--></span></code></pre><h3 id="私服："><a href="#私服：" class="headerlink" title="私服："></a>私服：</h3><h4 id="给私服传代码，先登录私服"><a href="#给私服传代码，先登录私服" class="headerlink" title="给私服传代码，先登录私服"></a>给私服传代码，先登录私服</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>uk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Human Readable Name for this Mirror.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://uk.maven.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>CN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>OSChina Central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.oschina.net/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment" spellcheck="true">&lt;!--Licensed to the Apache Software Foundation (ASF) under oneor more contributor license agreements.  See the NOTICE filedistributed with this work for additional informationregarding copyright ownership.  The ASF licenses this fileto you under the Apache License, Version 2.0 (the"License"); you may not use this file except in compliancewith the License.  You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing,software distributed under the License is distributed on an"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANYKIND, either express or implied.  See the License for thespecific language governing permissions and limitationsunder the License.--></span><span class="token comment" spellcheck="true">&lt;!-- | This is the configuration file for Maven. It can be specified at two levels: | |  1. User Level. This settings.xml file provides configuration for a single user, |                 and is normally provided in ${user.home}/.m2/settings.xml. | |                 NOTE: This location can be overridden with the CLI option: | |                 -s /path/to/user/settings.xml | |  2. Global Level. This settings.xml file provides configuration for all Maven |                 users on a machine (assuming they're all using the same Maven |                 installation). It's normally provided in |                 ${maven.home}/conf/settings.xml. | |                 NOTE: This location can be overridden with the CLI option: | |                 -gs /path/to/global/settings.xml | | The sections in this sample file are intended to give you a running start at | getting the most out of your Maven installation. Where appropriate, the default | values (values used when the setting is not specified) are provided. | |--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- localRepository   | The path to the local repository maven will use to store artifacts.   |   | Default: ${user.home}/.m2/repository  &lt;localRepository>/path/to/local/repo&lt;/localRepository>  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>D:/work/maven_work/maven_respository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- interactiveMode   | This will determine whether maven prompts you when it needs input. If set to false,   | maven will use a sensible default value, perhaps based on some other setting, for   | the parameter in question.   |   | Default: true  &lt;interactiveMode>true&lt;/interactiveMode>  --></span>  <span class="token comment" spellcheck="true">&lt;!-- offline   | Determines whether maven should attempt to connect to the network when executing a build.   | This will have an effect on artifact downloads, artifact deployment, and others.   |   | Default: false  &lt;offline>false&lt;/offline>  --></span>  <span class="token comment" spellcheck="true">&lt;!-- pluginGroups   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.   | when invoking a command line like "mvn prefix:goal". Maven will automatically add the group identifiers   | "org.apache.maven.plugins" and "org.codehaus.mojo" if these are not already contained in the list.   |--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginGroups</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- pluginGroup     | Specifies a further group identifier to use for plugin lookup.    &lt;pluginGroup>com.your.plugins&lt;/pluginGroup>    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginGroups</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- proxies   | This is a list of proxies which can be used on this machine to connect to the network.   | Unless otherwise specified (by system property or command-line switch), the first proxy   | specification in this list marked as active will be used.   |--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proxies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- proxy     | Specification for one proxy, to be used in connecting to the network.     |    &lt;proxy>      &lt;id>optional&lt;/id>      &lt;active>true&lt;/active>      &lt;protocol>http&lt;/protocol>      &lt;username>proxyuser&lt;/username>      &lt;password>proxypass&lt;/password>      &lt;host>proxy.host.net&lt;/host>      &lt;port>80&lt;/port>      &lt;nonProxyHosts>local.net|some.host.com&lt;/nonProxyHosts>    &lt;/proxy>    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>proxies</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- servers   | This is a list of authentication profiles, keyed by the server-id used within the system.   | Authentication profiles can be used whenever maven must make a connection to a remote server.   |--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- server     | Specifies the authentication information to use when connecting to a particular server, identified by     | a unique name within the system (referred to by the 'id' attribute below).     |     | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are     |       used together.     |    &lt;server>      &lt;id>deploymentRepo&lt;/id>      &lt;username>repouser&lt;/username>      &lt;password>repopwd&lt;/password>    &lt;/server>    --></span>    <span class="token comment" spellcheck="true">&lt;!-- Another sample, using keys to authenticate.    &lt;server>      &lt;id>siteServer&lt;/id>      &lt;privateKey>/path/to/private/key&lt;/privateKey>      &lt;passphrase>optional; leave empty if not used.&lt;/passphrase>    &lt;/server>    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servers</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- mirrors   | This is a list of mirrors to be used in downloading artifacts from remote repositories.   |   | It works like this: a POM may declare a repository to use in resolving certain artifacts.   | However, this repository may have problems with heavy traffic at times, so people have mirrored   | it to several places.   |   | That repository definition will have a unique id, so we can create a mirror reference for that   | repository, to be used as an alternate download site. The mirror site will be the preferred   | server for that repository.   |--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- mirror     | Specifies a repository mirror site to use instead of a given repository. The repository that     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.     |    &lt;mirror>      &lt;id>mirrorId&lt;/id>      &lt;mirrorOf>repositoryId&lt;/mirrorOf>      &lt;name>Human Readable Name for this Mirror.&lt;/name>      &lt;url>http://my.repository.com/repo/path&lt;/url>    &lt;/mirror>     --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- profiles   | This is a list of profiles which can be activated in a variety of ways, and which can modify   | the build process. Profiles provided in the settings.xml are intended to provide local machine-   | specific paths and repository locations which allow the build to work in the local environment.   |   | For example, if you have an integration testing plugin - like cactus - that needs to know where   | your Tomcat instance is installed, you can provide a variable here such that the variable is   | dereferenced during the build process to configure the cactus plugin.   |   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles   | section of this document (settings.xml) - will be discussed later. Another way essentially   | relies on the detection of a system property, either matching a particular value for the property,   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a   | value of '1.4' might activate a profile when the build is executed on a JDK version of '1.4.2_07'.   | Finally, the list of active profiles can be specified directly from the command line.   |   | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact   |       repositories, plugin repositories, and free-form properties to be used as configuration   |       variables for plugins in the POM.   |   |--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- profile     | Specifies a set of introductions to the build process, to be activated using one or more of the     | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/>     | or the command line, profiles have to have an ID that is unique.     |     | An encouraged best practice for profile identification is to use a consistent naming convention     | for profiles, such as 'env-dev', 'env-test', 'env-production', 'user-jdcasey', 'user-brett', etc.     | This will make it more intuitive to understand what the set of introduced profiles is attempting     | to accomplish, particularly when you only have a list of profile id's for debug.     |     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.    &lt;profile>      &lt;id>jdk-1.4&lt;/id>      &lt;activation>        &lt;jdk>1.4&lt;/jdk>      &lt;/activation>      &lt;repositories>        &lt;repository>          &lt;id>jdk14&lt;/id>          &lt;name>Repository for JDK 1.4 builds&lt;/name>          &lt;url>http://www.myhost.com/maven/jdk14&lt;/url>          &lt;layout>default&lt;/layout>          &lt;snapshotPolicy>always&lt;/snapshotPolicy>        &lt;/repository>      &lt;/repositories>    &lt;/profile>    --></span>    <span class="token comment" spellcheck="true">&lt;!--     | Here is another profile, activated by the system property 'target-env' with a value of 'dev',     | which provides a specific path to the Tomcat instance. To use this, your plugin configuration     | might hypothetically look like:     |     | ...     | &lt;plugin>     |   &lt;groupId>org.myco.myplugins&lt;/groupId>     |   &lt;artifactId>myplugin&lt;/artifactId>     |     |   &lt;configuration>     |     &lt;tomcatLocation>${tomcatPath}&lt;/tomcatLocation>     |   &lt;/configuration>     | &lt;/plugin>     | ...     |     | NOTE: If you just wanted to inject this configuration whenever someone set 'target-env' to     |       anything, you could just leave off the &lt;value/> inside the activation-property.     |    &lt;profile>      &lt;id>env-dev&lt;/id>      &lt;activation>        &lt;property>          &lt;name>target-env&lt;/name>          &lt;value>dev&lt;/value>        &lt;/property>      &lt;/activation>      &lt;properties>        &lt;tomcatPath>/path/to/tomcat/instance&lt;/tomcatPath>      &lt;/properties>    &lt;/profile>    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- activeProfiles   | List of profiles that are active for all builds.   |  &lt;activeProfiles>    &lt;activeProfile>alwaysActiveProfile&lt;/activeProfile>    &lt;activeProfile>anotherAlwaysActiveProfile&lt;/activeProfile>  &lt;/activeProfiles>  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--  锁定版本信息  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  spring相关版本  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.2.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  mybatis版本  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.version</span><span class="token punctuation">></span></span>3.5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.version</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  mybatis-spring版本  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis-spring.version</span><span class="token punctuation">></span></span>2.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis-spring.version</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  mysql版本  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>8.0.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  fast json版本  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fast-json.version</span><span class="token punctuation">></span></span>1.2.73<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fast-json.version</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  jackson版本  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jackson.version</span><span class="token punctuation">></span></span>2.11.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jackson.version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--  依赖坐标  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- spring相关 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- mybatis相关 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis-spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  mysql  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  DBCP数据源  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-dbcp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-dbcp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  log4j  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  单元测试  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  spring web  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  spring mvc  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  jsp  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  servlet  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  JSR 303依赖  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.4.3.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  fast json  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${fast-json.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${jackson.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${jackson.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  commons-io  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  commons-fileupload  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  shiro  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  pagehelper  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap的底层数据结构</title>
      <link href="/2022/04/03/HashMap%E5%BA%95%E5%B1%82/"/>
      <url>/2022/04/03/HashMap%E5%BA%95%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="HashMap-的底层数据结构是怎样的-？"><a href="#HashMap-的底层数据结构是怎样的-？" class="headerlink" title="HashMap 的底层数据结构是怎样的 ？"></a>HashMap 的底层数据结构是怎样的 ？</h2><h4 id="JDK8之前："><a href="#JDK8之前：" class="headerlink" title="JDK8之前："></a>JDK8之前：</h4><ul><li><p><strong>JDK1.8 之前 HashMap 底层是 <font color="red">数组和链表</font>  结合在一起使用也就是 <font color="red">链表散列</font></strong></p></li><li><p><strong>HashMap 通过 key 的 hashCode 经过扰动函数处理过后得到 hash 值，然后通过   <font color="red">(n - 1) &amp; hash </font>  判断当前元素存放的位置（这里的 n 指的是数组的长度），如果当前位置存在 元素的话，就判断该元素与要存入的元素的 hash 值以及 key 是否相同，如果相同的话， 直接覆盖，不相同就通过拉链法解决冲突。</strong></p></li><li><p><strong>所谓扰动函数指的就是 HashMap 的 hash 方法。使用 hash 方法也就是扰动函数是为了 防止一些实现比较差的 hashCode() 方法 换句话说使用扰动函数之后可以减少碰撞。</strong></p></li></ul><h4 id="JDK1-8之后："><a href="#JDK1-8之后：" class="headerlink" title="JDK1.8之后："></a>JDK1.8之后：</h4><ul><li><strong>当链表长度大于阈值（默认为 8）时，会首先调用   <font color="red"> treeifyBin()方法 </font>。  这个方法会根据 HashMap 数组来决定是否转换为红黑树。只有当数组长度大于或者等于 64 的情况下，才会 执行转换红黑树操作，以减少搜索时间。否则，就是只是执行   <font color="red">resize() 方法</font>  对数组扩容。</strong></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口的抽象类的区别</title>
      <link href="/2022/04/03/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2022/04/03/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="接口和抽象类的区别："><a href="#接口和抽象类的区别：" class="headerlink" title="接口和抽象类的区别："></a>接口和抽象类的区别：</h2><h4 id="（1）接口的方法默认是-public"><a href="#（1）接口的方法默认是-public" class="headerlink" title="（1）接口的方法默认是 public"></a>（1）接口的方法默认是 public</h4><ul><li><strong>所有的方法在接口中不能有实现类</strong></li><li><strong>Java8之后，接口方法可以有默认的实现，抽象类可以有非抽象的方法</strong></li></ul><h4 id="（2）接口中的实例变量默认是-final-类型的，而抽象类中则不一定"><a href="#（2）接口中的实例变量默认是-final-类型的，而抽象类中则不一定" class="headerlink" title="（2）接口中的实例变量默认是 final 类型的，而抽象类中则不一定"></a>（2）接口中的实例变量默认是 final 类型的，而抽象类中则不一定</h4><h4 id="（3）一个类中可以实现多个接口，但是最多只能实现一个抽象类"><a href="#（3）一个类中可以实现多个接口，但是最多只能实现一个抽象类" class="headerlink" title="（3）一个类中可以实现多个接口，但是最多只能实现一个抽象类"></a>（3）一个类中可以实现多个接口，但是最多只能实现一个抽象类</h4><h4 id="（4）一个类在实现接口的话，要实现接口中的所有方法，而抽象类不一定"><a href="#（4）一个类在实现接口的话，要实现接口中的所有方法，而抽象类不一定" class="headerlink" title="（4）一个类在实现接口的话，要实现接口中的所有方法，而抽象类不一定"></a>（4）一个类在实现接口的话，要实现接口中的所有方法，而抽象类不一定</h4><h4 id="（5）接口不能使用new来实例化，但是可以声明，但是必须引用一个实现，该接口的对象从设计层面来说的话，抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范"><a href="#（5）接口不能使用new来实例化，但是可以声明，但是必须引用一个实现，该接口的对象从设计层面来说的话，抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范" class="headerlink" title="（5）接口不能使用new来实例化，但是可以声明，但是必须引用一个实现，该接口的对象从设计层面来说的话，抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范"></a>（5）接口不能使用new来实例化，但是可以声明，但是必须引用一个实现，该接口的对象从设计层面来说的话，抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 易错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端介绍以及区别</title>
      <link href="/2022/04/03/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%8C%BA%E5%88%AB/"/>
      <url>/2022/04/03/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h3><h4 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h4><ul><li><strong>是指用户可以直接看到的和点击的页面</strong></li><li><strong>展示页面的布局，图文，交互和特性</strong></li><li><strong>像我们肉眼可见的，京东，淘宝，百度等页面，都是前端完成的</strong></li></ul><h4 id="学习成本："><a href="#学习成本：" class="headerlink" title="学习成本："></a>学习成本：</h4><ul><li><strong>前端入门简单，先易后难，能直接看到页面，相对于后端会更又成就感</strong></li></ul><h4 id="关注重点："><a href="#关注重点：" class="headerlink" title="关注重点："></a>关注重点：</h4><ul><li><strong>更注重页面网页的美观，以及用户体验</strong></li><li><strong>相互特效和可视化</strong></li></ul><h4 id="使用技术："><a href="#使用技术：" class="headerlink" title="使用技术："></a>使用技术：</h4><ul><li><strong>HTML5，CSS3，js，Ajax，Vue，React，Node.js等</strong></li></ul><h4 id="工作职责："><a href="#工作职责：" class="headerlink" title="工作职责："></a>工作职责：</h4><ul><li><strong>Web前端开发</strong></li><li><strong>移动端和小程序的开发</strong></li><li><strong>大数据呈现端开发</strong></li></ul><h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><ul><li><strong>好比盖房子，房子的外观设计，颜色搭配都属于前端开发</strong></li></ul><h4 id="后端："><a href="#后端：" class="headerlink" title="后端："></a>后端：</h4><ul><li><strong>是用户无法直接看到的</strong></li><li><strong>处理服务端的数据存取</strong></li><li><strong>实现相应的业务逻辑</strong></li></ul><h4 id="学习成本：-1"><a href="#学习成本：-1" class="headerlink" title="学习成本："></a>学习成本：</h4><ul><li><strong>入门难</strong></li><li><strong>深入更难</strong></li><li><strong>相对枯燥</strong></li><li><strong>需要逻辑思维更好</strong></li></ul><h4 id="关注重点：-1"><a href="#关注重点：-1" class="headerlink" title="关注重点："></a>关注重点：</h4><ul><li><strong>后端更注重业务逻辑的实现</strong></li><li><strong>平台的稳定性和性能</strong></li></ul><h4 id="使用技术：-1"><a href="#使用技术：-1" class="headerlink" title="使用技术："></a>使用技术：</h4><ul><li><strong>Java，Python,Go等语言和框架</strong></li><li><strong>会算法</strong></li><li><strong>数据库</strong></li><li><strong>服务器</strong></li><li><strong>性能优化等</strong></li></ul><h4 id="工作职责：-1"><a href="#工作职责：-1" class="headerlink" title="工作职责："></a>工作职责：</h4><ul><li><strong>平台设计</strong></li><li><strong>功能接口设计</strong></li><li><strong>业务逻辑实现</strong></li></ul><h4 id="举例：-1"><a href="#举例：-1" class="headerlink" title="举例："></a>举例：</h4><ul><li><strong>比如该房子的结构，屋子里的布局，住了多少人了等都属于后端</strong></li></ul><h3 id="联系："><a href="#联系：" class="headerlink" title="联系："></a>联系：</h3><h4 id="前端要将后端传过去的数据进行展示，展示给用户，用户通过浏览获取内容。后端将前端传来的数据进行查询，保存等，在前端需要数据的时候传给前端。也是现在流行的前后端交互，前后端分离式开发。"><a href="#前端要将后端传过去的数据进行展示，展示给用户，用户通过浏览获取内容。后端将前端传来的数据进行查询，保存等，在前端需要数据的时候传给前端。也是现在流行的前后端交互，前后端分离式开发。" class="headerlink" title="前端要将后端传过去的数据进行展示，展示给用户，用户通过浏览获取内容。后端将前端传来的数据进行查询，保存等，在前端需要数据的时候传给前端。也是现在流行的前后端交互，前后端分离式开发。"></a>前端要将后端传过去的数据进行展示，展示给用户，用户通过浏览获取内容。后端将前端传来的数据进行查询，保存等，在前端需要数据的时候传给前端。也是现在流行的前后端交互，前后端分离式开发。</h4><h3 id="前景："><a href="#前景：" class="headerlink" title="前景："></a>前景：</h3><h4 id="就目前来说，前端岗位较后端来说，岗位比后端少，但是普通本科教前端的也是比较少，所以相对后端比较好找工作，而且前端更新快，需要不断学习，目前框架都默认已经是Vue3了。开始工资比后端高很多，后续得看自己的发展。"><a href="#就目前来说，前端岗位较后端来说，岗位比后端少，但是普通本科教前端的也是比较少，所以相对后端比较好找工作，而且前端更新快，需要不断学习，目前框架都默认已经是Vue3了。开始工资比后端高很多，后续得看自己的发展。" class="headerlink" title="*** 就目前来说，前端岗位较后端来说，岗位比后端少，但是普通本科教前端的也是比较少，所以相对后端比较好找工作，而且前端更新快，需要不断学习，目前框架都默认已经是Vue3了。开始工资比后端高很多，后续得看自己的发展。"></a>*** 就目前来说，前端岗位较后端来说，岗位比后端少，但是普通本科教前端的也是比较少，所以相对后端比较好找工作，而且前端更新快，需要不断学习，目前框架都默认已经是Vue3了。开始工资比后端高很多，后续得看自己的发展。</h4><h4 id="后端就前端来说，岗位较多，但是学习后端的也多，大部分985，211都较后端，所以竞争会较大，就是所谓的卷。后端入门难，深入也难，逻辑好一点的可以学习，后端的日常就是bug，可能会比较枯燥。更新换代也没有前端那么快，需要基础扎实。如果想进大厂的话，算法就好，开始工资没有前端高，后面看自己了就。"><a href="#后端就前端来说，岗位较多，但是学习后端的也多，大部分985，211都较后端，所以竞争会较大，就是所谓的卷。后端入门难，深入也难，逻辑好一点的可以学习，后端的日常就是bug，可能会比较枯燥。更新换代也没有前端那么快，需要基础扎实。如果想进大厂的话，算法就好，开始工资没有前端高，后面看自己了就。" class="headerlink" title="*** 后端就前端来说，岗位较多，但是学习后端的也多，大部分985，211都较后端，所以竞争会较大，就是所谓的卷。后端入门难，深入也难，逻辑好一点的可以学习，后端的日常就是bug，可能会比较枯燥。更新换代也没有前端那么快，需要基础扎实。如果想进大厂的话，算法就好，开始工资没有前端高，后面看自己了就。"></a>*** 后端就前端来说，岗位较多，但是学习后端的也多，大部分985，211都较后端，所以竞争会较大，就是所谓的卷。后端入门难，深入也难，逻辑好一点的可以学习，后端的日常就是bug，可能会比较枯燥。更新换代也没有前端那么快，需要基础扎实。如果想进大厂的话，算法就好，开始工资没有前端高，后面看自己了就。</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 学习介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven入门</title>
      <link href="/2022/04/03/Maven/"/>
      <url>/2022/04/03/Maven/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章：Maven安装："><a href="#第一章：Maven安装：" class="headerlink" title="第一章：Maven安装："></a>第一章：Maven安装：</h2><h3 id="1-需要改进项目的开发和管理，需要maven"><a href="#1-需要改进项目的开发和管理，需要maven" class="headerlink" title="1.需要改进项目的开发和管理，需要maven"></a>1.需要改进项目的开发和管理，需要maven</h3><ul><li><strong>（1）maven可以管理jar文件</strong></li><li><strong>（2）自动下载jar和它的文档，源代码</strong></li><li><strong>（3）管理jar直接的依赖，a.jar 需要 b.jar，maven会自动下载b.jar</strong></li><li><strong>（4）管理你需要的jar版本</strong></li><li><strong>（5）把你测试你的代码是否正确</strong></li><li><strong>（6）帮你编译程序，把java编译为class</strong></li><li><strong>（7）帮你打包文件，形成jar文件，或者是war文件</strong></li><li><strong>（8）帮你部署项目</strong></li></ul><h3 id="2-构建：项目的构建"><a href="#2-构建：项目的构建" class="headerlink" title="2.构建：项目的构建"></a>2.构建：项目的构建</h3><h4 id="构建是面向过程的，就是一些步骤，完成项目代码的编译，测试，运行，打包，部署等等。"><a href="#构建是面向过程的，就是一些步骤，完成项目代码的编译，测试，运行，打包，部署等等。" class="headerlink" title="构建是面向过程的，就是一些步骤，完成项目代码的编译，测试，运行，打包，部署等等。"></a>构建是面向过程的，就是一些步骤，完成项目代码的编译，测试，运行，打包，部署等等。</h4><h4 id="maven支持的构建包括有："><a href="#maven支持的构建包括有：" class="headerlink" title="maven支持的构建包括有："></a>maven支持的构建包括有：</h4><ul><li><p><strong>1.清理，把之前项目编译的东西删除掉，我新的编译代码做准备。</strong></p></li><li><p><strong>2.编译，把程序源代码编译为执行代码，java—class文件。批量的，maven可以同时把成千上百的文件编译为class。</strong></p><ul><li><strong>javac不一样，javac一次编译一个文件。</strong></li></ul></li><li><p><strong>3.测试，maven可以执行测试程序代码，验证你的功能是否正确。</strong></p><ul><li><strong>批量的，maven同时执行多个测试代码，同时测试很多功能。</strong></li></ul></li><li><p><strong>4.报告，生成测试结果的文件，测试通过没有。</strong></p></li><li><p><strong>5.打包，把你的项目中所有的class文件，配置文件等所有资源放到一个压缩文件中。这个压缩文件就是项目的结果文件，通常java程序，压缩文件是jar扩展名的。对于web应用，压缩文件扩展名是.war。</strong></p></li><li><p><strong>6.把5中生成的文件jar，war安装到本机仓库</strong></p></li><li><p><strong>7.部署，把程序安装好可以执行。</strong></p></li></ul><h3 id="3-maven核心概念：用好maven，了解这些概念"><a href="#3-maven核心概念：用好maven，了解这些概念" class="headerlink" title="3.maven核心概念：用好maven，了解这些概念"></a>3.maven核心概念：用好maven，了解这些概念</h3><ul><li><strong>（1）pow：一个文件，名称是pom.xml，pom翻译过来叫做对象模型。maven把一个项目当做模型使用。可以控制maven构建项目的过程，管理jar依赖。</strong></li><li><strong>（2）约定的目录结构：maven项目的目录和文件的位置都是规定的。</strong></li><li><strong>（3）坐标：是一个唯一的字符串，用来表示资源的。</strong></li><li><strong>（4）依赖管理：管理你的项目可以使用jar文件。</strong></li><li><strong>（5）仓库管理（了解）：你的资源存放的位置</strong></li><li><strong>（6）   生命周期(了解)：maven工具构建的时候用的工具是插件</strong></li><li><strong>（7）插件和目标(了解)：执行maven构建的时候用的工具是插件</strong></li><li><strong>（8）   继承</strong></li><li><strong>（9） 聚合</strong></li></ul><h3 id="4-maven工具的安装和配置。"><a href="#4-maven工具的安装和配置。" class="headerlink" title="4.maven工具的安装和配置。"></a>4.maven工具的安装和配置。</h3><ul><li><p><strong>（1）需要从maven的官网下载maven的安装包</strong></p></li><li><p><strong>（2）解压安装包，解压到一个目录，非中午目录。</strong></p><ul><li><strong>子目录 bin：执行程序，主要是mvn.cmd</strong></li></ul></li><li><p><strong>（3）配置环境变量</strong></p></li></ul><pre class=" language-bash"><code class="language-bash">cmd下：    mvn -v</code></pre><h2 id="第二章：Maven的核心概念"><a href="#第二章：Maven的核心概念" class="headerlink" title="第二章：Maven的核心概念"></a>第二章：Maven的核心概念</h2><h4 id="1-Maven工程约定目录结构，约定是大家都遵循的一个规则。"><a href="#1-Maven工程约定目录结构，约定是大家都遵循的一个规则。" class="headerlink" title="1.Maven工程约定目录结构，约定是大家都遵循的一个规则。"></a>1.Maven工程约定目录结构，约定是大家都遵循的一个规则。</h4><h4 id="每一个maven项目在磁盘中都是一个文件夹-项目-Hello"><a href="#每一个maven项目在磁盘中都是一个文件夹-项目-Hello" class="headerlink" title="每一个maven项目在磁盘中都是一个文件夹(项目-Hello)"></a>每一个maven项目在磁盘中都是一个文件夹(项目-Hello)</h4><pre class=" language-bash"><code class="language-bash">Hello/- - -/src- - - - - - - -/main                  <span class="token comment" spellcheck="true"># 放置你的主程序java代码和配置文件</span>- - - - - - - - - - - -/java               <span class="token comment" spellcheck="true"># 你的程序包和包中的java文件</span>- - - - - - - - - - - -/resources    <span class="token comment" spellcheck="true">#你的java程序中要使用的配置文件 </span>- - - - - - - - /test                    <span class="token comment" spellcheck="true"># 放测试程序代码和文件的(可以没有)</span>- - - - - - - - - - - - -/java          <span class="token comment" spellcheck="true"># 测试程序包和包中的java文件</span>- - - - - - - - - - - - -/resources      <span class="token comment" spellcheck="true">#测试java程序中要使用的配置文件</span>- - -/pom.xml  maven的核心文件<span class="token punctuation">(</span>maven项目必须有<span class="token punctuation">)</span></code></pre><h4 id="2-疑问：mvn-compile-编译src-x2F-main目录下的所有java文件的。"><a href="#2-疑问：mvn-compile-编译src-x2F-main目录下的所有java文件的。" class="headerlink" title="2.疑问：mvn compile 编译src&#x2F;main目录下的所有java文件的。"></a>2.疑问：mvn compile 编译src&#x2F;main目录下的所有java文件的。</h4><h5 id="1-为什么要下载"><a href="#1-为什么要下载" class="headerlink" title="(1)为什么要下载"></a>(1)为什么要下载</h5><ul><li><strong>maven工具执行的操作需要很多插件(java类 - - jar文件)完成的。</strong></li></ul><h5 id="2-下载什么东西了"><a href="#2-下载什么东西了" class="headerlink" title="(2)下载什么东西了"></a>(2)下载什么东西了</h5><ul><li><strong>jar文件 - - 叫做插件 - - 插件是完成某些功能</strong></li></ul><h5 id="3-下载的东西存放到哪里了？C-Users-用户名-m2-repository"><a href="#3-下载的东西存放到哪里了？C-Users-用户名-m2-repository" class="headerlink" title="(3)下载的东西存放到哪里了？C:\Users\用户名.m2\repository"></a>(3)下载的东西存放到哪里了？C:\Users\用户名.m2\repository</h5><ul><li><strong>执行mvn compile，结果是在项目的根目录下生成target目录(结果目录)，maven编译的java程序，最后的class文件都放在target目录中</strong></li></ul><h4 id="设置本机存放资源的目录位置-设置本地仓库-："><a href="#设置本机存放资源的目录位置-设置本地仓库-：" class="headerlink" title="设置本机存放资源的目录位置(设置本地仓库)："></a>设置本机存放资源的目录位置(设置本地仓库)：</h4><ul><li><p><strong>1.修改maven的配置文件，maven安装目录&#x2F;conf&#x2F;settings.xml</strong></p><ul><li><strong>先备份settings.xml</strong></li></ul></li><li><p><strong>2.修改local_repository 指定你的目录(不要使用中文目录)</strong></p></li></ul><h4 id="maven安装："><a href="#maven安装：" class="headerlink" title="maven安装："></a>maven安装：</h4><ul><li><strong>1.获取安装包，zip文件</strong></li><li><strong>2.解压缩文件，到一个目录,非中文目录</strong></li><li><strong>3.配置环境变量, M2_ HOME他的值是maven的安装目录</strong></li><li><strong>4.在path中加入%M2_ HOME%\bin</strong></li><li><strong>5.测试maven的安装,使用mvn -v,查看maven的版本信息</strong></li></ul><h4 id="maven的核心概念："><a href="#maven的核心概念：" class="headerlink" title="maven的核心概念："></a>maven的核心概念：</h4><ul><li><p><strong>1.约定的目录结构</strong></p><ul><li><strong>项目的目录Hello</strong></li><li><strong>src和pom.xml平级的</strong></li><li><strong>src&#x2F;test</strong><ul><li><strong>java:测试程序代码的</strong></li><li><strong>resources:配置文件</strong></li></ul></li><li><strong>src&#x2F;main</strong><ul><li><strong>java :主程序java文件</strong></li><li><strong>resources:配置文件</strong></li></ul></li></ul></li><li><p><strong>2.坐标(gav)</strong></p><ul><li><strong>1.groupld :组织编码，域名倒写</strong></li><li><strong>2.artifactld:项目名称</strong></li><li><strong>3.version:自定义版本号</strong></li></ul></li><li><p><strong>3.依赖( dependency) : maven管理依赖</strong></p><ul><li><strong>使用依赖把jar导入到你的项目中。</strong></li><li><strong><dependency></dependency></strong></li><li><strong><groupld>junit</groupld></strong></li><li><strong><artifactld> junit&lt; &#x2F;artifactld&gt;</artifactld></strong></li><li><strong><version>4.11 </version></strong></li><li><strong></strong></li></ul></li><li><p><strong>4.仓库</strong></p><ul><li><strong>存放的jar , maven的插件等等</strong></li><li><strong>仓库分类</strong><ul><li><strong>中央仓库:最权威的,所有的资源都在这里</strong></li><li><strong>本地仓库,可以在mave安装目录&#x2F;conf&#x2F;settings.xml指定, <localRepository>非中文路径，不要有空</localRepository></strong></li><li><strong>中央仓库的镜像:分担压力的</strong></li><li><strong>私服:公司的局域网内部使用的</strong></li></ul></li></ul></li><li><p><strong>5.maven的命令</strong></p><ul><li><strong>maven通过命令完成项目的构建</strong></li><li><strong>mvn clean :清理</strong></li><li><strong>mvn compile :编译src&#x2F;main&#x2F;java目录中的程序,把java编译为class文件,并放到target&#x2F;classes目录中;同时会到target&#x2F;classes目录中</strong></li><li><strong>mvn test-complie一编译src&#x2F;main&#x2F;test目录 下的java程序,拷贝到target&#x2F;test-classes目录中</strong></li><li><strong>mvn test - 可以进行单元测试，使用junit测试src&#x2F;main&#x2F;java目录中的程序是否符合要求</strong></li><li><strong>mvn package:打包一把程序中src&#x2F;main&#x2F; 下面的java编译后的class和resources中的配置文件放入到-个压缩</strong></li><li><strong>mvn install：把jar，war安装到本机的仓库中</strong></li></ul></li><li><p><strong>6.maven的生命周期和插件</strong></p><ul><li><strong>生命周期:项目的构建过程清理,编译,测试，报告,打包，安装,部署</strong></li><li><strong>插件: maven提供的功能。用来执行清理。编译，测试，报告,打包的程序</strong></li></ul></li></ul><h4 id="maven常用设置"><a href="#maven常用设置" class="headerlink" title="maven常用设置"></a>maven常用设置</h4><ul><li><strong>1.maven自己的属性</strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proiject.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>&lt; maven.compiler.source> 1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span> 1.8 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span></code></pre><ul><li><strong>2.自定义变量</strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--自定义变量，表示版本号-</span> <span class="token attr-name">-</span><span class="token punctuation">></span></span>&lt; spring.version> 5.2.5 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">></span></span>&lt; dependency>&lt; groupld>junit <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupld</span><span class="token punctuation">></span></span>&lt; artifactld>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactld</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span> ${junit.version}&lt; /version><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li><strong>3.maven常用设置</strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>maven常用设置&lt; directory> src/main/java&lt; /directory><span class="token comment" spellcheck="true">&lt;!--所在的目录--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--包括目录下的.properties, .xml文件都会扫描到--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span> **/*.properties &lt; /include><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xrml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>&lt; /includes><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--filtering</span> <span class="token attr-name">选项false不启用过滤器，*.property</span> <span class="token attr-name">已经起到过滤的作用了--</span><span class="token punctuation">></span></span>&lt; fitering> false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>3.resource资源插件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>、</code></pre><ul><li><strong>1.默认没有使用resources的时候，maven执行编译代码时，会把src&#x2F;main&#x2F;resources目录中的文件拷贝到targ，对于src&#x2F;main&#x2F;java目录下的非java文件不处理。不拷贝到target&#x2F;classes目录中</strong></li><li><strong>2.我们的程序有需要把-些文件放在src&#x2F;main&#x2F;java目录中，当我在执行java程序时。需要用到src&#x2F;main&#x2F;javaE<br>需要告诉maven在mvn compile src&#x2F;main&#x2F;java目录下的程序时。需要把文件一同拷贝到target&#x2F;classes目录中，<br>此时就需要在<build>中加入<resources>.</resources></build></strong></li></ul><h3 id="5-仓库"><a href="#5-仓库" class="headerlink" title="5.仓库"></a>5.仓库</h3><h4 id="1）仓库是什么：仓库是存放东西的，存放maven使用的jar和我们项目使用的jar"><a href="#1）仓库是什么：仓库是存放东西的，存放maven使用的jar和我们项目使用的jar" class="headerlink" title="1）仓库是什么：仓库是存放东西的，存放maven使用的jar和我们项目使用的jar"></a>1）仓库是什么：仓库是存放东西的，存放maven使用的jar和我们项目使用的jar</h4><ul><li><strong>maven使用的插件(各种jar包)</strong></li><li><strong>我项目使用的jar包(第三方的工具)</strong></li></ul><h4 id="2-仓库的分类："><a href="#2-仓库的分类：" class="headerlink" title="2)  仓库的分类："></a>2)  仓库的分类：</h4><ul><li><strong>本地仓库，就是你的个人计算机的文件夹，存放各种jar</strong></li><li><strong>远程仓库：在互联网上的，使用网络才能使用的仓库</strong><ul><li><strong>（1）：中央仓库，最权威的，所有开发人员都共享使用的一个集中的仓库，</strong><ul><li><strong><a href="https://repo.maven.apache.org/">https://repo.maven.apache.org</a>  : 中央仓库地址</strong></li></ul></li><li><strong>（2）：中央仓库的镜像：就是中央仓库的备份，在各大洲，重要的城市都是镜像</strong></li><li><strong>（3）：私服，在公司内部，在局域网中使用的，不是对外使用的。</strong></li></ul></li></ul><h4 id="3）-仓库的使用，maven仓库的使用不需要人为参与。"><a href="#3）-仓库的使用，maven仓库的使用不需要人为参与。" class="headerlink" title="3） 仓库的使用，maven仓库的使用不需要人为参与。"></a>3） 仓库的使用，maven仓库的使用不需要人为参与。</h4><ul><li><strong>开发人员需要使用mysql驱动—&gt;maven首先先查本地仓库—&gt;私服—&gt;镜像–&gt;-中央仓库</strong></li></ul><h3 id="6-pom-项目对象模型，maven仓库的使用不需要人为参与"><a href="#6-pom-项目对象模型，maven仓库的使用不需要人为参与" class="headerlink" title="6.pom:项目对象模型，maven仓库的使用不需要人为参与"></a>6.pom:项目对象模型，maven仓库的使用不需要人为参与</h3><h4 id="pom-xml初识："><a href="#pom-xml初识：" class="headerlink" title="pom.xml初识："></a>pom.xml初识：</h4><ul><li><strong>坐标：唯一值，在互联网中唯一标识一个项目的</strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>公司域名的倒写<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>自定义项目名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>自定义版本号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> </code></pre><h5 id="www-mvnrepository-com-搜索使用中央仓库，使用groupId或者artifactId作为搜索条件"><a href="#www-mvnrepository-com-搜索使用中央仓库，使用groupId或者artifactId作为搜索条件" class="headerlink" title="www.mvnrepository.com:搜索使用中央仓库，使用groupId或者artifactId作为搜索条件"></a><a href="http://www.mvnrepository.com:搜索使用中央仓库，使用groupId或者artifactId作为搜索条件">www.mvnrepository.com:搜索使用中央仓库，使用groupId或者artifactId作为搜索条件</a></h5><ul><li><strong>packaging:打包后压缩文件的扩展名，默认是jar，web应用是war。</strong></li><li><strong>依赖：</strong><ul><li><strong>dependencies和dependency ,相当于是java代码中import</strong></li><li><strong>你的项目要使用的各种资源说明，比我的项目要使用mysql驱动</strong></li></ul></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencie</span> <span class="token attr-name">s</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--依赖java代码中 import--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>mysql - connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>&lt;/ dependency>&lt;/ dependencies></code></pre><ul><li><strong>properties：设置属性</strong></li><li><strong>build：maven在进行项目的构建时，配置信息，例如指定编译java代码使用的jdk版本等。</strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><ul><li><strong>pom.xml加入依赖的方式:</strong></li></ul><pre class=" language-xml"><code class="language-xml">log4j日志依赖<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupld</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupld</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactld</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactld</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>junit单元测试依赖<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupld</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupld</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactld</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactld</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1 1 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="7-maven生命周期，maven的命令，maven的插件"><a href="#7-maven生命周期，maven的命令，maven的插件" class="headerlink" title="7.maven生命周期，maven的命令，maven的插件"></a>7.maven生命周期，maven的命令，maven的插件</h3><h4 id="maven的生命周期：就是maven构建项目的过程，清理，编译，测试，报告，打包，安装，部署"><a href="#maven的生命周期：就是maven构建项目的过程，清理，编译，测试，报告，打包，安装，部署" class="headerlink" title="maven的生命周期：就是maven构建项目的过程，清理，编译，测试，报告，打包，安装，部署"></a>maven的生命周期：就是maven构建项目的过程，清理，编译，测试，报告，打包，安装，部署</h4><h4 id="maven的命令：maven独立使用，通过命令，完成maven的生命周期的执行。maven可以使用命令，完成项目的清理，编译，测试，等"><a href="#maven的命令：maven独立使用，通过命令，完成maven的生命周期的执行。maven可以使用命令，完成项目的清理，编译，测试，等" class="headerlink" title="maven的命令：maven独立使用，通过命令，完成maven的生命周期的执行。maven可以使用命令，完成项目的清理，编译，测试，等"></a>maven的命令：maven独立使用，通过命令，完成maven的生命周期的执行。maven可以使用命令，完成项目的清理，编译，测试，等</h4><h4 id="maven的插件：maven命令执行时，真正完成功能的是插件，插件就是一些jar文件"><a href="#maven的插件：maven命令执行时，真正完成功能的是插件，插件就是一些jar文件" class="headerlink" title="maven的插件：maven命令执行时，真正完成功能的是插件，插件就是一些jar文件"></a>maven的插件：maven命令执行时，真正完成功能的是插件，插件就是一些jar文件</h4><ul><li><strong>单元测试(测试方法)：用的是junit，junit是一个专门测试的框架(工具)。</strong><ul><li><strong>junit测试的内容：测试的是类中的方法，每一个方法都是独立测试的。方法是测试得基本单位(单元)。</strong></li></ul></li></ul><h4 id="maven借助单元测试，批量的测试你类中的大量方法是否符号预期的。"><a href="#maven借助单元测试，批量的测试你类中的大量方法是否符号预期的。" class="headerlink" title="maven借助单元测试，批量的测试你类中的大量方法是否符号预期的。"></a>maven借助单元测试，批量的测试你类中的大量方法是否符号预期的。</h4><h4 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h4><ul><li><strong>1.加入依赖，在pom.xml加入单元测试依赖</strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>text&lt;/ scope><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li><strong>2.在maven项目中的src&#x2F;text&#x2F;java目录下，</strong><ul><li><strong>创建测试程序。推荐的创建类和方法的提示：</strong></li><li><strong>1.测试类的名称 是Test + 你要测试的类名</strong></li><li><strong>2.测试的方法名称 是：Test + 方法名称</strong></li></ul></li></ul><h5 id="例如：你要测试HelloMaven，"><a href="#例如：你要测试HelloMaven，" class="headerlink" title="例如：你要测试HelloMaven，"></a>例如：你要测试HelloMaven，</h5><h5 id="创建测试类-TestHelloMaven"><a href="#创建测试类-TestHelloMaven" class="headerlink" title="创建测试类 TestHelloMaven"></a>创建测试类 TestHelloMaven</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span>  <span class="token keyword">void</span>  <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//测试HelloMaven的add方法是否正确</span><span class="token punctuation">}</span></code></pre><h5 id="其中testAdd叫做测试方法，它的定义规则"><a href="#其中testAdd叫做测试方法，它的定义规则" class="headerlink" title="其中testAdd叫做测试方法，它的定义规则"></a>其中testAdd叫做测试方法，它的定义规则</h5><ul><li><p><strong>1.方法是public的，必须的</strong></p></li><li><p><strong>2.方法没有返回值，必须的</strong></p></li><li><p><strong>3.方法名称是自定义的，推荐是Test + 方法名称</strong></p></li><li><p><strong>4.在方法的上面加入@Test</strong></p></li></ul><h5 id="mvn-compile编译main-x2F-java-x2F-目录下的java-为class文件，同时把class拷贝到-target-x2F-classes目录下面把main-x2F-resources目录下的所有文件-都拷贝到target-x2F-classes目录下"><a href="#mvn-compile编译main-x2F-java-x2F-目录下的java-为class文件，同时把class拷贝到-target-x2F-classes目录下面把main-x2F-resources目录下的所有文件-都拷贝到target-x2F-classes目录下" class="headerlink" title="mvn  compile编译main&#x2F;java&#x2F;目录下的java 为class文件，同时把class拷贝到 target&#x2F;classes目录下面把main&#x2F;resources目录下的所有文件  都拷贝到target&#x2F;classes目录下"></a>mvn  compile编译main&#x2F;java&#x2F;目录下的java 为class文件，同时把class拷贝到 target&#x2F;classes目录下面把main&#x2F;resources目录下的所有文件  都拷贝到target&#x2F;classes目录下</h5><h3 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h3><h4 id="1-在idea中设置maven，让idea和maven结合使用。"><a href="#1-在idea中设置maven，让idea和maven结合使用。" class="headerlink" title="1.在idea中设置maven，让idea和maven结合使用。"></a>1.在idea中设置maven，让idea和maven结合使用。</h4><h5 id="idea中内置了maven，一般不使用内置的，因为用内置修改maven的设置不方便。"><a href="#idea中内置了maven，一般不使用内置的，因为用内置修改maven的设置不方便。" class="headerlink" title="idea中内置了maven，一般不使用内置的，因为用内置修改maven的设置不方便。"></a>idea中内置了maven，一般不使用内置的，因为用内置修改maven的设置不方便。</h5><h5 id="使用自己安装的maven，需要覆盖idea中的默认的设置。让idea知道maven安装位置等信息"><a href="#使用自己安装的maven，需要覆盖idea中的默认的设置。让idea知道maven安装位置等信息" class="headerlink" title="使用自己安装的maven，需要覆盖idea中的默认的设置。让idea知道maven安装位置等信息"></a>使用自己安装的maven，需要覆盖idea中的默认的设置。让idea知道maven安装位置等信息</h5><ul><li><p><strong>配置的入口,①:配置当前工程的设置，</strong></p><ul><li><strong>file–settings —Build, Excution , Deployment–Build</strong></li><li><strong>- -Maven</strong></li><li><strong>Maven Home di rectory: maven 的安装目录</strong></li><li><strong>User settings File :就是maven安装目录conf&#x2F;setting . xm1配置文件</strong></li><li><strong>Local Repository : 本机仓库的目录位置</strong></li><li><strong>–Build Tools –Maven- -Runner</strong></li><li><strong>VM Options : arche typeCatalog- -internal</strong></li><li><strong>JRE:你项目的jdk</strong></li><li><strong>archetypeCatalog&#x3D;internal，maven项 目创建时，会联网下载模版文件,</strong></li><li><strong>比较大，使用 archetypeCatalog- internal,不用下载，创建maven项 目速度快</strong></li></ul></li><li><p><strong>②:配置以后新建工程的设置，</strong></p><ul><li><strong>file–other settings–settings for New Project</strong></li></ul></li></ul><h4 id="2-使用模板创建项目"><a href="#2-使用模板创建项目" class="headerlink" title="2.使用模板创建项目"></a>2.使用模板创建项目</h4><ul><li><strong>1）maven-archetype-quickstart：普通的java项目</strong></li><li><strong>2）maven-archetype-webapp：web工程</strong></li></ul><h3 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a>第四部分</h3><h4 id="1-依赖范围，使用scope表示的。"><a href="#1-依赖范围，使用scope表示的。" class="headerlink" title="1.依赖范围，使用scope表示的。"></a>1.依赖范围，使用scope表示的。</h4><h5 id="scope的值有-compile，test，provided"><a href="#scope的值有-compile，test，provided" class="headerlink" title="scope的值有 compile，test，provided"></a>scope的值有 compile，test，provided</h5><h5 id="scope：表示依赖使用的范围，也就是在maven构建项目的哪些阶段中起作用。；"><a href="#scope：表示依赖使用的范围，也就是在maven构建项目的哪些阶段中起作用。；" class="headerlink" title="scope：表示依赖使用的范围，也就是在maven构建项目的哪些阶段中起作用。；"></a>scope：表示依赖使用的范围，也就是在maven构建项目的哪些阶段中起作用。；</h5><h5 id="maven构建项目-清理，编译，测试，打包，安装，部署-过程-阶段"><a href="#maven构建项目-清理，编译，测试，打包，安装，部署-过程-阶段" class="headerlink" title="maven构建项目    清理，编译，测试，打包，安装，部署 过程(阶段)"></a>maven构建项目    清理，编译，测试，打包，安装，部署 过程(阶段)</h5><h5 id="junit的依赖范围是-test"><a href="#junit的依赖范围是-test" class="headerlink" title="junit的依赖范围是 test"></a>junit的依赖范围是 test</h5><h5 id="依赖的范围-compile、test-provided-默认采用compile"><a href="#依赖的范围-compile、test-provided-默认采用compile" class="headerlink" title="依赖的范围: compile、test. provided ,默认采用compile"></a>依赖的范围: compile、test. provided ,默认采用compile</h5><table><thead><tr><th></th><th>compile</th><th>test</th><th>provided</th></tr></thead><tbody><tr><td>对主程序是否有效</td><td>是</td><td>否</td><td>是</td></tr><tr><td>对测试程序是否有效</td><td>是</td><td>是</td><td>是</td></tr><tr><td>是否参与打包</td><td>是</td><td>否</td><td>否</td></tr><tr><td>是否参与部署</td><td>是</td><td>否</td><td>否</td></tr></tbody></table><h3 id="第五部分："><a href="#第五部分：" class="headerlink" title="第五部分："></a>第五部分：</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- maven构建项目使用编码， 避免中文乱码--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF - 8&lt;/ project.build.sourceEncoding><span class="token comment" spellcheck="true">&lt;!--编译代码使用的jdk版本--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.</span> <span class="token attr-name">compiler.source</span><span class="token punctuation">></span></span>1.8&lt; /maven.compiler.source><span class="token comment" spellcheck="true">&lt;!--运行程序使用的jdk版本--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.</span> <span class="token attr-name">compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><h4 id="maven常用操作"><a href="#maven常用操作" class="headerlink" title="maven常用操作"></a>maven常用操作</h4><h5 id="1-maven的属性设置"><a href="#1-maven的属性设置" class="headerlink" title="1.maven的属性设置"></a>1.maven的属性设置</h5><ul><li><strong><properties>设置maven的常用属性</properties></strong></li></ul><h5 id="2-maven的全局变量"><a href="#2-maven的全局变量" class="headerlink" title="2.maven的全局变量"></a>2.maven的全局变量</h5><h5 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性,"></a>自定义属性,</h5><ul><li><strong>1.在<properties>通过自定义标签来声明变量(标签名就是变量名)</properties></strong></li><li><strong>2.在pom.xm|文件中的其他位置，使用${标签名}使用变量名的值</strong><ul><li><strong>自定义全局变量-般是定义依赖的版本号，当你的项目中要使用多个相同的版本号,先使用全局变量定义,再使用${变量名}</strong></li></ul></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--自定义变量，表示版本号--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span> I<span class="token comment" spellcheck="true">&lt;!-- spring依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org . springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring- core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span> ${spring.version<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></code></pre><h5 id="3-资源插件："><a href="#3-资源插件：" class="headerlink" title="3.资源插件："></a>3.资源插件：</h5><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--所在的目录--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--包括目录下的. properties, .xml文件都会扫描到--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties&lt;/ include>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!-</span> <span class="token attr-name">filtering选项false</span> <span class="token attr-name">不启用过滤器，*</span> <span class="token attr-name">.property已经起到过滤的作用了--</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fil</span> <span class="token attr-name">tering</span><span class="token punctuation">></span></span> false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><h5 id="作用：mybaits课程中会用到这个作用"><a href="#作用：mybaits课程中会用到这个作用" class="headerlink" title="作用：mybaits课程中会用到这个作用"></a>作用：mybaits课程中会用到这个作用</h5><ul><li><strong>1.默认没有使用resources的时候，maven执行编译代码时，会把src&#x2F;main&#x2F;resourse目录中的文件拷贝到target&#x2F;classes目录中</strong><ul><li><strong>对于src&#x2F;main&#x2F;java目录下的非java文件不处理，不拷贝到target&#x2F;classes目录中</strong></li></ul></li><li><strong>2.我们的程序有需要把一些文件放在src&#x2F;main&#x2F;java目录中，当我在执行java程序时，需要用到src&#x2F;main&#x2F;java目录中的文件。需要告诉maven 在  mvn  compile  src&#x2F;main&#x2F;java 目录下的程序时，需要要把文件一同拷贝到target&#x2F;classes目录中。</strong><ul><li><strong>此时就需要在<build>中加入<resources></resources></build></strong></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门</title>
      <link href="/2022/04/02/Docker/"/>
      <url>/2022/04/02/Docker/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker入门"><a href="#Docker入门" class="headerlink" title="Docker入门"></a>Docker入门</h2><h4 id="VM虚拟机缺点："><a href="#VM虚拟机缺点：" class="headerlink" title="VM虚拟机缺点："></a>VM虚拟机缺点：</h4><ul><li><strong>1、资源占用多</strong></li><li><strong>2、冗余步骤多</strong></li><li><strong>3、启动慢</strong></li></ul><h5 id="Docker是内核级虚拟化，其不像传统的虚拟化技术-样-需要额外的Hypervisor支持，所以在T一-台物理机上可以运行很多个容器实例，可大大提升物理服务器的CPU和内存的利用率。"><a href="#Docker是内核级虚拟化，其不像传统的虚拟化技术-样-需要额外的Hypervisor支持，所以在T一-台物理机上可以运行很多个容器实例，可大大提升物理服务器的CPU和内存的利用率。" class="headerlink" title="Docker是内核级虚拟化，其不像传统的虚拟化技术- -样 需要额外的Hypervisor支持，所以在T一 台物理机上可以运行很多个容器实例，可大大提升物理服务器的CPU和内存的利用率。"></a>Docker是内核级虚拟化，其不像传统的虚拟化技术- -样 需要额外的Hypervisor支持，所以在T一 台物理机上可以运行很多个容器实例，可大大提升物理服务器的CPU和内存的利用率。</h5><h3 id="Docker的三大组成：镜像，容器，仓库"><a href="#Docker的三大组成：镜像，容器，仓库" class="headerlink" title="Docker的三大组成：镜像，容器，仓库"></a>Docker的三大组成：镜像，容器，仓库</h3><h4 id="Docker镜像-Image-就是一一个只读的模板。镜像可以用来创建Docker容器，一个镜像可以创建很多容器。"><a href="#Docker镜像-Image-就是一一个只读的模板。镜像可以用来创建Docker容器，一个镜像可以创建很多容器。" class="headerlink" title="Docker镜像(Image)就是一一个只读的模板。镜像可以用来创建Docker容器，一个镜像可以创建很多容器。"></a>Docker镜像(Image)就是一一个只读的模板。镜像可以用来创建Docker容器，一个镜像可以创建很多容器。</h4><h4 id="它也相当于是一个root文件系统。比如官方镜像centos-7就包含了完整的一套-centos-7最小系统的root文件系统。"><a href="#它也相当于是一个root文件系统。比如官方镜像centos-7就包含了完整的一套-centos-7最小系统的root文件系统。" class="headerlink" title="它也相当于是一个root文件系统。比如官方镜像centos:7就包含了完整的一套 centos:7最小系统的root文件系统。"></a>它也相当于是一个root文件系统。比如官方镜像centos:7就包含了完整的一套 centos:7最小系统的root文件系统。</h4><h4 id="相当于容器的“源代码”，docker镜像文件类似于Java的类模板，而docker容-器实例类似于java中new出来的实例对象。"><a href="#相当于容器的“源代码”，docker镜像文件类似于Java的类模板，而docker容-器实例类似于java中new出来的实例对象。" class="headerlink" title="相当于容器的“源代码”，docker镜像文件类似于Java的类模板，而docker容 器实例类似于java中new出来的实例对象。"></a>相当于容器的“源代码”，docker镜像文件类似于Java的类模板，而docker容 器实例类似于java中new出来的实例对象。</h4><ul><li><p><strong>1、从面向对象角度</strong></p><ul><li><strong>Docker利用容器(Container) 独立运行的一个或- -组应用， 应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境，容器是用镜像创建的运行实例。就像是Java中的类和实例对象- -样，镜像是静态的定义，容器是镜像运行时的实体。容器为镜像提供了一个标准的和隔离的运行环境，它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台</strong></li></ul></li><li><p><strong>2、从镜像容器角度</strong></p><ul><li><strong>可以把容器看做是- - 个简易版的Linux环境(包括root用户权限、进程空间、用户空间和网络空间等)和运行在其中的应用程序。</strong></li></ul></li></ul><pre class=" language-markdown"><code class="language-markdown">仓库（Repository）是集中存放镜像文件的场所。类似于Maven仓库，存放各种jar包的地方；github仓库，存放各种git项目的地方；Docker公司提供的官方 registry 被称为Docker Hub，存放各种镜像模板的地方。仓库分为公开仓库（Public）和私有仓库（Private）两种形式。最大的公开仓库是 Docker Hub（https://hub.docker.com/），存放数量庞大的镜像供用户下载。国内的公开仓库包括阿里云，网易云等</code></pre><h4 id="需要正确的理解仓库-x2F-镜像-x2F-容器这几个概念"><a href="#需要正确的理解仓库-x2F-镜像-x2F-容器这几个概念" class="headerlink" title="需要正确的理解仓库&#x2F;镜像&#x2F;容器这几个概念:"></a>需要正确的理解仓库&#x2F;镜像&#x2F;容器这几个概念:</h4><ul><li><p><strong>Docker本身是- -个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成- - 个可交付的运行环境，这个打包好的运行环境就是image镜像文件。只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来- - 个对象)。</strong></p></li><li><p><strong>image文件可以看作是容器的模板。Docker 根据image文件生成容器的实例。同一个image文件，可以生成多个同时运行的容器实例。</strong></p></li></ul><h4 id="镜像文件"><a href="#镜像文件" class="headerlink" title="镜像文件"></a>镜像文件</h4><ul><li><strong>image 文件生成的容器实例，本身也是-一个文件，称为镜像文件。</strong></li></ul><h4 id="容器实例"><a href="#容器实例" class="headerlink" title="容器实例"></a>容器实例</h4><ul><li><strong>一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建- -个对应的运行实例， 也就是我们的容器</strong></li></ul><h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h4><ul><li><strong>就是放- -堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候再从仓库中拉下来就可以了。</strong></li></ul><h4 id="Docker是一个Client-Server结构的系统，Docker守-护进程运行在主机上，然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。容器，是一个运行时环境，就是我们前面说到的集装箱。可以对比mysq-演-示对比讲解。"><a href="#Docker是一个Client-Server结构的系统，Docker守-护进程运行在主机上，然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。容器，是一个运行时环境，就是我们前面说到的集装箱。可以对比mysq-演-示对比讲解。" class="headerlink" title="Docker是一个Client-Server结构的系统，Docker守 护进程运行在主机上，然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。容器，是一个运行时环境，就是我们前面说到的集装箱。可以对比mysq|演 示对比讲解。"></a>Docker是一个Client-Server结构的系统，Docker守 护进程运行在主机上，然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。容器，是一个运行时环境，就是我们前面说到的集装箱。可以对比mysq|演 示对比讲解。</h4><pre class=" language-xml"><code class="language-xml">yum install -y yum-utils device-mapper-persistent-data lvm2                                               //安装必要工具yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo             //设置yum源yum install -y docker-ce                                                                                     //下载dockersystemctl start docker                                                                                     //启动docker</code></pre><h4 id="为什么Docker会比VM虚拟机快？"><a href="#为什么Docker会比VM虚拟机快？" class="headerlink" title="为什么Docker会比VM虚拟机快？"></a>为什么Docker会比VM虚拟机快？</h4><ul><li><p><strong>（1）docker有着比虚拟机更少的抽象层</strong></p><ul><li><strong>由于docker不需要Hypervisor(虚拟机)实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上:docker将会在效率上有明显优势。</strong></li></ul></li><li><p><strong>（2）docker利用的是宿主机的内核,而不需要加载操作系统OS内核</strong></p><ul><li><strong>当新建一个容器时,docker不需要和虚拟机一样重新加载–个操作系统内核。进而避免引寻、加载操作系统内核返回等比较费时费<br>资源的过程,当新建–个虚拟机时,虛拟机软件需要加载OS,返回新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则<br>省略了返回过程,因此新建个docker容器只需要几秒钟。</strong></li></ul></li></ul><h3 id="帮助类启动命令："><a href="#帮助类启动命令：" class="headerlink" title="帮助类启动命令："></a>帮助类启动命令：</h3><pre class=" language-bash"><code class="language-bash">启动docker: systemctl start docker停止docker: systemctl stop docker重启docker: systemctl restart docker查看docker状态: systemctl status docker开机启动: systemctl <span class="token function">enable</span> docker查看docker概要信息: docker info</code></pre><h4 id="列出本地主机上的镜像："><a href="#列出本地主机上的镜像：" class="headerlink" title="列出本地主机上的镜像："></a>列出本地主机上的镜像：</h4><pre class=" language-bash"><code class="language-bash">docker images</code></pre><h5 id="各个选项说明："><a href="#各个选项说明：" class="headerlink" title="各个选项说明："></a>各个选项说明：</h5><pre class=" language-bash"><code class="language-bash">REPOSITORY:表示镜像的仓库源TAG:镜像的标签版本号IMAGE ID:镜像IDCREATED:镜像创建时间SIZE:镜像大小</code></pre><h5 id="同一仓库源可以有多个TAG版朴代表这个仓库源的不同个版本，我们使用REPOSITORY-TAG来定义不同的镜像。如果你不指定一个镜像的版本标签，例如你只使用ubuntu-docker-将默认使用-ubuntu-latest-镜像"><a href="#同一仓库源可以有多个TAG版朴代表这个仓库源的不同个版本，我们使用REPOSITORY-TAG来定义不同的镜像。如果你不指定一个镜像的版本标签，例如你只使用ubuntu-docker-将默认使用-ubuntu-latest-镜像" class="headerlink" title="同一仓库源可以有多个TAG版朴代表这个仓库源的不同个版本，我们使用REPOSITORY:TAG来定义不同的镜像。如果你不指定一个镜像的版本标签，例如你只使用ubuntu, docker 将默认使用 ubuntu:latest 镜像"></a>同一仓库源可以有多个TAG版朴代表这个仓库源的不同个版本，我们使用REPOSITORY:TAG来定义不同的镜像。如果你不指定一个镜像的版本标签，例如你只使用ubuntu, docker 将默认使用 ubuntu:latest 镜像</h5><h4 id="命令："><a href="#命令：" class="headerlink" title="命令："></a>命令：</h4><pre class=" language-bash"><code class="language-bash">docker images -a：列出本地所有的镜像（包括历史映像层）docker images -q：只显示镜像iddocker search 某个镜像名字</code></pre><h4 id="下载：（没写版本号默认下载最新版）"><a href="#下载：（没写版本号默认下载最新版）" class="headerlink" title="下载：（没写版本号默认下载最新版）"></a>下载：（没写版本号默认下载最新版）</h4><pre class=" language-bash"><code class="language-bash">docker pull ubuntudocker pull redis:6.0.8</code></pre><h4 id="删除：（删除镜像）"><a href="#删除：（删除镜像）" class="headerlink" title="删除：（删除镜像）"></a>删除：（删除镜像）</h4><pre class=" language-bash"><code class="language-bash">删除单个：docker rmi-f 镜像id删除多个：docker rmi-f 镜像名1:TAG 镜像名2:TAG删除全部：docker rmi-f <span class="token variable"><span class="token variable">$(</span>docker images -qa<span class="token variable">)</span></span></code></pre><h3 id="unbutu："><a href="#unbutu：" class="headerlink" title="unbutu："></a>unbutu：</h3><pre><code>新建+启动容器：docker run [OPTIONS] IMAGE [COMMAND] [ARG..] （启动交互式容器(前台命令行)）</code></pre><h4 id="OPTIONS说明："><a href="#OPTIONS说明：" class="headerlink" title="OPTIONS说明："></a>OPTIONS说明：</h4><pre class=" language-bash"><code class="language-bash">OPTIONS说明<span class="token punctuation">(</span>常用<span class="token punctuation">)</span> :有些是一个减号，有些是两个减号--name<span class="token operator">=</span><span class="token string">"容器新名字"</span>     为容器指定-一个名称<span class="token punctuation">;</span>-d:后台运行容器并返回容器ID，也即启动守护式容器<span class="token punctuation">(</span>后台运行<span class="token punctuation">)</span><span class="token punctuation">;</span>-i: 以交互模式运行容器，通常与-t同时使用<span class="token punctuation">;</span>-t: 为容器重新分配-一个伪输入终端，通常与-i同时使用<span class="token punctuation">;</span>也即启动交互式容器前台有伪终端，等待交互<span class="token punctuation">)</span><span class="token punctuation">;</span>-P:随机端口映射，大写P<span class="token operator">|</span>-p:指定端口映射，小写p</code></pre><h4 id="进入容器中："><a href="#进入容器中：" class="headerlink" title="进入容器中："></a>进入容器中：</h4><pre class=" language-bash"><code class="language-bash">docker run ubuntudocker run -it ubuntu /bin/bash<span class="token function">ps</span> -ef</code></pre><h4 id="查看正在运行的容器：（需在容器外面查看）"><a href="#查看正在运行的容器：（需在容器外面查看）" class="headerlink" title="查看正在运行的容器：（需在容器外面查看）"></a>查看正在运行的容器：（需在容器外面查看）</h4><pre class=" language-bash"><code class="language-bash">docker <span class="token function">ps</span></code></pre><h4 id="给容器取名字："><a href="#给容器取名字：" class="headerlink" title="给容器取名字："></a>给容器取名字：</h4><pre class=" language-bash"><code class="language-bash">docker run -it --name<span class="token operator">=</span>myu1 ubuntu /bin/bash</code></pre><h4 id="OPTIONS说明（常用）："><a href="#OPTIONS说明（常用）：" class="headerlink" title="OPTIONS说明（常用）："></a>OPTIONS说明（常用）：</h4><pre class=" language-bash"><code class="language-bash">-a:列出当前所有正在运行的容器+历史上运行过的-<span class="token operator">|</span>:显示最近创建的容器。-n:显示最近n个创建的容器。-q :静默模式，只显示容器编号。docker <span class="token function">ps</span> -n 1docker <span class="token function">ps</span> -q</code></pre><h4 id="退出容器："><a href="#退出容器：" class="headerlink" title="退出容器："></a>退出容器：</h4><pre class=" language-bash"><code class="language-bash"><span class="token keyword">exit</span> -- run进去容器，exit退出，容器停止ctrl+p+q -- run进去容器，ctrl+p+q退出，容器不停止docker start 容器id      启动已停止运行的容器docker restart 容器id或者容器名   重启容器docker stop 容器id或者容器名    停止容器docker <span class="token function">kill</span> 容器id或者容器名    强制停止容器docker <span class="token function">rm</span> 容器id     删除已停止的容器docker <span class="token function">rm</span> -f clever_curran     强制删除docker <span class="token function">rm</span> -f <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -a -p<span class="token variable">)</span></span>          一次性删除多个容器实例docker <span class="token function">ps</span> -a -q <span class="token operator">|</span> <span class="token function">xargs</span> docker <span class="token function">rm</span>    一次性删除多个容器实例</code></pre><h4 id="演示当前只有运行的id号："><a href="#演示当前只有运行的id号：" class="headerlink" title="演示当前只有运行的id号："></a>演示当前只有运行的id号：</h4><pre class=" language-bash"><code class="language-bash">docker <span class="token function">ps</span> -a -p</code></pre><h4 id="启动守护式容器（后台服务器）"><a href="#启动守护式容器（后台服务器）" class="headerlink" title="启动守护式容器（后台服务器）"></a>启动守护式容器（后台服务器）</h4><pre class=" language-bash"><code class="language-bash">docker run -d unbuntu</code></pre><h4 id="使用镜像centos：latest以后台模式启动一个容器"><a href="#使用镜像centos：latest以后台模式启动一个容器" class="headerlink" title="使用镜像centos：latest以后台模式启动一个容器"></a>使用镜像centos：latest以后台模式启动一个容器</h4><pre class=" language-bash"><code class="language-bash">docker run -d centos</code></pre><h4 id="问题-然后docker-ps-a进行查看-会发现容器已经退出"><a href="#问题-然后docker-ps-a进行查看-会发现容器已经退出" class="headerlink" title="问题:然后docker ps-a进行查看,会发现容器已经退出"></a>问题:然后docker ps-a进行查看,会发现容器已经退出</h4><h5 id="问题-然后docker-ps-a进行查看-会发现容器已经退出-1"><a href="#问题-然后docker-ps-a进行查看-会发现容器已经退出-1" class="headerlink" title="问题:然后docker ps-a进行查看,会发现容器已经退出"></a>问题:然后docker ps-a进行查看,会发现容器已经退出</h5><ul><li><strong>很重要的要说明的一点: Docker容器后台运行,就必须有一个前台进程.容器运行的命令如果不是那些一直挂起的命令 (比如运行top, tail) ，就是会自动退出的。</strong></li><li><strong>这个是docker的机制问题,比如你的web容器,我们以nginx为例，正常情况下，我们配置启动服务只需要启动响应的service即可。例如service nginx start但是,这样做,nginx为后台进程模式运行,就导致docker前台没有运行的应用,这样的容器后台启动后,会立即自杀因为他觉得他没事可做了.所以，最佳的解决方案是,将你要运行的程序以前台进程的形式运行，常见就是命令行模式，表示我还有交互操作，别中断，0(∩_∩)O哈哈~</strong></li></ul><h4 id="redis前后台启动演示case"><a href="#redis前后台启动演示case" class="headerlink" title="redis前后台启动演示case"></a>redis前后台启动演示case</h4><pre class=" language-bash"><code class="language-bash">（前台交互式启动）docker run -it redis:6.0.8（后台守护式启动）docker run -d redis:6.0.8（查看容器日志） docker logs 容器id</code></pre><h4 id="查看容器内运行的进程"><a href="#查看容器内运行的进程" class="headerlink" title="查看容器内运行的进程"></a>查看容器内运行的进程</h4><pre class=" language-bash"><code class="language-bash">docker <span class="token function">top</span> 容器id</code></pre><h4 id="重新进入未结束的容器"><a href="#重新进入未结束的容器" class="headerlink" title="重新进入未结束的容器"></a>重新进入未结束的容器</h4><pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it 容器id bashShelldocker attach 容器id</code></pre><h5 id="案例演示，用centos或者unbuntu都可以"><a href="#案例演示，用centos或者unbuntu都可以" class="headerlink" title="案例演示，用centos或者unbuntu都可以"></a>案例演示，用centos或者unbuntu都可以</h5><h5 id="上述两个区别："><a href="#上述两个区别：" class="headerlink" title="上述两个区别："></a>上述两个区别：</h5><ul><li><strong>推荐大家使用dockerexec命令，因为退出容器终端，不会导致容器的停止。</strong>、</li><li><strong>用之前的redis容器实例进入试试</strong></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>1<span class="token punctuation">)</span>: docker <span class="token function">exec</span> -it 容器id /bin/bash</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>2<span class="token punctuation">)</span>：docker attach 容器id</code></pre><ul><li><strong>attach直接进入容器启动命令的终端，不会启动新的进程,用exit退出，会导致容器的停止.</strong></li><li><strong>exec 是在容器中打开新的终端，并且可以启动新的进程，用exit退出，不会导致容器的停止。</strong></li></ul><h4 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h4><ul><li><strong>容器→主机</strong></li><li><strong>dockercp容器ID:容器内路径目的主机路径</strong></li></ul><h5 id="公式："><a href="#公式：" class="headerlink" title="公式："></a>公式：</h5><pre class=" language-bash"><code class="language-bash">docker cp容器ID:容器内路径目的主机路径</code></pre><h3 id="导入和导出容器"><a href="#导入和导出容器" class="headerlink" title="导入和导出容器"></a>导入和导出容器</h3><ul><li><strong>export 导出容器的内容流作为一个tar归档文件[对应import命令]</strong></li><li><strong>import从tar包中的内容创建一个新的文件系统再导入为镜像[对应export]</strong></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> abcd. <span class="token function">tar</span> <span class="token operator">|</span> docker <span class="token function">import</span> - atguigu/ ubuntu: 3.7</code></pre><h3 id="镜像："><a href="#镜像：" class="headerlink" title="镜像："></a>镜像：</h3><h4 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h4><ul><li><strong>是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成-个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。</strong></li><li><strong>只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来-一个对象)。</strong></li></ul><h4 id="UnionFS-联合文件系统"><a href="#UnionFS-联合文件系统" class="headerlink" title="UnionFS (联合文件系统) :"></a>UnionFS (联合文件系统) :</h4><ul><li><strong>Union文件 系统(UnionFS)是一.种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一.次提交来一层层的叠加，同时可以将不同目录挂载到同-一个虚拟文件系统下(unite several directories into a single virtualfilesystem)。Union 文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像(没有父镜像)，可以制作各种具体的应用镜像。</strong></li><li><strong>特性: - -次同时加载多个文件系统，但从外面看起来，只能看到-一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的</strong></li></ul><h4 id="Docker镜像层都是只读的，容器层是可写的当容器启动时，–个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。"><a href="#Docker镜像层都是只读的，容器层是可写的当容器启动时，–个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。" class="headerlink" title="Docker镜像层都是只读的，容器层是可写的当容器启动时，–个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。"></a>Docker镜像层都是只读的，容器层是可写的当容器启动时，–个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。</h4><ul><li><strong>当容器启动时，一个新的可写层被加载到镜像的顶部。这一-层通常被称作 “容器层”，“容器层” 之下的都叫“镜像层”。</strong></li><li><strong>所有对容器的改动-无论添加、删除、还是修改文件都只会发生在容器层中。只有容器层是可写的，容器层下面的所有镜像层都是只读的。</strong></li></ul><h4 id="为什么Docker镜像要采用这种分层结构呢"><a href="#为什么Docker镜像要采用这种分层结构呢" class="headerlink" title="为什么Docker镜像要采用这种分层结构呢?"></a>为什么Docker镜像要采用这种分层结构呢?</h4><ul><li><strong>镜像分层最大的一个好处就是共享资源，方便复制迁移，就是为了复用。</strong></li><li><strong>比如说有多个镜像都从相同的base镜像构建而来，那么Docker Host只需在磁盘上保存一份base镜像;同时内存中也只需加载- -份base镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</strong></li></ul><pre class=" language-bash"><code class="language-bash">docker commit 提交容器副本使之成为一-个新的镜像</code></pre><pre class=" language-bash"><code class="language-bash">docker commit -m<span class="token operator">=</span><span class="token string">"提交的描述信息"</span> -a<span class="token operator">=</span><span class="token string">"作者"</span>容器ID要创建的目标镜像名:标签名<span class="token punctuation">]</span></code></pre><h4 id="安装vim："><a href="#安装vim：" class="headerlink" title="安装vim："></a>安装vim：</h4><h5 id="更新包管理工具："><a href="#更新包管理工具：" class="headerlink" title="更新包管理工具："></a>更新包管理工具：</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">apt-get</span> update</code></pre><h5 id="安装所需要的vim"><a href="#安装所需要的vim" class="headerlink" title="安装所需要的vim:"></a>安装所需要的vim:</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">apt-get</span> -y <span class="token function">install</span> vim</code></pre><h5 id="Docker中的镜像分层，支持通过扩展现有镜像，创建新的镜像。类似Java继承于-个Base-基础类，已再按需扩-展。"><a href="#Docker中的镜像分层，支持通过扩展现有镜像，创建新的镜像。类似Java继承于-个Base-基础类，已再按需扩-展。" class="headerlink" title="Docker中的镜像分层，支持通过扩展现有镜像，创建新的镜像。类似Java继承于- -个Base 基础类，已再按需扩 展。"></a>Docker中的镜像分层，支持通过扩展现有镜像，创建新的镜像。类似Java继承于- -个Base 基础类，已再按需扩 展。</h5><h5 id="新镜像是从base镜像-层一-层叠加生成的。每安装-一个软件，-就在现有镜像的基础上增加一层。"><a href="#新镜像是从base镜像-层一-层叠加生成的。每安装-一个软件，-就在现有镜像的基础上增加一层。" class="headerlink" title="新镜像是从base镜像- -层一 -层叠加生成的。每安装-一个软件， 就在现有镜像的基础上增加一层。"></a>新镜像是从base镜像- -层一 -层叠加生成的。每安装-一个软件， 就在现有镜像的基础上增加一层。</h5><h3 id="commit操作案例"><a href="#commit操作案例" class="headerlink" title="commit操作案例"></a>commit操作案例</h3><pre class=" language-bash"><code class="language-bash">docker commit 提交容器副本使之成为一-个新的镜像</code></pre><pre class=" language-bash"><code class="language-bash">docker commit -m<span class="token operator">=</span><span class="token string">"提交的描述信息"</span> -a<span class="token operator">=</span><span class="token string">"作者"</span>容器ID要创建的目标镜像名:标签名<span class="token punctuation">]</span></code></pre><h5 id="（1）：启动新加的容器"><a href="#（1）：启动新加的容器" class="headerlink" title="（1）：启动新加的容器:"></a>（1）：启动新加的容器:</h5><pre class=" language-bash"><code class="language-bash">docker start bf0c365ce28b</code></pre><h5 id="（2）：查看容器"><a href="#（2）：查看容器" class="headerlink" title="（2）：查看容器"></a>（2）：查看容器</h5><h5 id="（3）：提交："><a href="#（3）：提交：" class="headerlink" title="（3）：提交："></a>（3）：提交：</h5><pre class=" language-bash"><code class="language-bash">docker commit - m<span class="token operator">=</span><span class="token string">"vim cmd add ok"</span> -a<span class="token operator">=</span><span class="token string">" iZwz93fcs 15b 7znd3w9gfcZ"</span> bf0c365ce28b myubuntu:1.3</code></pre><h5 id="（4）：成功："><a href="#（4）：成功：" class="headerlink" title="（4）：成功："></a>（4）：成功：</h5><pre class=" language-bash"><code class="language-bash">myubuntu        1.3         4c076cadc498          10 seconds ago         174MB</code></pre><h4 id="容器数据卷是什么？"><a href="#容器数据卷是什么？" class="headerlink" title="容器数据卷是什么？"></a>容器数据卷是什么？</h4><ul><li><strong>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器， 但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性:</strong></li><li><strong>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷</strong></li></ul><h4 id="容器数据卷能干嘛？"><a href="#容器数据卷能干嘛？" class="headerlink" title="容器数据卷能干嘛？"></a>容器数据卷能干嘛？</h4><ul><li><strong>将运用与运行的环境打包镜像，run后形成容器实例运行，但是我们对数据的要求希望是持久化的</strong></li></ul><h5 id="Docker容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了。"><a href="#Docker容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了。" class="headerlink" title="Docker容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了。"></a>Docker容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了。</h5><h5 id="为了能保存数据在docker中我们使用卷。"><a href="#为了能保存数据在docker中我们使用卷。" class="headerlink" title="为了能保存数据在docker中我们使用卷。"></a>为了能保存数据在docker中我们使用卷。</h5><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><ul><li><strong>1:数据卷可在容器之间共享或重用数据</strong></li><li><strong>2:卷中的更改可以直接实时生效，爽</strong></li><li><strong>3:数据卷中的更改不会包含在镜像的更新中</strong></li><li><strong>4:数据卷的生命周期–直持续到没有容器使用它为止</strong></li></ul><h4 id="添加："><a href="#添加：" class="headerlink" title="添加："></a>添加：</h4><ul><li>命令：</li></ul><pre class=" language-bash"><code class="language-bash">docker run -it -privileged<span class="token operator">=</span>true -v/宿主机绝对路径目录:/容器内目录    镜像名</code></pre><h5 id="查看容器卷是否挂载成功："><a href="#查看容器卷是否挂载成功：" class="headerlink" title="查看容器卷是否挂载成功："></a>查看容器卷是否挂载成功：</h5><pre class=" language-bash"><code class="language-bash">docker inspect 容器id</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token string">" Mounts"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"Tyne"</span><span class="token keyword">.</span> <span class="token string">"bind"</span>        <span class="token string">" Source"</span><span class="token keyword">:</span> <span class="token string">" / tmp/ myHostData"</span> ,        <span class="token string">" Destination"</span><span class="token keyword">:</span> <span class="token string">" / tmp/ myDockerData"</span>，        <span class="token string">"Mode        "</span> RW<span class="token string">":b true,        "</span> Propagation<span class="token string">": "</span> rprivate"    <span class="token punctuation">}</span><span class="token punctuation">}</span>,</code></pre><h5 id="容器实例内部被限制，只能读取不能写"><a href="#容器实例内部被限制，只能读取不能写" class="headerlink" title="容器实例内部被限制，只能读取不能写"></a>容器实例内部被限制，只能读取不能写</h5><pre class=" language-bash"><code class="language-bash">docker run -it --privileged<span class="token operator">=</span>true -v/宿主机绝对路径国录:/容器内目录:ro  镜像名</code></pre><h5 id="容器卷的继承"><a href="#容器卷的继承" class="headerlink" title="容器卷的继承:"></a>容器卷的继承:</h5><pre class=" language-bash"><code class="language-bash">docker run -it --privileged<span class="token operator">=</span>true --volumes-from 父类--name u2 ubuntu</code></pre><pre class=" language-bash"><code class="language-bash">docker run - it -- privileged<span class="token operator">=</span>true -- volumes- from u1 - - name u2 ubuntu</code></pre><h3 id="免修改版说明"><a href="#免修改版说明" class="headerlink" title="免修改版说明"></a>免修改版说明</h3><pre class=" language-bash"><code class="language-bash">docker pull billygoo/tomcat8-jdk8</code></pre><pre class=" language-bash"><code class="language-bash">docker run -d -P 8080:8080 --name mytomcat8 billygoo/tomcat8-jdk8</code></pre><pre class=" language-bash"><code class="language-bash">docker pu11 mysq1 // 下载MySQL镜像</code></pre><pre class=" language-bash"><code class="language-bash">docker run --name mysq1 --restart<span class="token operator">=</span>always -p 3306:3306 -e MYSQL_ ROOT_ PASSWORD<span class="token operator">=</span>密码-d mysq1 //启动MySQL</code></pre><h5 id="挂容器卷创建mysql"><a href="#挂容器卷创建mysql" class="headerlink" title="挂容器卷创建mysql:"></a>挂容器卷创建mysql:</h5><pre class=" language-bash"><code class="language-bash">docker run -d -p 3306:3306 -- privi leged<span class="token operator">=</span>true-v / zzyyuse/ mysq1/ log:/var/ log/ mysql-v /zzyyuse/ mysq1/data:/var/lib/mysql-v / zzyyuse/ mysql/conf:/etc/mysq1/conf. d-e MYSQL_ ROOT PASSWORD<span class="token operator">=</span> 123456-- name mysql mysql:5.7</code></pre><pre class=" language-bash"><code class="language-bash">docker run -p 6379:6379 --name myr3 --privileged<span class="token operator">=</span>true -v /app/redis/redis.conf:/etc/redis/redis.conf -v/app/redis/data:/data -d redis redis-server /etc/redis/redis.conf</code></pre><h5 id="查看所有端口的使用情况"><a href="#查看所有端口的使用情况" class="headerlink" title="查看所有端口的使用情况"></a>查看所有端口的使用情况</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">netstat</span> -nultp</code></pre><h5 id="查看某端口"><a href="#查看某端口" class="headerlink" title="查看某端口"></a>查看某端口</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">netstat</span> -tunlp<span class="token operator">|</span><span class="token function">grep</span> 端口号</code></pre><h5 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h5><pre class=" language-bash"><code class="language-bash">xxxxxxxxxx <span class="token function">kill</span> -9 端口号</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2</title>
      <link href="/2022/04/01/SpringBoot2/"/>
      <url>/2022/04/01/SpringBoot2/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot2"><a href="#SpringBoot2" class="headerlink" title="SpringBoot2"></a>SpringBoot2</h1><h2 id="第一章："><a href="#第一章：" class="headerlink" title="第一章："></a>第一章：</h2><h3 id="1-1-javaConfig"><a href="#1-1-javaConfig" class="headerlink" title="1.1 javaConfig"></a>1.1 javaConfig</h3><p><strong>JavaComfig：使用java类作为xml配置文件的替代，是配置spring容器的纯java方式。在这个java类中可以创建java对象，把对象放入spring容器中（注入）</strong></p><p>使用两个注解：</p><p>1）@Configuration：放在一个类的上面，表示这个类是作为配置文件使用的</p><p>2）@Bean：声名对象，把对象注入到容器中</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 作用是表示当前类是作为配置文件使用的，就是用来容器的 * *      SpringConfig这个类就相对于beans.xml */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建方法，方法的返回值是对象，在方法上面加入@Bean     * 方法的返回值对象就是注入到容器中。     *     * @Bean:把对象注入到spring容器中。作用就是相当于bean标签     *     *      说明：@Bean，不指定对象的名称，默认的方法名是 id     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Student <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-2、-importResource"><a href="#1-2、-importResource" class="headerlink" title="1.2、@importResource"></a>1.2、@importResource</h3><p>@importResource 作用是导入其他的xml配置文件，等于 在xml</p><h3 id="1-3、-PropertyResource"><a href="#1-3、-PropertyResource" class="headerlink" title="1.3、@PropertyResource"></a>1.3、@PropertyResource</h3><p>@PropertyResource 是读取 properties 属性配置文件</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Comifguration</span><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">,</span><span class="token string">"classpath:beans.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertyResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:com.bjpowernode.vo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h1 id="第二章-Spring-Boot"><a href="#第二章-Spring-Boot" class="headerlink" title="第二章 Spring Boot"></a>第二章 Spring Boot</h1><h2 id="2-1、介绍"><a href="#2-1、介绍" class="headerlink" title="2.1、介绍"></a>2.1、介绍</h2><p>SpringBoot是Spring中的一个成员，可以简化Spring，SpringMVC的使用。他的核心还是IOC容器。</p><p>特点：</p><ul><li><p>创建Spring应用</p></li><li><p>内嵌的tomcat，jetty，Undertow</p></li><li><p>提供了starter起步依赖，简化应用的配置。</p><ul><li>比如使用MyBatis框架，需要在Spring项目中，配置Mybatis的对象SqlSessionFactory，Dao的代理对象在SpringBoot项目中，在pom.xml里面，加入一个mybatis-spring-boot-starter依赖</li></ul></li><li><p>尽可能去配置spring的第三方库。叫做自动配置（就是把spring中的，第三方库的对象都创建好，放到容器中，开发人员可以直接使用）</p></li><li><p>提供了健康检查，统计，外部化配置</p></li><li><p>不用生成代码，不用xml配置</p></li></ul><h2 id="2-2、注解的使用："><a href="#2-2、注解的使用：" class="headerlink" title="2.2、注解的使用："></a>2.2、注解的使用：</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">//复合注解：由</span><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token comment" spellcheck="true">//1.@SpringBootConfiguration</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>        annotation <span class="token operator">=</span> Configuration<span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token punctuation">)</span>    <span class="token keyword">boolean</span> <span class="token function">proxyBeanMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//说明：使用了@SpringBootConfiguration注解标注的类，可以作为配置文件使用的，可以使用@Bean声明对象，注入容器</span></code></pre><p>2.@EnableAutoConfiguration</p><p>启用自动配置，把java对象配置好，注入到spring容器中。例如可以把mybatis的对象创建好，放入容器中</p><p>3.@ComponentScan</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span> 扫码器，找到注解，根据注解的功能创建对象，给属性赋值等等    默认扫码的包：<span class="token annotation punctuation">@ComponentScan</span>所在的类的包和子包。</code></pre><h3 id="2-3、配置文件"><a href="#2-3、配置文件" class="headerlink" title="2.3、配置文件"></a>2.3、配置文件</h3><p>配置文件名称：application</p><p>扩展名有：properties(k &#x3D; v);  yml(k: v)</p><p>例1：application.properties 设置端口号和上下文</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 设置端口号</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8082</span><span class="token comment" spellcheck="true"># 设置访问应用上下文路径，contextpath</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/myboot</span></code></pre><p>例2：application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083</span>    <span class="token key atrule">servlet</span><span class="token punctuation">:</span>        <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /myboot2</code></pre><h3 id="2-4、多环境配置"><a href="#2-4、多环境配置" class="headerlink" title="2.4、多环境配置"></a>2.4、多环境配置</h3><p>有开发环境，测试环境，上线环境</p><p>每个环境有不同的配置，例如端口，上下文件，数据库url，用户名，密码等等</p><p>使用多环境配置文件，可以方便的切换不同的配置。</p><p>使用方式：创建多个配置文件，名称规则：appliction-环境名称.properties(yml)</p><p>创建开发环境的配置文件：application-dev.properties(application-dev.yml)</p><p>创建测试者使用的配置：application-test.properties(application-test.yml)</p><h3 id="2-5、使用jsp"><a href="#2-5、使用jsp" class="headerlink" title="2.5、使用jsp"></a>2.5、使用jsp</h3><p>SpringBoot不推荐使用jsp，而是使用模板技术代替jsp</p><p>使用jsp需要配置：</p><p>1）加入一个处理jsp的依赖。负责编译jsp文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.embed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-embed-jasper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><p>) 创建一个存放jsp的目录，一般叫做webapp </p><p>index.jsp</p></li><li><p>) 需要在pom.xml指定jsp文件编译后的存放目录。META-INF&#x2F;resources</p></li><li><p>) 创建Controller，访问jsp</p></li><li><p>）在application.propertis文件中配置视图解析器</p></li></ol><h3 id="2-6、使用容器"><a href="#2-6、使用容器" class="headerlink" title="2.6、使用容器"></a>2.6、使用容器</h3><p>你想通过代码，从容器中获取对象。</p><p>通过SpringApplication.run(Application.class,args);返回值获取容器。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ConfigurableApplicationContext <span class="token function">run</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> primarySource<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> primarySource <span class="token punctuation">}</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ConfigurableApplicationContext<span class="token operator">:</span>接口，是ApplicationContext的子接口</code></pre><h1 id="第三章-Web组件"><a href="#第三章-Web组件" class="headerlink" title="第三章 Web组件"></a>第三章 Web组件</h1><p>三个内容：拦截器，Servlet，Filter</p><h3 id="3-1、拦截器"><a href="#3-1、拦截器" class="headerlink" title="3.1、拦截器"></a>3.1、拦截器</h3><p>拦截器是SpringMvc中的一种对象，能拦截对Controller的请求。</p><p>拦截器框架中有系统的拦截器，还可以自定义拦截器。实现对请求预先处理。</p><p>实现自定义拦截器：</p><p>1、创建类实现SpringMvc框架的Handlerlnterceptor接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2、需在SpringMvc的配置文件中，声明拦截器</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        &lt;mvc:path="url"/>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>拦截器全限定类名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre><p>SpringBoot中注册拦截器：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAppConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//添加拦截器对象，注入到容器中</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建拦截器对象</span>        HandlerInterceptor interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定拦截的请求url地址</span>        String path<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/user/**"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定不拦截的地址</span>        String excludePath <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/user/login"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span>excludePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-2、servlet"><a href="#3-2、servlet" class="headerlink" title="3.2、servlet"></a>3.2、servlet</h3><p>在SpringBoot框架中使用Servlet对象。</p><p>使用步骤：</p><p>1.创建Servlet类，创建类继承HttpServlet    </p><p>2.注册Servlet，让框架能找到Servlet</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用HttpServletResponse输出数据，应答结果</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"test/http;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintWriter out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行的是Servlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-3、过滤器Filter"><a href="#3-3、过滤器Filter" class="headerlink" title="3.3、过滤器Filter"></a>3.3、过滤器Filter</h3><p>Filter是Servlet规范中，可以处理请求，对请求的参数，属性进行调整。常常在过滤器中处理字符编码</p><p>在框架中使用过滤器：</p><ol><li>创建自定义过滤器类</li><li>注册Filter过滤器对象</li></ol><p>例子：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自定义过滤器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了MyFilter，doFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注册Filter</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebApplicationConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        FilterRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/user/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-4、字符集过滤器"><a href="#3-4、字符集过滤器" class="headerlink" title="3.4、字符集过滤器"></a>3.4、字符集过滤器</h3><p>CharacterEncodingFilter：解决post请求中乱码的问题</p><p>在SpringMVC框架中，在web.xml注册过滤器。配置其他的配置  </p><ol><li>修改application.properties文件</li></ol><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">9091</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/myboot</span><span class="token comment" spellcheck="true">#让系统的CharactEncodingFilter生效</span><span class="token attr-name">server.servlet.enabled.charset</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true">#指定使用的编码方式</span><span class="token attr-name">sercer.servlet.encoding.charset</span><span class="token punctuation">=</span><span class="token attr-value">utf-8</span><span class="token comment" spellcheck="true">#强制request,response都使用charset属性的值</span><span class="token attr-name">server.servlet.encoding.force</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><h1 id="第四章-ORM-操作-Mysql"><a href="#第四章-ORM-操作-Mysql" class="headerlink" title="第四章 ORM 操作 Mysql"></a>第四章 ORM 操作 Mysql</h1><h3 id="使用MyBatis框架操作数据，在Springboot框架集成MyBatis"><a href="#使用MyBatis框架操作数据，在Springboot框架集成MyBatis" class="headerlink" title="使用MyBatis框架操作数据，在Springboot框架集成MyBatis"></a>使用MyBatis框架操作数据，在Springboot框架集成MyBatis</h3><p>使用步骤：</p><ol><li><p>mybatis起步依赖：完成了mybatis对象自动配置，对象放在容器中</p></li><li><p>pom.xml 指定把src&#x2F;main&#x2F;java目录中的xml文件中包含到classpath中</p></li><li><p>创建实体类Student</p></li><li><p>创建Dao接口 StudentDao，创建一个查询学生的方法</p></li><li><p>创建Dao接口对应得Mapper文件，xml文件，写sql语句</p></li><li><p>创建Service层对象，创建StucentService接口和其实现类。去dao对象的方法。完成数据库的操作</p></li><li><p>创建Controller对象，访问Service。</p></li><li><p>写application.properties文件。</p><ol><li>配置数据库的连接信息。</li></ol></li></ol><h3 id="第一种：-Mapper"><a href="#第一种：-Mapper" class="headerlink" title="第一种：@Mapper"></a>第一种：@Mapper</h3><p>@Mapper：放在dao接口的上面，每个接口都需要使用这个注解。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Mapper：告诉NyBatis这是dao接口，创建次接口的代理对象 */</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentDao</span> <span class="token punctuation">{</span>    Student <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"stuId"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="第二种：-MapperScan"><a href="#第二种：-MapperScan" class="headerlink" title="第二种：@MapperScan"></a>第二种：@MapperScan</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.bjpowernode.dao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="第三种：Mapper文件和Dao接口分开管理"><a href="#第三种：Mapper文件和Dao接口分开管理" class="headerlink" title="第三种：Mapper文件和Dao接口分开管理"></a>第三种：Mapper文件和Dao接口分开管理</h3><p>现在把Mapper文件放在resources目录下</p><p>1）在resources目录中创建子目录（自定义的），例如mapper</p><p>2）把mapper文件放在mapper目录中</p><p>3）在application.properties文件中，指定mapper文件的目录</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 指定mapper文件的位置</span><span class="token attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:mapper/*.xml</span><span class="token comment" spellcheck="true"># 指定mybatis文件的日志</span><span class="token attr-name">mybatis.configuration.log-impl</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span></code></pre><p>4）在pom.xml中指定resources目录中的文件，编译到目标目录中</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- resources插件    --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><h2 id="第四个-事务"><a href="#第四个-事务" class="headerlink" title="第四个 事务"></a>第四个 事务</h2><p>Spring框架中的事务：</p><p>1）管理事务的对象：事务管理器（接口，接口有很多的实现类）</p><p>例如：使用jdbc或mybatis访问数据库，使用的事务管理器：DataSourceTransactionManager</p><p>2）声明式事务：在xml配置文件或者使用注解说明事务控制的内容</p><p>​    控制事务：隔离级别，传播行为，超时时间</p><p>3）事务的处理方式：</p><p>​        1）spring框架中的@Transactional</p><p>​        2）aspectj框架可以在xml配置文件中，声明事务控制的内容</p><p>SpringBoot中使用事务：上面两种方式都可以。</p><p>1）在业务方法的上面加入@Transactional，加入注解后，方法有事务功能了。</p><p>2）明确的在 主启动类的上面，加入@EnableTransactionManager</p><pre class=" language-markdown"><code class="language-markdown">/** <span class="token list punctuation">*</span> @Transactional:表示方法的有事务支持 <span class="token list punctuation">*</span>         默认：使用的是隔离级别，REQUIRED 传播行为：超过时间  -1 * <span class="token list punctuation">*</span> @EnableTransactionManagement：启用事务管理器*/</code></pre><h1 id="第五章：接口架构风格-——RESTful"><a href="#第五章：接口架构风格-——RESTful" class="headerlink" title="第五章：接口架构风格 ——RESTful"></a>第五章：接口架构风格 ——RESTful</h1><p>接口：可以指访问servlet，controller的url，调用其他程序的函数</p><p>架构风格：api组织方式(样子)</p><p>就是一个传统的：在地址上提供了访问的资源名称addStudent，在其后使用了get方式传递参数</p><p>RESTful的架构风格</p><p>表现层状态转移：</p><p>​        表示层就是视图层，显示资源的，通过视图页面，jsp等等显示操作资源的结果。</p><p>​        状态：资源变化</p><p>​        转移：资源可以变化的。资源能创建，new状态，资源创建后可以查询资源，能看到资源的内容，这个资源内容，可以被修改，修改后资源和之前的不一样。</p><p>2）REST的要素：</p><p>用REST表示资源和对资源的操作。在互联网中，表示一个资源或者一个操作。</p><p>资源使用url表示的，在互联网，使用的图片，视频，文本，网页等等都是资源。</p><p>资源是用名词表示。</p><p>对资源：</p><p>​    查询资源：看，通过url找到资源。</p><p>​    创建资源：添加资源</p><p>​    更新资源：编辑</p><p>​    删除资源：去除</p><p>资源使用url表示，通过名词表示资源。</p><p>在url中，使用名词表示资源，以及访问资源的信息，在url中，使用“&#x2F;”分隔对资源的信息</p><p><a href="http://localhost:8080/myboot/student/1001">http://localhost:8080/myboot/student/1001</a></p><p>使用http中的动作（请求方式），表示对资源的操作（CRUD）</p><p>GET:查询操作</p><p>POST:创建资源</p><p>PUT:更新资源</p><p>DELETE:删除资源</p><p>3）一句话说明REST：</p><p>使用url表示资源，使用http动作操作资源。</p><p>4）注解：</p><p>@PathVariable：从url中获取数据</p><p>@GetMapping：支持的get请求方式，等同于@RequestMapping（method&#x3D;RequestMethod.GET）</p><p>@PostMapping：支持的post请求方式，等同于@RequestMapping（method&#x3D;RequestMethod.POST）</p><p>@PutMapping：支持的put请求方式，等同于@RequestMapping（method&#x3D;RequestMethod.PUST）</p><p>@DeleteMapping：支持的delete请求方式，等同于@RequestMapping（method&#x3D;RequestMethod.DELETE）</p><p>@RestController：复合注解，是@Controller和@ResponseBody组合</p><p>表示当前这个类中的所有方法都加入了@ResponseBody</p><h3 id="5-2、在页面中或者ajax中，支持pub，delete请求"><a href="#5-2、在页面中或者ajax中，支持pub，delete请求" class="headerlink" title="5.2、在页面中或者ajax中，支持pub，delete请求"></a>5.2、在页面中或者ajax中，支持pub，delete请求</h3><p>在SpringMVC中有一个过滤器，支持post请求转为put，delete</p><p>过滤器：org.springframework.web.filter.HiddenHttpMethodFilter</p><p>作用：把请求中的post请求转为put，delete</p><p>实现步骤：</p><ol><li>application.properties(yml)：开启使用HiddenHttpMethodFilter 过滤器</li><li>在请求页面中，包含_method参数，他的值是put，delete，发起这个请求发起的是post方式</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT入门以及实战</title>
      <link href="/2022/04/01/JWT%E5%85%A5%E9%97%A8%E4%BB%A5%E5%8F%8A%E5%AE%9E%E6%88%98/"/>
      <url>/2022/04/01/JWT%E5%85%A5%E9%97%A8%E4%BB%A5%E5%8F%8A%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="JWT入门以及实战"><a href="#JWT入门以及实战" class="headerlink" title="JWT入门以及实战"></a>JWT入门以及实战</h1><h2 id="1-什么是JWT"><a href="#1-什么是JWT" class="headerlink" title="1.什么是JWT"></a>1.什么是JWT</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">-</span> JWT简称JSON Web Token,也就是通过JSON形式作为Web应用中的令牌,用于在各方之间安全地将信息作为JSON对象传输。在数据传输过程中还可以完成数据加密、签名等相关处理。</code></pre><h2 id="2-JWT能做什么"><a href="#2-JWT能做什么" class="headerlink" title="2.JWT能做什么"></a>2.JWT能做什么</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.授权</span><span class="token list punctuation">-</span> 这是使用JWT的最常见方案。一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。单点登录是当今广泛使用JWT的一项功能，因为它的开销很小并且可以在不同的域中轻松使用。<span class="token title important"><span class="token punctuation">#</span> 2.信息交换</span><span class="token list punctuation">-</span> JSON Web Token是在各方之间安全地传输信息的好方法。因为可以对JWT进行签名（例如，使用公钥/私钥对），所以您可以确保发件人是他们所说的人。此外，由于签名是使用标头和有效负载计算的，因此您还可以验证内容是否遭到篡改。</code></pre><h2 id="3-为什么是JWT"><a href="#3-为什么是JWT" class="headerlink" title="3.为什么是JWT"></a>3.为什么是JWT</h2><h3 id="基于传统的Session认证"><a href="#基于传统的Session认证" class="headerlink" title="基于传统的Session认证"></a>基于传统的Session认证</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.认证方式</span><span class="token list punctuation">-</span> 我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了,这就是传统的基于session认证。t<span class="token title important"><span class="token punctuation">#</span> 2.认证流程</span></code></pre><p><img src="/2022/04/01/JWT%E5%85%A5%E9%97%A8%E4%BB%A5%E5%8F%8A%E5%AE%9E%E6%88%98/Users\薛之谦\AppData\Roaming\Typora\typora-user-images\image-20220401210049481.png" alt="image-20220401210049481"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.暴露问题</span><span class="token list punctuation">-</span> 1.每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大<span class="token list punctuation">-</span> 2.用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上,这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。<span class="token list punctuation">-</span> 3.因为是基于cookie来进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。<span class="token list punctuation">-</span> 4.在前后端分离系统中就更加痛苦:如下图所示<span class="token code keyword">    也就是说前后端分离在应用解耦后增加了部署的复杂性。通常用户一次请求就要转发多次。如果用session 每次携带sessionid 到服务    器，服务器还要查询用户信息。同时如果用户很多。这些信息存储在服务器内存中，给服务器增加负担。还有就是CSRF（跨站伪造请求攻    击）攻击，session是基于cookie进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。还有就是         sessionid就是一个特征值，表达的信息不够丰富。不容易扩展。而且如果你后端应用是多节点部署。那么就需要实现session共享机制。    不方便集群应用。</span></code></pre><h3 id="基于JWT认证"><a href="#基于JWT认证" class="headerlink" title="基于JWT认证"></a>基于JWT认证</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.认证流程</span><span class="token list punctuation">-</span> 首先，前端通过Web表单将自己的用户名和密码发送到后端的接口。这一过程一般是一个HTTP POST请求。建议的方式是通过SSL加密的传输（https协议），从而避免敏感信息被嗅探。<span class="token list punctuation">-</span> 后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload（负载），将其与头部分别进行Base64编码拼接后签名，形成一个JWT(Token)。形成的JWT就是一个形同lll.zzz.xxx的字符串。 token head.payload.singurater<span class="token list punctuation">-</span> 后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage或sessionStorage上，退出登录时前端删除保存的JWT即可。<span class="token list punctuation">-</span> 前端在每次请求时将JWT放入HTTP Header中的Authorization位。(解决XSS和XSRF问题) HEADER<span class="token list punctuation">-</span> 后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确；检查Token是否过期；检查Token的接收方是否是自己（可选）。<span class="token list punctuation">-</span> 验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。<span class="token title important"><span class="token punctuation">#</span> 2.jwt优势</span><span class="token list punctuation">-</span> 简洁(Compact): 可以通过URL，POST参数或者在HTTP header发送，因为数据量小，传输速度也很快<span class="token list punctuation">-</span> 自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库<span class="token list punctuation">-</span> 因为Token是以JSON加密的形式保存在客户端的，所以JWT是跨语言的，原则上任何web形式都支持。<span class="token list punctuation">-</span> 不需要在服务端保存会话信息，特别适用于分布式微服务。</code></pre><h3 id="4-JWT的结构是什么"><a href="#4-JWT的结构是什么" class="headerlink" title="4.JWT的结构是什么?"></a>4.JWT的结构是什么?</h3><pre class=" language-markdown"><code class="language-markdown">token   string  ====>  header.payload.singnature   token   <span class="token title important"><span class="token punctuation">#</span> 1.令牌组成</span><span class="token list punctuation">-</span> 1.标头(Header)<span class="token list punctuation">-</span> 2.有效载荷(Payload)<span class="token list punctuation">-</span> 3.签名(Signature)<span class="token list punctuation">-</span> 因此，JWT通常如下所示:xxxxx.yyyyy.zzzzz   Header.Payload.Signature</code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 2.Header</span><span class="token list punctuation">-</span> 标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。它会使用 Base64 编码组成 JWT 结构的第一部分。<span class="token list punctuation">-</span> 注意:Base64是一种编码，也就是说，它是可以被翻译回原来的样子来的。它并不是一种加密过程。</code></pre><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>  <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">}</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.Payload</span><span class="token list punctuation">-</span> 令牌的第二部分是有效负载，其中包含声明。声明是有关实体（通常是用户）和其他数据的声明。同样的，它会使用 Base64 编码组成 JWT 结构的第二部分</code></pre><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"sub"</span><span class="token operator">:</span> <span class="token string">"1234567890"</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"John Doe"</span><span class="token punctuation">,</span>  <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 4.Signature</span><span class="token list punctuation">-</span> 前面两部分都是使用 Base64 进行编码的，即前端可以解开知道里面的信息。Signature 需要使用编码后的 header 和 payload 以及我们提供的一个密钥，然后使用 header 中指定的签名算法（HS256）进行签名。签名的作用是保证 JWT 没有被篡改过<span class="token list punctuation">-</span> 如:<span class="token code keyword">    HMACSHA256(base64UrlEncode(header) + "." + base64UrlEncode(payload),secret);</span><span class="token title important"><span class="token punctuation">#</span> 签名目的</span><span class="token list punctuation">-</span> 最后一步签名的过程，实际上是对头部以及负载内容进行签名，防止内容被窜改。如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。<span class="token title important"><span class="token punctuation">#</span> 信息安全问题</span><span class="token list punctuation">-</span> 在这里大家一定会问一个问题：Base64是一种编码，是可逆的，那么我的信息不就被暴露了吗？<span class="token list punctuation">-</span> 是的。所以，在JWT中，不应该在负载里面加入任何敏感的数据。在上面的例子中，我们传输的是用户的User ID。这个值实际上不是什么敏    感内容，一般情况下被知道也是安全的。但是像密码这样的内容就不能被放在JWT中了。如果将用户的密码放在了JWT中，那么怀有恶意的第    三方通过Base64解码就能很快地知道你的密码了。因此JWT适合用于向Web应用传递一些非敏感信息。JWT还经常用于设计用户认证和授权系    统，甚至实现Web应用的单点登录。</code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 5.放在一起</span><span class="token list punctuation">-</span> 输出是三个由点分隔的Base64-URL字符串，可以在HTML和HTTP环境中轻松传递这些字符串，与基于XML的标准（例如SAML）相比，它更紧凑。<span class="token list punctuation">-</span> 简洁(Compact)<span class="token code keyword">    可以通过URL, POST 参数或者在 HTTP header 发送，因为数据量小，传输速度快</span><span class="token list punctuation">-</span> 自包含(Self-contained)<span class="token code keyword">    负载中包含了所有用户所需要的信息，避免了多次查询数据库</span></code></pre><h3 id="5-使用JWT"><a href="#5-使用JWT" class="headerlink" title="5.使用JWT"></a>5.使用JWT</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.引入依赖</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引入jwt--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 2.生成token</span></code></pre><pre class=" language-java"><code class="language-java">Calendar instance <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生成令牌</span>String token <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">withClaim</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置自定义用户名</span>  <span class="token punctuation">.</span><span class="token function">withExpiresAt</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置过期时间</span>  <span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>Algorithm<span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token string">"token!Q2W#E$RW"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置签名 保密 复杂</span><span class="token comment" spellcheck="true">//输出令牌</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 生成结果eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOlsicGhvbmUiLCIxNDMyMzIzNDEzNCJdLCJleHAiOjE1OTU3Mzk0NDIsInVzZXJuYW1lIjoi5byg5LiJIn0.aHmE3RNqvAjFr<span class="token italic"><span class="token punctuation">_</span>dvyn<span class="token punctuation">_</span></span>sD2VJ46P7EGiS5OBMO_TI5jg</code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.根据令牌和签名解析数据</span></code></pre><pre class=" language-java"><code class="language-java">JWTVerifier jwtVerifier <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>Algorithm<span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token string">"token!Q2W#E$RW"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DecodedJWT decodedJWT <span class="token operator">=</span> jwtVerifier<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名: "</span> <span class="token operator">+</span> decodedJWT<span class="token punctuation">.</span><span class="token function">getClaim</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过期时间: "</span><span class="token operator">+</span>decodedJWT<span class="token punctuation">.</span><span class="token function">getExpiresAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 4.常见异常信息</span><span class="token list punctuation">-</span> SignatureVerificationException:                签名不一致异常<span class="token list punctuation">-</span> TokenExpiredException:                            令牌过期异常<span class="token list punctuation">-</span> AlgorithmMismatchException:                        算法不匹配异常<span class="token list punctuation">-</span> InvalidClaimException:                                失效的payload异常</code></pre><h3 id="6-封装工具类"><a href="#6-封装工具类" class="headerlink" title="6.封装工具类"></a>6.封装工具类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JWTUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String TOKEN <span class="token operator">=</span> <span class="token string">"token!Q@W3e4r"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 生成token     * @param map  //传入payload     * @return 返回token     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getToken</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>        JWTCreator<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">withClaim</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Calendar instance <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instance<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">withExpiresAt</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>Algorithm<span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span>TOKEN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 验证token     * @param token     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">verify</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span><span class="token punctuation">{</span>        JWT<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>Algorithm<span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span>TOKEN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取token中payload     * @param token     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DecodedJWT <span class="token function">getToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> JWT<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>Algorithm<span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span>TOKEN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="7-整合springboot"><a href="#7-整合springboot" class="headerlink" title="7.整合springboot"></a>7.整合springboot</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.搭建springboot+mybatis+jwt环境</span><span class="token list punctuation">-</span> 引入依赖<span class="token list punctuation">-</span> 编写配置</code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引入jwt--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入mybatis--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入lombok--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入druid--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入mysql--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.38<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8989</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">jwt</span><span class="token attr-name">spring.datasource.type</span><span class="token punctuation">=</span><span class="token attr-value">com.alibaba.druid.pool.DruidDataSource</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/jwt?characterEncoding=UTF-8</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">mybatis.type-aliases-package</span><span class="token punctuation">=</span><span class="token attr-value">com.baizhi.entity</span><span class="token attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:com/baizhi/mapper/*.xml</span><span class="token attr-name">logging.level.com.baizhi.dao</span><span class="token punctuation">=</span><span class="token attr-value">debug</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.开发数据库</span><span class="token list punctuation">-</span> 这里采用最简单的表结构验证JWT使用</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户名'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户密码'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 2.开发entity</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.开发DAO接口和mapper.xml</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDAO</span> <span class="token punctuation">{</span>    User <span class="token function">login</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.baizhi.dao.UserDAO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--这里就写的简单点了毕竟不是重点--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where name=#{name} and password = #{password}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 4.开发Service 接口以及实现类</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    User <span class="token function">login</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//登录接口</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDAO userDAO<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>SUPPORTS<span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">login</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User userDB <span class="token operator">=</span> userDAO<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>userDB<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> userDB<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"登录失败~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 5.开发controller</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户名: [{}]"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"密码: [{}]"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            User userDB <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用来存放payload</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span>userDB<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> userDB<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String token <span class="token operator">=</span> JWTUtils<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"登录成功!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//成功返回token信息</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 6.数据库添加测试数据启动项目</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 7.通过postman模拟登录失败</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 8.通过postman模拟登录成功</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 9.编写测试接口</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/test/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    JWTUtils<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"验证通过~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TokenExpiredException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"Token已经过期!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SignatureVerificationException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"签名错误!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AlgorithmMismatchException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"加密算法不匹配!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"无效token~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> map<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 10.通过postman请求接口</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 11.问题?</span><span class="token list punctuation">-</span> 使用上述方式每次都要传递token数据,每个方法都需要验证token代码冗余,不够灵活? 如何优化<span class="token list punctuation">-</span> 使用拦截器进行优化</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>  String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    JWTUtils<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TokenExpiredException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"Token已经过期!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SignatureVerificationException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"签名错误!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AlgorithmMismatchException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"加密算法不匹配!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"无效token~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  String json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JwtTokenInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>          <span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/user/**"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git &amp; GitHub</title>
      <link href="/2022/04/01/Git&amp;GitHub/"/>
      <url>/2022/04/01/Git&amp;GitHub/</url>
      
        <content type="html"><![CDATA[<h2 id="Git-amp-GitHub"><a href="#Git-amp-GitHub" class="headerlink" title="Git &amp; GitHub"></a>Git &amp; GitHub</h2><h3 id="1、版本控制工具应该具备的功能"><a href="#1、版本控制工具应该具备的功能" class="headerlink" title="1、版本控制工具应该具备的功能"></a>1、版本控制工具应该具备的功能</h3><ul><li><p><strong>协同修改</strong></p><ul><li><strong>多人并行不悖的修改服务器端的同-一个文件。</strong></li></ul></li><li><p><strong>数据备份</strong></p><ul><li><strong>不仅保存目录和文件的当前状态，还能够保存每一个提交过的历史状态。</strong></li></ul></li><li><p><strong>版本管理</strong></p><ul><li><strong>在保存每–“个版本的文件信息的时候要做到不保存重复数据，以节约存储空间，</strong></li></ul></li><li><p><strong>权限控制</strong></p><ul><li><strong>对团队中参与开发的人员进行权限控制。</strong></li><li><strong>对团队外开发者贡献的代码进行审核一- -Git 独有。</strong></li></ul></li><li><p><strong>历史记录</strong></p><ul><li><strong>查看修改人、修改时间、修改内容、日志信息。</strong></li><li><strong>将本地文件恢复到某一个历史状态。</strong></li></ul></li><li><p><strong>分支管理</strong></p><ul><li><strong>允 许开发团队在工作过程中多条生产线同时推进任务，进一步提高效率。</strong></li></ul></li></ul><h3 id="2、版本控制简介"><a href="#2、版本控制简介" class="headerlink" title="2、版本控制简介"></a>2、版本控制简介</h3><h4 id="2-1、版本控制"><a href="#2-1、版本控制" class="headerlink" title="2.1、版本控制"></a>2.1、版本控制</h4><ul><li><strong>工程设计领域中使用版本控制管理工程蓝图的设计过程。在IT开发过程中也可以使用版本控制思想管理代码的版本迭代。</strong></li></ul><h4 id="2-2、版本控制工具"><a href="#2-2、版本控制工具" class="headerlink" title="2.2、版本控制工具"></a>2.2、版本控制工具</h4><ul><li><strong>思想：版本控制</strong></li><li><strong>实现：版本控制工具</strong></li></ul><h5 id="集中式版本控制工具："><a href="#集中式版本控制工具：" class="headerlink" title="集中式版本控制工具："></a>集中式版本控制工具：</h5><ul><li><p><strong>CVS</strong>ro</p></li><li><p><strong>SVN</strong></p></li><li><p><strong>VSS…</strong></p></li></ul><h5 id="分布式版本控制工具："><a href="#分布式版本控制工具：" class="headerlink" title="分布式版本控制工具："></a>分布式版本控制工具：</h5><ul><li><strong>Git</strong></li><li><strong>Mercurail</strong></li><li><strong>Bazaar</strong></li><li><strong>Darcs…</strong></li></ul><h3 id="3、Git"><a href="#3、Git" class="headerlink" title="3、Git"></a>3、Git</h3><h4 id="3-1、Git-官网和Logo"><a href="#3-1、Git-官网和Logo" class="headerlink" title="3.1、Git 官网和Logo"></a>3.1、Git 官网和Logo</h4><ul><li><strong>官网地址：<a href="https://git-scm.com/">https://git-scm.com/</a></strong></li></ul><h4 id="3-2、Git优势："><a href="#3-2、Git优势：" class="headerlink" title="3.2、Git优势："></a>3.2、Git优势：</h4><ul><li><strong>➢大部分操作在本地完成，不需要联网</strong></li><li><strong>➢完整性保证</strong></li><li><strong>➢尽可能添加数据而不是删除或修改数据</strong></li><li><strong>➢分支操作非常快捷流畅</strong></li><li><strong>➢与Linux命令全面兼容</strong></li></ul><h4 id="3-3、Git结构："><a href="#3-3、Git结构：" class="headerlink" title="3.3、Git结构："></a>3.3、Git结构：</h4><ul><li><p><strong>（1）在工作区写代码：git add</strong></p></li><li><p><strong>（2）临时存储在暂存区：git commit</strong></p></li><li><p><strong>（3）提交到本地库的历史版本</strong></p></li></ul><h4 id="3-4、Git和代码托管中心："><a href="#3-4、Git和代码托管中心：" class="headerlink" title="3.4、Git和代码托管中心："></a>3.4、Git和代码托管中心：</h4><h5 id="代码托管中心的任务：维护远程库"><a href="#代码托管中心的任务：维护远程库" class="headerlink" title="代码托管中心的任务：维护远程库"></a>代码托管中心的任务：维护远程库</h5><ul><li><p><strong>局域网环境下：</strong></p><ul><li><strong>GitLab服务器</strong></li></ul></li><li><p><strong>外网环境下：</strong></p><ul><li><strong>GitHub</strong></li><li><strong>码云</strong></li></ul></li></ul><h4 id="3-5、本地库和远程库："><a href="#3-5、本地库和远程库：" class="headerlink" title="3.5、本地库和远程库："></a>3.5、本地库和远程库：</h4><ul><li><strong>团队内部协作</strong></li><li><strong>跨团队协作</strong></li></ul><h3 id="4-相关操作："><a href="#4-相关操作：" class="headerlink" title="4.相关操作："></a>4.相关操作：</h3><h4 id="4-1、本地库初始化："><a href="#4-1、本地库初始化：" class="headerlink" title="4.1、本地库初始化："></a>4.1、本地库初始化：</h4><ul><li><strong>命令</strong></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add</code></pre><ul><li><strong>注意：</strong><ul><li><strong>.git目录中存放的是本地仓库相关的子目录和文件，不要删除，也不要胡乱修改</strong></li></ul></li></ul><h4 id="4-2、设置签名："><a href="#4-2、设置签名：" class="headerlink" title="4.2、设置签名："></a>4.2、设置签名：</h4><ul><li><p><strong>形式</strong></p><ul><li><strong>用户名：tom</strong></li><li><strong>Email地址：<a href="mailto:&#103;&#x6f;&#111;&#100;&#77;&#x6f;&#x72;&#110;&#x69;&#110;&#103;&#64;&#97;&#116;&#103;&#x75;&#105;&#103;&#117;&#46;&#x63;&#111;&#109;">&#103;&#x6f;&#111;&#100;&#77;&#x6f;&#x72;&#110;&#x69;&#110;&#103;&#64;&#97;&#116;&#103;&#x75;&#105;&#103;&#117;&#46;&#x63;&#111;&#109;</a></strong></li></ul></li><li><p><strong>作用：</strong></p><ul><li><strong>区分不同开发人员的身份</strong></li></ul></li><li><p><strong>辨析：</strong></p><ul><li><strong>这里设置的签名和登录远程库（代码托管中心）的账号，密码没有任何关系</strong></li></ul></li><li><p><strong>命令</strong></p><ul><li><strong>项目级别&#x2F;仓库级别:仅在当前本地库范围内有效</strong></li><li><strong>信息保存位置: .&#x2F;.git&#x2F;config 文件</strong></li></ul></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config user.name tom_pro</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config user.email goodMorning_pro@atguigu.com</code></pre><ul><li><strong>系统用户级别:登录当前操作系统的用户范围</strong></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name tom_glb</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global goodMorning_pro@atguigu.com</code></pre><ul><li><strong>级别优先级</strong><ul><li><strong>就近原则: 项目级别优先于系统用户级别，二者都有时采用项目级别的签名</strong></li><li><strong>如果只有系统用户级别的签名，就以系统用户级别的签名为准</strong></li><li><strong>二者都没有不允许</strong></li></ul></li></ul><h4 id="4-3、基本操作："><a href="#4-3、基本操作：" class="headerlink" title="4.3、基本操作："></a>4.3、基本操作：</h4><h5 id="4-3-1：状态查看操作：查看工作区，暂存区状态"><a href="#4-3-1：状态查看操作：查看工作区，暂存区状态" class="headerlink" title="4.3.1：状态查看操作：查看工作区，暂存区状态"></a>4.3.1：状态查看操作：查看工作区，暂存区状态</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> status</code></pre><h5 id="4-3-2：添加操作：将工作区的“新建-x2F-修改”添加到暂存区"><a href="#4-3-2：添加操作：将工作区的“新建-x2F-修改”添加到暂存区" class="headerlink" title="4.3.2：添加操作：将工作区的“新建&#x2F;修改”添加到暂存区"></a>4.3.2：添加操作：将工作区的“新建&#x2F;修改”添加到暂存区</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token punctuation">[</span>file name<span class="token punctuation">]</span></code></pre><h5 id="4-3-3：提交操作：将暂存区的内容提交到本地库"><a href="#4-3-3：提交操作：将暂存区的内容提交到本地库" class="headerlink" title="4.3.3：提交操作：将暂存区的内容提交到本地库"></a>4.3.3：提交操作：将暂存区的内容提交到本地库</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">"commit message"</span> <span class="token punctuation">[</span>file name<span class="token punctuation">]</span></code></pre><h5 id="4-3-4：查看历史记录："><a href="#4-3-4：查看历史记录：" class="headerlink" title="4.3.4：查看历史记录："></a>4.3.4：查看历史记录：</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> log</code></pre><h5 id="多屏显示控制方式"><a href="#多屏显示控制方式" class="headerlink" title="多屏显示控制方式"></a>多屏显示控制方式</h5><ul><li><p><strong>空格向下翻页</strong></p></li><li><p><strong>b向下翻页</strong></p></li><li><p><strong>q退出</strong></p></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> log --pretty<span class="token operator">=</span>oneline</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> log --oneline</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reflog</code></pre><h4 id="4-3-5、前进后退："><a href="#4-3-5、前进后退：" class="headerlink" title="4.3.5、前进后退："></a>4.3.5、前进后退：</h4><h5 id="基于索引值操作-推荐"><a href="#基于索引值操作-推荐" class="headerlink" title="基于索引值操作[推荐]"></a>基于索引值操作[推荐]</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reset --hard <span class="token punctuation">[</span>局部索引值<span class="token punctuation">]</span><span class="token function">git</span> reset --hard a6ace91</code></pre><h5 id="使用-符号：只能后退"><a href="#使用-符号：只能后退" class="headerlink" title="使用^符号：只能后退"></a>使用^符号：只能后退</h5><ul><li><strong>注意：一个^表示后退一步</strong></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reset --hard HEAD^</code></pre><h5 id="使用-符号：只能后退-1"><a href="#使用-符号：只能后退-1" class="headerlink" title="使用~符号：只能后退"></a>使用~符号：只能后退</h5><ul><li><strong>注意：表示后退n步</strong></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reset --hard HEAD~n</code></pre><h4 id="4-3-6、reset命令的三个参数对比"><a href="#4-3-6、reset命令的三个参数对比" class="headerlink" title="4.3.6、reset命令的三个参数对比"></a>4.3.6、reset命令的三个参数对比</h4><ul><li><p><strong>–soft参数：</strong></p><ul><li><strong>仅仅在本地库移动HEAD指针</strong></li></ul></li><li><p><strong>–mixed参数：</strong></p><ul><li><strong>在本地库移动HEAD指针</strong></li><li><strong>重置暂存区</strong></li></ul></li><li><p><strong>–hard参数：</strong></p><ul><li><strong>在本地库移动HEAD指针</strong></li><li><strong>重置暂存区</strong></li><li><strong>重置工作区</strong></li></ul></li></ul><h4 id="4-3-7、删除文件并找回"><a href="#4-3-7、删除文件并找回" class="headerlink" title="4.3.7、删除文件并找回"></a>4.3.7、删除文件并找回</h4><ul><li><strong>前提：删除前，文件存在时的状态提交到本地库。</strong></li><li><strong>操作：git reset –hard[指针位置]</strong><ul><li><strong>删除操作已经提交到本地库:指针位置指向历史记录</strong></li><li><strong>删除操作尚未提交到本地库:指针位置使用HEAD</strong></li></ul></li></ul><h4 id="4-3-8、比较文件差异："><a href="#4-3-8、比较文件差异：" class="headerlink" title="4.3.8、比较文件差异："></a>4.3.8、比较文件差异：</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span></code></pre><ul><li>将工作区中的文件和暂存区进行比较</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> diff<span class="token punctuation">[</span>本地库中历史版本<span class="token punctuation">]</span><span class="token punctuation">[</span>文件名<span class="token punctuation">]</span></code></pre><ul><li>将工作区中的文件和本地库历史记录比较</li><li>不带文件名比较多个文件</li></ul><h3 id="4-4、分支"><a href="#4-4、分支" class="headerlink" title="4.4、分支"></a>4.4、分支</h3><h4 id="4-4-1、什么是分支？"><a href="#4-4-1、什么是分支？" class="headerlink" title="4.4.1、什么是分支？"></a>4.4.1、什么是分支？</h4><ul><li><strong>在版本控制过程中，使用多条同时推进多个任务。</strong></li></ul><h4 id="4-4-2、分支的好处："><a href="#4-4-2、分支的好处：" class="headerlink" title="4.4.2、分支的好处："></a>4.4.2、分支的好处：</h4><ul><li><strong>同时并行推进多个功能开发，提高开发效率</strong></li><li><strong>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</strong></li></ul><h4 id="4-4-3、分支操作"><a href="#4-4-3、分支操作" class="headerlink" title="4.4.3、分支操作"></a>4.4.3、分支操作</h4><ul><li><strong>创建分支</strong></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch<span class="token punctuation">[</span>分支名<span class="token punctuation">]</span></code></pre><ul><li><strong>查看分支</strong></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch -v</code></pre><ul><li><strong>切换分支</strong></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> check<span class="token punctuation">[</span>分支名<span class="token punctuation">]</span></code></pre><ul><li><strong>合并分支</strong><ul><li><strong>第一步：切换到接受修改的分支（被合并，增加新内容）上</strong></li><li><strong>第二步：执行merge命令</strong></li></ul></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token punctuation">[</span>被合并分支名<span class="token punctuation">]</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> merge <span class="token punctuation">[</span>有新内容分支名<span class="token punctuation">]</span></code></pre><h5 id="冲突的解决"><a href="#冲突的解决" class="headerlink" title="冲突的解决"></a>冲突的解决</h5><ul><li><strong>第一步：编辑文件，删除特殊符号</strong></li><li><strong>第二步：把文件修改到满意的程度，保存退出</strong></li><li><strong>第三步：git add[文件名]</strong></li><li><strong>第四步：git commit -m ”日志信息“</strong><ul><li><strong>注意：此时 commit 一定不能带具体文件名</strong></li></ul></li></ul><h3 id="5、Git基本原理"><a href="#5、Git基本原理" class="headerlink" title="5、Git基本原理"></a>5、Git基本原理</h3><h4 id="5-1、哈希"><a href="#5-1、哈希" class="headerlink" title="5.1、哈希"></a>5.1、哈希</h4><ul><li><strong>哈希是一个系列的加密算法，各个不同的哈 希算法虽然加密 强度不同，但是有以下几个共同点:</strong><ul><li><strong>①不管输入数据的数据量有多大，输入同一个哈希算法，得到的加密结果长度固定。</strong></li><li><strong>②哈希算法确定，输入数据确定，输出数据能够保证不变</strong></li><li><strong>③哈希算法确定，输入数据有变化，输出数据一定有变化，而且通常变化很大</strong></li><li><strong>④哈希算法不可逆</strong></li><li><strong>Git底层采用的是SHA-1算法。</strong></li></ul></li></ul><h4 id="5-2、-Git保存版本的机制"><a href="#5-2、-Git保存版本的机制" class="headerlink" title="5.2、 Git保存版本的机制"></a>5.2、 Git保存版本的机制</h4><h5 id="5-2-1、集中式版本控制工具的文件管理机制"><a href="#5-2-1、集中式版本控制工具的文件管理机制" class="headerlink" title="5.2.1、集中式版本控制工具的文件管理机制"></a>5.2.1、集中式版本控制工具的文件管理机制</h5><ul><li><strong>以文件变更列表的方式存储信息。这类系统将它们保存的信息看作是-组基本文件和每个文件随时间逐步累积的差异。</strong></li></ul><h5 id="5-2-2-Git的文件管理机制"><a href="#5-2-2-Git的文件管理机制" class="headerlink" title="5.2.2 Git的文件管理机制"></a>5.2.2 Git的文件管理机制</h5><ul><li><p><strong>Git把数据看作是小型文件系统的一-组快照。 每次提交更新时Git都会对当前的全部文件制作-个快照 并保存这个快照的索引。为了高效，如果文件没有修改，Git不再重新存储该文件，而是只保留一个链接指向之 前存储的文件。所以Git的工作方式可以称之为快照流。</strong></p></li><li><p><strong>提交对象及其父对象形成的链条</strong></p></li></ul><h4 id="6-5、克隆"><a href="#6-5、克隆" class="headerlink" title="6.5、克隆"></a>6.5、克隆</h4><ul><li><strong>命令</strong></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> origin <span class="token punctuation">[</span>远程地址<span class="token punctuation">]</span></code></pre><ul><li><strong>效果</strong><ul><li><strong>完整的把远程库下载到本地</strong></li><li><strong>创建 origin 远程地址别名</strong></li><li><strong>初始化本地仓库</strong></li></ul></li></ul><h4 id="6-7、拉取"><a href="#6-7、拉取" class="headerlink" title="6.7、拉取"></a>6.7、拉取</h4><ul><li><strong>➢pull-fetch+merge</strong></li><li><strong>➢git fetch [远程库地址别名] [远程分支名]</strong></li><li><strong>➢git merge [远程库地址别名&#x2F;远程分支名]</strong></li></ul><h5 id="把远程库的master抓取下来（抓取下来并不是修改）"><a href="#把远程库的master抓取下来（抓取下来并不是修改）" class="headerlink" title="把远程库的master抓取下来（抓取下来并不是修改）"></a>把远程库的master抓取下来（抓取下来并不是修改）</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> fetch origin master</code></pre><h5 id="切换到origin-x2F-master下面："><a href="#切换到origin-x2F-master下面：" class="headerlink" title="切换到origin&#x2F;master下面："></a>切换到origin&#x2F;master下面：</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> checkout origin/master</code></pre><h5 id="把远程的master合并到本地的master："><a href="#把远程的master合并到本地的master：" class="headerlink" title="把远程的master合并到本地的master："></a>把远程的master合并到本地的master：</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> merge origin/master</code></pre><h4 id="6-8、解决冲突"><a href="#6-8、解决冲突" class="headerlink" title="6.8、解决冲突"></a>6.8、解决冲突</h4><h5 id="要点："><a href="#要点：" class="headerlink" title="要点："></a>要点：</h5><ul><li><strong>如果不是基于GitHub远程库的最新版所做的修改，不能推送，必须先拉</strong></li><li><strong>拉取下来后如果进入冲突状态，则按照“分支冲突解决”操作解决即可。</strong></li></ul><h5 id="类比："><a href="#类比：" class="headerlink" title="类比："></a>类比：</h5><ul><li><strong>债权人: 老王</strong></li><li><strong>债务人:小刘</strong></li><li><strong>老王说: 10天后归还。小刘接受，双方达成致。</strong></li><li><strong>老王媳妇说: 5天后归还。小刘不能接受。老王媳妇需要找老王确认后再执行。</strong></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端路线</title>
      <link href="/2022/04/01/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%BA%BF/"/>
      <url>/2022/04/01/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="前端路线："><a href="#前端路线：" class="headerlink" title="前端路线："></a>前端路线：</h3><h4 id="第一部分：-基础"><a href="#第一部分：-基础" class="headerlink" title="第一部分：(基础)"></a>第一部分：(基础)</h4><ul><li><p><strong>html</strong></p></li><li><p><strong>css</strong></p><p><a href="https://www.bilibili.com/video/BV1XJ411X7Ud?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1XJ411X7Ud?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>html5</strong></p></li><li><p><strong>css3</strong></p><p><a href="https://www.bilibili.com/video/BV1XJ411X7Ud?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1XJ411X7Ud?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>尚优选（练习如何布局）</strong></p><p><a href="https://www.bilibili.com/video/BV1ra411X7RX/?vd_source=fb74ca8f85f5680ee6b71243e4bd4322">https://www.bilibili.com/video/BV1ra411X7RX/?vd_source=fb74ca8f85f5680ee6b71243e4bd4322</a></p></li><li><p><strong>学完这些之后，自己手敲一个京东页面，一个博学谷页面（脱离视频）</strong></p></li></ul><h4 id="第二部分：（进阶）"><a href="#第二部分：（进阶）" class="headerlink" title="第二部分：（进阶）"></a>第二部分：（进阶）</h4><ul><li><p><strong>javaScript（这个很重要）</strong></p><p><a href="https://www.bilibili.com/video/BV1YW411T7GX?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1YW411T7GX?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>javaScript高级</strong></p><p><a href="https://www.bilibili.com/video/BV14s411E7qf?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV14s411E7qf?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>AJAX（发请求用到的）</strong></p><p><a href="https://www.bilibili.com/video/BV1WC4y1b78y?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1WC4y1b78y?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>es6（同样重要）</strong></p><p><a href="https://www.bilibili.com/video/BV1uK411H7on?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1uK411H7on?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>Promise</strong></p><p><a href="https://www.bilibili.com/video/BV1GA411x7z1?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1GA411x7z1?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>axios</strong></p><p><a href="https://www.bilibili.com/video/BV1wr4y1K7tq?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1wr4y1K7tq?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>node.js（前端的后台）</strong></p><p><a href="https://www.bilibili.com/video/BV1bs411E7pD?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1bs411E7pD?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>webpack5</strong></p><p><a href="https://www.bilibili.com/video/BV1cv411C74F?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1cv411C74F?spm_id_from=333.337.search-card.all.click</a></p><p><a href="https://www.bilibili.com/video/BV1e7411j7T5/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1e7411j7T5/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p><p><a href="https://www.bilibili.com/video/BV1e7411j7T5/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1e7411j7T5/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li></ul><h4 id="第三部分：（框架）"><a href="#第三部分：（框架）" class="headerlink" title="第三部分：（框架）"></a>第三部分：（框架）</h4><ul><li><p><strong>Vue2+Vue3</strong></p><p><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1Zy4y1K7SH?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>vue2项目实战</strong></p><p><a href="https://www.bilibili.com/video/BV1Vf4y1T7bw/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1Vf4y1T7bw/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>微信小程序</strong></p><p><a href="https://www.bilibili.com/video/BV1834y1676P/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1834y1676P/?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>微信小程序实战</strong></p><p><a href="https://www.bilibili.com/video/BV12K411A7A2/?spm_id_from=333.999.0.0&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV12K411A7A2/?spm_id_from=333.999.0.0&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>node项目</strong></p><p><a href="https://www.bilibili.com/video/BV17b4y1778c/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV17b4y1778c/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>vue3教学（上面大部分都为vue2，此视频为单独的vue3教学）</strong></p><p><a href="https://www.bilibili.com/video/BV1NR4y1x7Ab/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1NR4y1x7Ab/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>vue3项目实战</strong></p><p><a href="https://www.bilibili.com/video/BV1uB4y1a7se/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1uB4y1a7se/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>TypeScript</strong></p><p><a href="https://www.bilibili.com/video/BV1Xy4y1v7S2/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1Xy4y1v7S2/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>React</strong></p><p><a href="https://www.bilibili.com/video/BV1wy4y1D7JT?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1wy4y1D7JT?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>React项目（react版本更新快，并且版本之间更新比较大，如果博客更新不及时，请自行选择）</strong></p><p><a href="https://www.bilibili.com/video/BV1gh411U7JD/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%882021%EF%BC%89">https://www.bilibili.com/video/BV1gh411U7JD/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（2021）</a></p><p><a href="https://www.bilibili.com/video/BV1FV4y157Zx/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%882022%EF%BC%89">https://www.bilibili.com/video/BV1FV4y157Zx/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（2022）</a></p></li></ul><h4 id="第四部分：（其他）"><a href="#第四部分：（其他）" class="headerlink" title="第四部分：（其他）"></a>第四部分：（其他）</h4><ul><li><p><strong>大厂面试题</strong></p></li><li><p><strong>Git</strong></p><p><a href="https://www.bilibili.com/video/BV1vy4y1s7k6/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1vy4y1s7k6/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p><p><a href="https://www.bilibili.com/video/BV1MU4y1Y7h5/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1MU4y1Y7h5/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>jQuery（可学可不学）</strong></p></li><li><p><strong>Linux</strong></p><p><a href="https://www.bilibili.com/video/BV1Sv411r7vd/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1Sv411r7vd/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端路线</title>
      <link href="/2022/04/01/%E5%90%8E%E7%AB%AF%E8%B7%AF%E7%BA%BF/"/>
      <url>/2022/04/01/%E5%90%8E%E7%AB%AF%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="后端路线："><a href="#后端路线：" class="headerlink" title="后端路线："></a>后端路线：</h3><h4 id="第一部分：java基础"><a href="#第一部分：java基础" class="headerlink" title="第一部分：java基础"></a>第一部分：java基础</h4><ul><li><p><strong>java基础</strong></p></li><li><p><strong>javase（讲的都很好，看个人习惯选择）</strong></p><p><a href="https://www.bilibili.com/video/BV1fh411y7R8?spm_id_from=333.337.search-card.all.click%EF%BC%88%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9%E8%80%81%E6%9D%9C%EF%BC%89">https://www.bilibili.com/video/BV1fh411y7R8?spm_id_from=333.337.search-card.all.click（动力节点老杜）</a></p><p><a href="https://www.bilibili.com/video/BV1fh411y7R8/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E9%9F%A9%E9%A1%BA%E5%B9%B3%EF%BC%89">https://www.bilibili.com/video/BV1fh411y7R8/?spm_id_from=333.337.search-card.all.click（韩顺平）</a></p></li><li><p><strong>数据库基础</strong></p><p><a href="https://www.bilibili.com/video/BV1fx411X7BD?p=47&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1fx411X7BD?p=47&amp;spm_id_from=pageDriver</a></p></li><li><p><strong>jdbc</strong></p><p><a href="https://www.bilibili.com/video/BV1Bt41137iB?spm_id_from=333.788.b_636f6d6d656e74.8">https://www.bilibili.com/video/BV1Bt41137iB?spm_id_from=333.788.b_636f6d6d656e74.8</a></p></li></ul><h4 id="第二部分：数据结构"><a href="#第二部分：数据结构" class="headerlink" title="第二部分：数据结构"></a>第二部分：数据结构</h4><p>​        <a href="https://www.bilibili.com/video/BV1B4411H76f?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1B4411H76f?spm_id_from=333.337.search-card.all.click</a></p><ul><li><strong>数组</strong></li><li><strong>栈</strong></li><li><strong>队列</strong></li><li><strong>链表</strong></li><li><strong>树</strong></li><li><strong>散列表</strong></li><li><strong>堆</strong></li><li><strong>图</strong></li></ul><h4 id="第三部分：web前端"><a href="#第三部分：web前端" class="headerlink" title="第三部分：web前端"></a>第三部分：web前端</h4><ul><li><p><strong>html</strong></p><p><a href="https://www.bilibili.com/video/BV1XJ411X7Ud?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1XJ411X7Ud?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>css</strong></p><p><a href="https://www.bilibili.com/video/BV1XJ411X7Ud?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1XJ411X7Ud?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>js基础</strong></p><p><a href="https://www.bilibili.com/video/av62653534/?spm_id_from=333.788.video.desc.click">https://www.bilibili.com/video/av62653534/?spm_id_from=333.788.video.desc.click</a></p></li><li><p><strong>jquery</strong></p><p><a href="https://www.bilibili.com/video/BV1pt411H7D6/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E9%BB%91%E9%A9%AC%EF%BC%89">https://www.bilibili.com/video/BV1pt411H7D6/?spm_id_from=333.337.search-card.all.click（黑马）</a></p><p><a href="https://www.bilibili.com/video/BV1ts411E7ag/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E5%B0%9A%E7%A1%85%E8%B0%B7%EF%BC%89">https://www.bilibili.com/video/BV1ts411E7ag/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（尚硅谷）</a></p><p><a href="https://www.bilibili.com/video/BV1Jg4y1B7n4/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9%EF%BC%89">https://www.bilibili.com/video/BV1Jg4y1B7n4/?spm_id_from=333.337.search-card.all.click（动力节点）</a></p></li></ul><h4 id="第四部分：框架总结"><a href="#第四部分：框架总结" class="headerlink" title="第四部分：框架总结"></a>第四部分：框架总结</h4><ul><li><p><strong>javaweb（可以根据个人习惯选择视频）</strong></p><p><a href="https://www.bilibili.com/video/BV1Y7411K7zz?spm_id_from=333.337.search-card.all.click%EF%BC%88%E5%B0%9A%E7%A1%85%E8%B0%B7%E7%9A%84%EF%BC%89">https://www.bilibili.com/video/BV1Y7411K7zz?spm_id_from=333.337.search-card.all.click（尚硅谷的）</a></p><p><a href="https://www.bilibili.com/video/BV1Z3411C7NZ/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9%E8%80%81%E6%9D%9C%E7%9A%84%EF%BC%89">https://www.bilibili.com/video/BV1Z3411C7NZ/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（动力节点老杜的）</a></p><p><a href="https://www.bilibili.com/video/BV1Qf4y1T7Hx/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E9%BB%91%E9%A9%AC%E7%9A%84%EF%BC%89">https://www.bilibili.com/video/BV1Qf4y1T7Hx/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（黑马的）</a></p></li><li><p><strong>书城项目（学完javaweb的练手项目）</strong></p><p><a href="https://www.bilibili.com/video/BV1jK411W7yh/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1jK411W7yh/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>自己用javaweb写一个博客项目</strong></p></li><li><p><strong>ssm</strong></p><p><a href="https://www.bilibili.com/video/BV1WZ4y1P7Bp?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1WZ4y1P7Bp?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>ssm练手项目</strong></p><p><a href="https://www.bilibili.com/video/BV1tZ4y1d7kg/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1tZ4y1d7kg/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>springboot</strong></p><p><a href="https://www.bilibili.com/video/BV19K4y1L7MT/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV19K4y1L7MT/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a> (尚硅谷)</p><p><a href="https://www.bilibili.com/video/BV15b4y1a7yG/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E9%BB%91%E9%A9%AC%EF%BC%89">https://www.bilibili.com/video/BV15b4y1a7yG/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（黑马）</a></p><p><a href="https://www.bilibili.com/video/BV1XQ4y1m7ex/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9%EF%BC%89">https://www.bilibili.com/video/BV1XQ4y1m7ex/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（动力节点）</a></p></li><li><p><strong>springboot项目（第一个更适合整合，第二个更适合进阶）</strong></p><p><a href="https://www.bilibili.com/video/BV13a411q753/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV13a411q753/?spm_id_from=333.337.search-card.all.click</a></p><p><a href="https://www.bilibili.com/video/BV1bf4y1V7Bx/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1bf4y1V7Bx/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li></ul><h4 id="第五部分：分布式，微服务，并行架构"><a href="#第五部分：分布式，微服务，并行架构" class="headerlink" title="第五部分：分布式，微服务，并行架构"></a>第五部分：分布式，微服务，并行架构</h4><ul><li><p><strong>Linux（后端必学）</strong></p><p><a href="https://www.bilibili.com/video/BV1Sv411r7vd/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E9%9F%A9%E9%A1%BA%E5%B9%B3%E7%9A%84%EF%BC%8C%E8%AE%B2%E7%9A%84%E5%BE%88%E8%AF%A6%E7%BB%86%EF%BC%89">https://www.bilibili.com/video/BV1Sv411r7vd/?spm_id_from=333.337.search-card.all.click（韩顺平的，讲的很详细）</a></p><p><a href="https://www.bilibili.com/video/BV1nW411L7xm/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E9%BB%91%E9%A9%AC%E7%9A%84%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%B0%9D%E8%AF%95%E8%BF%90%E7%BB%B4%EF%BC%89">https://www.bilibili.com/video/BV1nW411L7xm/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（黑马的，可以尝试运维）</a></p><p><strong>如果使用虚拟机，无法联网，可以试试这个</strong></p><p><a href="https://blog.csdn.net/sinat_32366329/article/details/103544810">https://blog.csdn.net/sinat_32366329/article/details/103544810</a></p></li><li><p><strong>redis</strong></p><p><a href="https://www.bilibili.com/video/BV1oW411u75R/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E5%B0%9A%E7%A1%85%E8%B0%B7%EF%BC%8C%E8%AE%B2%E7%9A%84%E6%AF%94%E8%BE%83%E7%BB%86%EF%BC%89">https://www.bilibili.com/video/BV1oW411u75R/?spm_id_from=333.337.search-card.all.click（尚硅谷，讲的比较细）</a></p><p><a href="https://www.bilibili.com/video/BV1cr4y1671t/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E9%BB%91%E9%A9%AC%EF%BC%8C%E5%90%84%E6%96%B9%E9%9D%A2%E5%9D%87%E8%A1%A1%EF%BC%89">https://www.bilibili.com/video/BV1cr4y1671t/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（黑马，各方面均衡）</a></p><p><strong>熟练使用redis，可以做这个项目</strong></p><p><a href="https://www.bilibili.com/video/BV1cr4y1671t?p=24&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E4%B8%8A%E9%9D%A2%E9%BB%91%E9%A9%AC%E8%A7%86%E9%A2%91%E9%87%8C%E9%9D%A2%E7%9A%84%EF%BC%89">https://www.bilibili.com/video/BV1cr4y1671t?p=24&amp;vd_source=621637a62188143a3e1e83d34f9035a2（上面黑马视频里面的）</a></p></li><li><p><strong>docker</strong></p><p><a href="https://www.bilibili.com/video/BV1gr4y1U7CY/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E5%B0%9A%E7%A1%85%E8%B0%B7%EF%BC%89">https://www.bilibili.com/video/BV1gr4y1U7CY/?spm_id_from=333.337.search-card.all.click（尚硅谷）</a></p><p><a href="https://www.bilibili.com/video/BV1CJ411T7BK/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E9%BB%91%E9%A9%AC%EF%BC%89">https://www.bilibili.com/video/BV1CJ411T7BK/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（黑马）</a></p></li><li><p><strong>Netty</strong></p><p><a href="https://www.bilibili.com/video/BV1py4y1E7oA/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E9%BB%91%E9%A9%AC%E7%9A%84%EF%BC%89">https://www.bilibili.com/video/BV1py4y1E7oA/?spm_id_from=333.337.search-card.all.click（黑马的）</a></p><p><a href="https://www.bilibili.com/video/BV1DJ411m7NR/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E5%B0%9A%E7%A1%85%E8%B0%B7%E7%9A%84%EF%BC%89">https://www.bilibili.com/video/BV1DJ411m7NR/?spm_id_from=333.337.search-card.all.click（尚硅谷的）</a></p></li><li><p><strong>Dubbo(PRC框架)</strong></p><p><a href="https://www.bilibili.com/video/BV1VE411q7dX/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E9%BB%91%E9%A9%AC%E7%9A%84%EF%BC%89">https://www.bilibili.com/video/BV1VE411q7dX/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（黑马的）</a></p><p><a href="https://www.bilibili.com/video/BV1ns411c7jV/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E5%B0%9A%E8%A7%84%E6%A0%BC%E7%9A%84%EF%BC%89">https://www.bilibili.com/video/BV1ns411c7jV/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（尚规格的）</a></p></li><li><p><strong>FastDFS(分布式的文件系统，常用于上传照片文件等)</strong></p><p><a href="https://www.bilibili.com/video/BV1ta4y1v7Kw/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9%EF%BC%89">https://www.bilibili.com/video/BV1ta4y1v7Kw/?spm_id_from=333.337.search-card.all.click（动力节点）</a></p></li><li><p><strong>Spring家族</strong></p><ul><li><p><strong>SpringBoot（见上文）</strong></p></li><li><p><strong>SpringCloud</strong></p><p><a href="https://www.bilibili.com/video/BV18E411x7eT/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E5%B0%9A%E7%A1%85%E8%B0%B7%EF%BC%89">https://www.bilibili.com/video/BV18E411x7eT/?spm_id_from=333.337.search-card.all.click（尚硅谷）</a></p></li></ul><p><a href="https://www.bilibili.com/video/BV1f94y1U7AB/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9%EF%BC%89">https://www.bilibili.com/video/BV1f94y1U7AB/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（动力节点）</a></p><p>  <a href="https://www.bilibili.com/video/BV1LQ4y127n4/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E9%BB%91%E9%A9%AC%EF%BC%89">https://www.bilibili.com/video/BV1LQ4y127n4/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（黑马）</a></p><p>  <a href="https://www.bilibili.com/video/BV11A411H775/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88java%E4%B9%8B%E7%88%B6%EF%BC%8C%E4%BD%99%E8%83%9C%E5%86%9B%EF%BC%89">https://www.bilibili.com/video/BV11A411H775/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（java之父，余胜军）</a></p><ul><li><strong>Nacos（阿里巴巴服务器发现，配置，管理）</strong></li><li><strong>Seata（阿里巴巴，分布式事务的中间件）</strong></li><li><strong>Sentinel（阿里巴巴，流量控制，熔断，系统负载保护）</strong></li><li><strong>GateWay（网关，限流，日志，监控，鉴权）</strong></li><li><strong>OpenFeign（服务间调用）</strong></li></ul></li><li><p><strong>搜索引擎</strong></p><ul><li><p><strong>ElasticSeqrch（简称es）</strong></p><p><a href="https://www.bilibili.com/video/BV1nF411F75k/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1nF411F75k/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>Solr</strong></p><p><a href="https://www.bilibili.com/video/BV1dh411Q7Qu/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E9%BB%91%E9%A9%AC%EF%BC%89">https://www.bilibili.com/video/BV1dh411Q7Qu/?spm_id_from=333.337.search-card.all.click（黑马）</a></p><p><a href="https://www.bilibili.com/video/BV1gZ4y1a7RH/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E5%8D%83%E5%B3%B0%EF%BC%89">https://www.bilibili.com/video/BV1gZ4y1a7RH/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（千峰）</a></p></li></ul></li><li><p><strong>中间件</strong></p><ul><li><p><strong>MyCat（数据库中间件，分库分表）</strong></p><p><a href="https://www.bilibili.com/video/BV1iT41157JX/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E5%B0%9A%E7%A1%85%E8%B0%B7%EF%BC%89">https://www.bilibili.com/video/BV1iT41157JX/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（尚硅谷）</a></p></li></ul><p><a href="https://www.bilibili.com/video/BV1gK4y1b7iU/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9%EF%BC%89">https://www.bilibili.com/video/BV1gK4y1b7iU/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（动力节点）</a></p><p>  <a href="https://www.bilibili.com/video/BV17f4y1D7pm/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E9%BB%91%E9%A9%AC%EF%BC%89">https://www.bilibili.com/video/BV17f4y1D7pm/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（黑马）</a></p><ul><li><strong>消息中间件</strong><ul><li><p><strong>ActiveMQ</strong></p><p><a href="https://www.bilibili.com/video/BV164411G7aB/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E5%B0%9A%E7%A1%85%E8%B0%B7%EF%BC%89">https://www.bilibili.com/video/BV164411G7aB/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（尚硅谷）</a></p><p><a href="https://www.bilibili.com/video/BV1vJ41177j1/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E9%BB%91%E9%A9%AC%EF%BC%89">https://www.bilibili.com/video/BV1vJ41177j1/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（黑马）</a></p></li><li><p><strong>RabbitMQ</strong></p><p><a href="https://www.bilibili.com/video/BV1cb4y1o7zz/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E5%B0%9A%E7%A1%85%E8%B0%B7%EF%BC%89">https://www.bilibili.com/video/BV1cb4y1o7zz/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（尚硅谷）</a></p><p><a href="https://www.bilibili.com/video/BV15k4y1k7Ep/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E9%BB%91%E9%A9%AC%EF%BC%89">https://www.bilibili.com/video/BV15k4y1k7Ep/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（黑马）</a></p><p><a href="https://www.bilibili.com/video/BV1dt4y1z7vG/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88java%E4%B9%8B%E7%88%B6%EF%BC%8C%E4%BD%99%E8%83%9C%E5%86%9B%EF%BC%89">https://www.bilibili.com/video/BV1dt4y1z7vG/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（java之父，余胜军）</a></p><p><a href="https://www.bilibili.com/video/BV1Ap4y1D7tU/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9%EF%BC%89">https://www.bilibili.com/video/BV1Ap4y1D7tU/?spm_id_from=333.337.search-card.all.click（动力节点）</a></p></li><li><p><strong>KafKa</strong></p><p><a href="https://www.bilibili.com/video/BV1vr4y1677k/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E5%B0%9A%E7%A1%85%E8%B0%B7%EF%BC%89">https://www.bilibili.com/video/BV1vr4y1677k/?spm_id_from=333.337.search-card.all.click（尚硅谷）</a></p><p><a href="https://www.bilibili.com/video/BV19y4y1b7Uo/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E9%BB%91%E9%A9%AC%EF%BC%89">https://www.bilibili.com/video/BV19y4y1b7Uo/?spm_id_from=333.337.search-card.all.click（黑马）</a></p></li></ul></li></ul></li><li><p><strong>日志分析与监控（ELK）</strong></p><ul><li><strong>ElasticSearch（搜集，存储数据）</strong></li><li><strong>LogStatsh（分析日志）</strong></li><li><strong>Kibana（可视化）</strong></li></ul></li><li><p><strong>Zookeepr（一致性服务：比如 配置维护，域名维护，分布式同步）</strong></p><p><a href="https://www.bilibili.com/video/BV1to4y1C7gw/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E5%B0%9A%E7%A1%85%E8%B0%B7%EF%BC%89">https://www.bilibili.com/video/BV1to4y1C7gw/?spm_id_from=333.337.search-card.all.click（尚硅谷）</a></p><p><a href="https://www.bilibili.com/video/BV1M741137qY/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E9%BB%91%E9%A9%AC%EF%BC%89">https://www.bilibili.com/video/BV1M741137qY/?spm_id_from=333.337.search-card.all.click（黑马）</a></p></li></ul><h4 id="第六部分：DevOps-开发运维一体化-自动化部分管理项目，解决CI-x2F-CD"><a href="#第六部分：DevOps-开发运维一体化-自动化部分管理项目，解决CI-x2F-CD" class="headerlink" title="第六部分：DevOps(开发运维一体化)自动化部分管理项目，解决CI&#x2F;CD"></a>第六部分：DevOps(开发运维一体化)自动化部分管理项目，解决CI&#x2F;CD</h4><p><a href="https://www.bilibili.com/video/BV13Q4y1C7hS/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E5%B0%9A%E7%A1%85%E8%B0%B7%EF%BC%89">https://www.bilibili.com/video/BV13Q4y1C7hS/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（尚硅谷）</a></p><ul><li><strong>k8s（让部署容器化的应用简单高效）</strong></li><li><strong>普罗米修斯（prometheus）[系统监控和报警]</strong></li><li><strong>Jenkins（监控持续的工作[部署，集成，交付]）</strong></li><li><strong>Harbor（容器的镜像仓库）</strong></li><li><strong>GitLab</strong></li><li><strong>项目工程代码质量检测（sonarqube）</strong></li></ul><h4 id="第七部分：大数据技术"><a href="#第七部分：大数据技术" class="headerlink" title="第七部分：大数据技术"></a>第七部分：大数据技术</h4><ul><li><p><strong>Hadoop</strong></p><p><a href="https://www.bilibili.com/video/BV1Qp4y1n7EN/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1Qp4y1n7EN/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p><p><a href="https://www.bilibili.com/video/BV1CU4y1N7Sh/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1CU4y1N7Sh/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>Hive</strong></p><p><a href="https://www.bilibili.com/video/BV1EZ4y1G7iL/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1EZ4y1G7iL/?spm_id_from=333.337.search-card.all.click</a></p><p><a href="https://www.bilibili.com/video/BV1L5411u7ae/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1L5411u7ae/?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>Impals</strong></p><p><a href="https://www.bilibili.com/video/BV1GA411E7V9/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1GA411E7V9/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>spark</strong></p><p><a href="https://www.bilibili.com/video/BV11A411L7CK/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV11A411L7CK/?spm_id_from=333.337.search-card.all.click</a></p><p><a href="https://www.bilibili.com/video/BV1Jq4y1z7VP/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1Jq4y1z7VP/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>flink</strong></p><p><a href="https://www.bilibili.com/video/BV133411s7Sa/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV133411s7Sa/?spm_id_from=333.337.search-card.all.click</a></p><p><a href="https://www.bilibili.com/video/BV1Gt4y1z7bR/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1Gt4y1z7bR/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li></ul><h4 id="第八部分：项目"><a href="#第八部分：项目" class="headerlink" title="第八部分：项目"></a>第八部分：项目</h4><ul><li><strong>电商</strong></li><li><strong>金融</strong></li><li><strong>教育</strong></li><li><strong>直播</strong></li><li><strong>CRM,ERP</strong></li></ul><h4 id="第九部分："><a href="#第九部分：" class="headerlink" title="第九部分："></a>第九部分：</h4><ul><li><strong>大厂的高配面试题</strong></li></ul><h4 id="第十部分：底层源码-x2F-内核研究"><a href="#第十部分：底层源码-x2F-内核研究" class="headerlink" title="第十部分：底层源码&#x2F;内核研究"></a>第十部分：底层源码&#x2F;内核研究</h4><h5 id="编程基础的扩展（科班）"><a href="#编程基础的扩展（科班）" class="headerlink" title="编程基础的扩展（科班）"></a>编程基础的扩展（科班）</h5><ul><li><p><strong>计算机网络</strong></p></li><li><p><strong>操作系统</strong></p></li><li><p><strong>编译原理</strong></p></li><li><p><strong>离散数学</strong></p></li><li><p><strong>数值分析</strong></p></li><li><p><strong>计算机组成原理</strong></p></li><li><p><strong>汇编语言</strong></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0代快速码搭建网站</title>
      <link href="/2022/04/01/0%E4%BB%A3%E7%A0%81%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/"/>
      <url>/2022/04/01/0%E4%BB%A3%E7%A0%81%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h2><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li>Node.js (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li><li>Git<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>安装以后，可以使用以下两种方式执行 Hexo：</p><ol><li><code>npx hexo</code></li><li>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo</code>：</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">'PATH="<span class="token variable">$PATH</span>:./node_modules/.bin"'</span> <span class="token operator">>></span> ~/.profile</code></pre><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre class=" language-bash"><code class="language-bash">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">npm</span> <span class="token function">install</span></code></pre><p>新建完成后，指定文件夹的目录如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">.</span>├── _config.yml├── package.json├── scaffolds├── <span class="token function">source</span><span class="token operator">|</span>   ├── _drafts<span class="token operator">|</span>   └── _posts└── themes</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>此时，通过 <code>hexo s</code> 命令即可在本地启动您的博客站点了。</p><pre class=" language-bash"><code class="language-bash">~ hexo sINFO  Start processingINFO  Hexo is running at http://localhost:4000 <span class="token keyword">.</span> Press Ctrl+C to stop.</code></pre><p>接下来将安装主题，配置博客托管平台，实现一键发布并刷新<a href="https://so.csdn.net/so/search?q=CDN&spm=1001.2101.3001.7020">CDN</a>缓存。</p><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><h4 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h4><p>hexo-theme-matery 是一个采用 Material Design 和响应式设计的 Hexo 博客主题，点击 这里 可以查看示例效果。点击 这里 下载 master 分支的最新稳定版的代码，解压缩后，将 hexo-theme-matery 的文件夹复制到 Hexo 的 themes 文件夹中即可。</p><h4 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h4><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 _config.yml 的 url 的值为你的网站主 URL（如：<a href="http://xxx.github.io)./">http://xxx.github.io）。</a></li><li>建议修改两个 per_page 的分页条数值为 6 的倍数，如：12、18 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果是中文用户，则建议修改 language 的值为 zh-CN。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class=" language-bash"><code class="language-bash">---title: categoriesdate: 2018-09-30 17:25:30type: <span class="token string">"categories"</span>layout: <span class="token string">"categories"</span>---</code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class=" language-bash"><code class="language-bash">---title: tagsdate: 2018-09-30 18:23:38type: <span class="token string">"tags"</span>layout: <span class="token string">"tags"</span>---</code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">---title: aboutdate: 2018-09-30 17:25:30type: <span class="token string">"about"</span>layout: <span class="token string">"about"</span>---</code></pre><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class=" language-bash"><code class="language-bash">---title: friendsdate: 2018-12-12 21:25:30type: <span class="token string">"friends"</span>layout: <span class="token string">"friends"</span>---</code></pre><p>同时，在 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"https://www.lixl.cn/medias/avatar.jpg"</span>,    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"悟尘记"</span>,    <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"人生就是一场修行，上善若水，厚德载物。"</span>,    <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"https://www.lixl.cn/"</span>,    <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"前去参观"</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"https://wiki.hyperledger.org/download/attachments/2392069/fabric?version=1&amp;modificationDate=1540928132000&amp;api=v2"</span>,    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"Fabric"</span>,    <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"A Blockchain Platform for the Enterprise"</span>,    <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"https://hyperledger-fabric.readthedocs.io/en/master/"</span>,    <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"https://www.bootcdn.cn/assets/img/maoyun.svg"</span>,    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"BootCDN"</span>,    <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"稳定、快速、免费的前端开源项目 CDN 加速服务。"</span>,    <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"https://www.bootcdn.cn/"</span>,    <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"前去加速"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class=" language-bash"><code class="language-bash">highlight:  enable: <span class="token boolean">false</span>prism_plugin:  mode: <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  theme: <span class="token string">'tomorrow'</span>  line_number: <span class="token boolean">false</span>    <span class="token comment" spellcheck="true"># default false</span>  custom_css:</code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-bash"><code class="language-bash">search:  path: search.xml  field: post</code></pre><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱的配置，可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://github.com/blinkfox"</span> class<span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data-tooltip<span class="token operator">=</span><span class="token string">"访问我的GitHub"</span> data-position<span class="token operator">=</span><span class="token string">"top"</span> data-delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"fa fa-github"</span><span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span><span class="token operator">&lt;</span>/a<span class="token operator">></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供参考：</p><ul><li>Facebook: fa-facebook</li><li>Twitter: fa-twitter</li><li>Google-plus: fa-google-plus</li><li>Linkedin: fa-linkedin</li><li>Tumblr: fa-tumblr</li><li>Medium: fa-medium</li><li>Slack: fa-slack</li><li>新浪微博: fa-weibo</li><li>微信: fa-wechat</li><li>QQ: fa-qq</li></ul><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p>通过 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a> 插件可以实现一键将博客同时部署到多个git仓库中。如同时发布到github及gitee提供的pages服务。安装：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>修改 Hexo 根目录下的 <code>_config.yml</code> 文件中的如下内容:</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span>deploy:  - type: <span class="token function">git</span>    repo: https://github.com/lxl80/blog.git    branch: gh-pages    ignore_hidden: <span class="token boolean">false</span>  - type: <span class="token function">git</span>    repo: https://gitee.com/lxl80/lxl80.git    branch: master    ignore_hidden: <span class="token boolean">false</span></code></pre><p>也可以如本站一样，采用 <a href="https://github.com/75k/hexo-deployer-cos-enhanced">hexo-deployer-cos-enhanced</a> 插件将静态内容部署到腾讯云对象存储服务中，在DNS配置中将境内线路解析到腾讯云CDN地址，实现加速。部署完成后会自动刷新被更新文件的CDN缓存。</p><p>安装：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-cos-enhanced --save</code></pre><p><code>_config.yml</code> 配置如下:</p><pre class=" language-bash"><code class="language-bash">deploy:  - type: <span class="token function">git</span>    repo: https://github.com/lxl80/blog.git    branch: gh-pages    ignore_hidden: <span class="token boolean">false</span>  - type: cos    bucket: lxl80-130****    region: ap-beijing    secretId: AKIDh9****F8FvL    secretKey: Z3IGiur****QZR3PgjXmlVg    cdnConfig:      enable: <span class="token boolean">true</span>      cdnUrl: https://static.lixl.cn      bucket: static-130****      region: ap-beijing      folder: static      secretId: AKIDh9****F8FvL      secretKey: Z3IGiur****QZR3PgjXmlVg</code></pre><p>然后通过 <code>hexo g -d</code> 即可实现一键发布，并更新CDN缓存。</p><h3 id="文章链接转静态短地址（建议安装）"><a href="#文章链接转静态短地址（建议安装）" class="headerlink" title="文章链接转静态短地址（建议安装）"></a>文章链接转静态短地址（建议安装）</h3><p>如果文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 SEO，且 gitment 评论对中文链接也不支持。我们可以用 hexo-permalink-pinyin Hexo 插件生成文章时生成中文拼音的永久链接，或者用hexo-abbrlink 生成静态文章链接。以下结合hexo-abbrlink生成类似 &#x2F;yyyy&#x2F;mmdd+随机数.html 的文章链接地址。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，修改 <code>permalink:</code> ，并在文件末尾新增 <code>abbrlink:</code>配置项：</p><pre class=" language-bash"><code class="language-bash">permalink: :year/:month:day:abbrlink.htmlabbrlink:   alg: crc16 <span class="token comment" spellcheck="true">#算法选项：crc16丨crc32</span>  rep: dec <span class="token comment" spellcheck="true">#输出进制：dec为十进制，hex为十六进制</span></code></pre><h3 id="CND加速（建议启用）"><a href="#CND加速（建议启用）" class="headerlink" title="CND加速（建议启用）"></a>CND加速（建议启用）</h3><p>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，<a href="https://www.jsdelivr.com/">jsDelivr</a> + Github便是免费且好用的CDN，非常适合博客网站使用。也可以选择主流云服务商提供的对象存储+CDN来获得更快速及稳定的访问效果，费用低到几乎可忽略。</p><p><strong>用法：</strong></p><pre class=" language-bash"><code class="language-bash">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</code></pre><p><strong>例如：</strong></p><pre class=" language-bash"><code class="language-bash">https://cdn.jsdelivr.net/gh/lxl80/blog@gh-pages/medias/banner/1.jpg</code></pre><h3 id="文章字数统计插件（可选的）"><a href="#文章字数统计插件（可选的）" class="headerlink" title="文章字数统计插件（可选的）"></a>文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre class=" language-bash"><code class="language-bash">wordCount:  enable: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># 将这个值设置为 true 即可.</span>  postWordCount: <span class="token boolean">true</span>  min2read: <span class="token boolean">true</span>  totalCount: <span class="token boolean">true</span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-bash"><code class="language-bash">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: <span class="token string">' '</span>  order_by: -date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明已经安装成功了。</p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li>favicon 和 Logo</li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li>Gitalk、Gitment、Valine 和 disqus 评论配置</li><li>不蒜子统计和谷歌分析（Google Analytics）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 hashcode 值取余，来选择展示对应的特色图</li></ul><p>如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class=" language-bash"><code class="language-bash">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */.bg-color <span class="token punctuation">{</span>    background-image: linear-gradient<span class="token punctuation">(</span>to right, <span class="token comment" spellcheck="true">#4cbf30 0%, #0f9d58 100%);</span><span class="token punctuation">}</span>@-webkit-keyframes rainbow <span class="token punctuation">{</span>   /* 动态切换背景颜色. */<span class="token punctuation">}</span>@keyframes rainbow <span class="token punctuation">{</span>    /* 动态切换背景颜色. */<span class="token punctuation">}</span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>可以直接在 &#x2F;source&#x2F;medias&#x2F;banner 文件夹中更换喜欢的 banner 图片，主题代码中是每天动态切换一张，只需 7 张即可。如果会 JavaScript 代码，可以修改成自己喜欢切换逻辑，如：随机切换等，banner 切换的代码位置在 &#x2F;layout&#x2F;_partial&#x2F;bg-cover-content.ejs 文件的 <script></script> 代码中：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">$(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span>.css<span class="token punctuation">(</span><span class="token string">'background-image'</span>, <span class="token string">'url(/medias/banner/'</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">)</span>.getDay<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><p><img src="/2022/04/01/0%E4%BB%A3%E7%A0%81%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/%22%22C:%5CUsers%5C%E8%96%9B%E4%B9%8B%E8%B0%A6%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220401103401684.png%22%22C:%5CUsers%5C%E8%96%9B%E4%B9%8B%E8%B0%A6%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220401103401684.png%22%22"></p><p>注意:</p><p>如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。<br>date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。<br>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供使用：开源中国在线工具、chahuo、站长工具。</p><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class=" language-bash"><code class="language-bash">---title: 基于Hexo的hexo-theme-matery主题搭建博客并优化date: 2019-10-03 14:25:00---</code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class=" language-bash"><code class="language-bash">---title: 基于Hexo的hexo-theme-matery主题搭建博客并优化date: 2019-10-03 14:25:00author: 悟尘img: /source/images/xxx.jpgtop: <span class="token boolean">true</span>cover: <span class="token boolean">true</span>coverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: <span class="token boolean">false</span>mathjax: <span class="token boolean">false</span>summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: 工具tags:  - blog  - hexo---</code></pre><p>ps：本篇博客非原创，原创博客请见：<a href="https://blog.csdn.net/jspnetcn/article/details/104111651">https://blog.csdn.net/jspnetcn/article/details/104111651</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql练习</title>
      <link href="/2020/04/06/Mysql%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
      <url>/2020/04/06/Mysql%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="1、取得每个部门最高薪水的人员名称"><a href="#1、取得每个部门最高薪水的人员名称" class="headerlink" title="1、取得每个部门最高薪水的人员名称"></a>1、取得每个部门最高薪水的人员名称</h3><h4 id="第一步：取得每个部门最高薪水"><a href="#第一步：取得每个部门最高薪水" class="headerlink" title="第一步：取得每个部门最高薪水"></a>第一步：取得每个部门最高薪水</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">as</span> maxal <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span></code></pre><table><thead><tr><th>deptno</th><th>maxsal</th></tr></thead><tbody><tr><td><strong>10</strong></td><td><strong>5000.00</strong></td></tr><tr><td><strong>20</strong></td><td><strong>3000</strong></td></tr><tr><td><strong>30</strong></td><td><strong>2850</strong></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
